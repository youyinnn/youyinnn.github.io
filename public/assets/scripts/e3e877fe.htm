<h2 id="java">Java</h2>
<h3 id="java8-系列文章">Java8 系列文章</h3>
<p><a href="http://www.importnew.com/11908.html">http://www.importnew.com/11908.html</a></p>
<h3 id="牛客-httpservletrequest-getparameter">牛客 HttpServletRequest. getParameter</h3>
<p><img src="https://user-images.githubusercontent.com/23525754/40235928-620a249c-5ade-11e8-9b07-7dd6254daea3.png" alt="image"></p>
<blockquote>
<p>编码格式由浏览器决定，浏览器根据 html 中指定的编码格式进行编码，tomcat 根据指定的格式进行解码, tomcat 默认的解码方式是 ISO8859-1</p>
</blockquote>
<h3 id="java-spliterator">Java Spliterator</h3>
<p>参考 1: <a href="https://segmentfault.com/q/1010000007087438">https://segmentfault.com/q/1010000007087438</a>
参考 2: <a href="https://blog.csdn.net/lh513828570/article/details/56673804">https://blog.csdn.net/lh513828570/article/details/56673804</a></p>
<h3 id="牛客-integer-的拆箱装箱">牛客 Integer 的拆箱装箱</h3>
<p><img src="https://user-images.githubusercontent.com/23525754/40236440-22aec3b4-5ae0-11e8-8c36-740673df8f06.png" alt="image"></p>
<p><img src="https://user-images.githubusercontent.com/23525754/40236420-137a4490-5ae0-11e8-91ae-c75518a5806c.png" alt="image"></p>
<ul>
<li>基本数据类型和包装类==比较的时候, 基本数据类型会拆箱, 所以是值比较</li>
<li>valueOf()的取值还有 IntegerCached 的概念, 在[-127,127]之间的数会从池里面找, 有就返回同样的引用</li>
</ul>
<h3 id="牛客-getdeclaredmethods的范围">牛客 getDeclaredMethods()的范围</h3>
<p><img src="https://user-images.githubusercontent.com/23525754/40236595-ae2525f0-5ae0-11e8-89bb-c0649f2ba2b1.png" alt="image"></p>
<p>Doc:</p>
<blockquote>
<p>public Method[] getDeclaredMethods()</p>
<p>Returns an array containing Method objects reflecting all the declared methods of the class or interface represented by this Class object,</p>
<p>including public, protected, default (package) access, and private methods, <strong>but excluding inherited methods</strong>.</p>
</blockquote>
<h3 id="牛客-sleep和-wait">牛客 sleep()和 wait()</h3>
<p><img src="https://user-images.githubusercontent.com/23525754/40236826-52947b72-5ae1-11e8-8483-c867082dece0.png" alt="image"></p>
<p><strong>Java 中的多线程是一种抢占式的机制，而不是分时机制。抢占式的机制是有多个线程处于可运行状态，但是只有一个线程在运行</strong></p>
<h5 id="small_orange_diamond共同点-：">🔸共同点 ：</h5>
<ol>
<li>他们都是在多线程的环境下，都可以在程序的调用处阻塞指定的毫秒数，并返回。</li>
<li>wait()和 sleep()都可以通过 interrupt()方法 打断线程的暂停状态 ，从而使线程立刻抛出 InterruptedException
如果线程 A 希望立即结束线程 B，则可以对线程 B 对应的 Thread 实例调用 interrupt 方法。如果此刻线程 B 正在 wait/sleep/join，则线程 B 会立刻抛出 InterruptedException，在 catch() {} 中直接 return 即可安全地结束线程。
需要注意的是，InterruptedException 是线程自己从内部抛出的，并不是 interrupt()方法抛出的。对某一线程调用 interrupt()时，如果该线程正在执行普通的代码，那么该线程根本就不会抛出 InterruptedException。但是，一旦该线程进入到 wait()/sleep()/join()后，就会立刻抛出 InterruptedException 。</li>
</ol>
<h5 id="small_orange_diamond不同点-：">🔸不同点 ：</h5>
<ol>
<li><p>每个对象都有一个锁来控制同步访问。Synchronized 关键字可以和对象的锁交互，来实现线程的同步 sleep 方法没有释放锁，而 wait 方法释放了锁，使得其他线程可以使用同步控制块或者方法。</p>
</li>
<li><p>wait，notify 和 notifyAll 只能在同步控制方法或者同步控制块里面使用，而 sleep 可以在任何地方使用</p>
</li>
<li><p>sleep 必须捕获异常，而 wait，notify 和 notifyAll 不需要捕获异常</p>
</li>
<li><p>sleep 是线程类（Thread）的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复。调用 sleep 不会释放对象锁。</p>
</li>
<li><p>wait 是 Object 类的方法，对此对象调用 wait 方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出 notify 方法（或 notifyAll）后本线程才进入对象锁定池准备获得对象锁进入运行状态。</p>
</li>
</ol>
<h3 id="java-static-方法中的变量是否存在线程安全问题">Java static 方法中的变量是否存在线程安全问题</h3>
<p>我们在知道, 静态字段(static field)和静态方法(static method)的调用是通过类来调用。静态方法不对特定的实例操作，只能访问静态成员。实例方法可对特定的实例操作，既能访问静态成员，也能访问实例成员。</p>
<p>那么,在多线程中使用静态方法是否有线程安全问题?这要看静态方法是是引起线程安全问题要看在静态方法中是否使用了静态成员。</p>
<p>因为，在多线程中使用同一个静态方法时，每个线程使用各自的实例字段(instance field)的副本，而共享一个静态字段(static field)。所以说，如果该静态方法不去操作一个静态成员，只在方法内部使用实例字段(instance field)，不会引起安全性问题。但是，如果该静态方法操作了一个静态字段，则需要静态方法中采用互斥访问的方式进行安全处理。</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>
{
   <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">(String str)</span>
   {
       <span class="hljs-type">String</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;
       tmp = tmp + str;
       <span class="hljs-keyword">return</span> tmp;
   }
}
</code></pre>
<p>hello 方法会不会有多线程安全问题呢？没有！</p>
<blockquote>
<p>静态方法如果没有使用静态变量，则没有线程安全问题。</p>
<p>为什么呢？因为静态方法内声明的变量，每个线程调用时，都会新创建一份，而不会共用一个存储单元。比如这里的 tmp,每个线程都会创建自己的一份，因此不会有线程安全问题。</p>
<p>注意:静态变量，由于是在类加载时占用一个存储区，每个线程都是共用这个存储区的，所以如果在静态方法里使用了静态变量，这就会有线程安全问题！</p>
</blockquote>
<h3 id="java-多线程参考">Java 多线程参考</h3>
<p><a href="https://www.cnblogs.com/yjd_hycf_space/p/7526608.html">https://www.cnblogs.com/yjd_hycf_space/p/7526608.html</a>
<a href="http://www.importnew.com/21136.html">http://www.importnew.com/21136.html</a>
<a href="http://www.importnew.com/21089.html">http://www.importnew.com/21089.html</a></p>
<h3 id="java-字符串压缩">Java 字符串压缩</h3>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringCompress</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">byte</span>[] compress(String paramString) {
        <span class="hljs-keyword">if</span> (paramString == <span class="hljs-literal">null</span>)
            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;
        <span class="hljs-type">ZipOutputStream</span> <span class="hljs-variable">zipOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;
        <span class="hljs-type">byte</span>[] arrayOfByte;
        <span class="hljs-keyword">try</span> {
            byteArrayOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();
            zipOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipOutputStream</span>(byteArrayOutputStream);
            zipOutputStream.putNextEntry(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipEntry</span>(<span class="hljs-string">&quot;0&quot;</span>));
            zipOutputStream.write(paramString.getBytes());
            zipOutputStream.closeEntry();
            arrayOfByte = byteArrayOutputStream.toByteArray();
        } <span class="hljs-keyword">catch</span> (IOException localIOException5) {
            arrayOfByte = <span class="hljs-literal">null</span>;
        } <span class="hljs-keyword">finally</span> {
            <span class="hljs-keyword">if</span> (zipOutputStream != <span class="hljs-literal">null</span>)
                <span class="hljs-keyword">try</span> {
                    zipOutputStream.close();
                } <span class="hljs-keyword">catch</span> (IOException localIOException6) {
            }
            <span class="hljs-keyword">if</span> (byteArrayOutputStream != <span class="hljs-literal">null</span>)
                <span class="hljs-keyword">try</span> {
                    byteArrayOutputStream.close();
                } <span class="hljs-keyword">catch</span> (IOException localIOException7) {
            }
        }
        <span class="hljs-keyword">return</span> arrayOfByte;
    }

    <span class="hljs-meta">@SuppressWarnings(&quot;unused&quot;)</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> String <span class="hljs-title function_">decompress</span><span class="hljs-params">(<span class="hljs-type">byte</span>[] paramArrayOfByte)</span> {
        <span class="hljs-keyword">if</span> (paramArrayOfByte == <span class="hljs-literal">null</span>)
            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">byteArrayOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;
        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">byteArrayInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;
        <span class="hljs-type">ZipInputStream</span> <span class="hljs-variable">zipInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;
        String str;
        <span class="hljs-keyword">try</span> {
            byteArrayOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();
            byteArrayInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(paramArrayOfByte);
            zipInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ZipInputStream</span>(byteArrayInputStream);
            <span class="hljs-type">ZipEntry</span> <span class="hljs-variable">localZipEntry</span> <span class="hljs-operator">=</span> zipInputStream.getNextEntry();
            <span class="hljs-type">byte</span>[] arrayOfByte = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];
            <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;
            <span class="hljs-keyword">while</span> ((i = zipInputStream.read(arrayOfByte)) != -<span class="hljs-number">1</span>)
                byteArrayOutputStream.write(arrayOfByte, <span class="hljs-number">0</span>, i);
            str = byteArrayOutputStream.toString();
        } <span class="hljs-keyword">catch</span> (IOException localIOException7) {
            str = <span class="hljs-literal">null</span>;
        } <span class="hljs-keyword">finally</span> {
            <span class="hljs-keyword">if</span> (zipInputStream != <span class="hljs-literal">null</span>)
                <span class="hljs-keyword">try</span> {
                    zipInputStream.close();
                } <span class="hljs-keyword">catch</span> (IOException localIOException8) {
                }
            <span class="hljs-keyword">if</span> (byteArrayInputStream != <span class="hljs-literal">null</span>)
                <span class="hljs-keyword">try</span> {
                    byteArrayInputStream.close();
                } <span class="hljs-keyword">catch</span> (IOException localIOException9) {
                }
            <span class="hljs-keyword">if</span> (byteArrayOutputStream != <span class="hljs-literal">null</span>)
                <span class="hljs-keyword">try</span> {
                    byteArrayOutputStream.close();
                } <span class="hljs-keyword">catch</span> (IOException localIOException10) {
            }
        }
        <span class="hljs-keyword">return</span> str;
    }
}
</code></pre>
<p>参考：<a href="https://blog.csdn.net/isea533/article/details/8199848">https://blog.csdn.net/isea533/article/details/8199848</a></p>
<h3 id="servlet-和-cgi-的区别">Servlet 和 CGI 的区别</h3>
<h4 id="cgi-common-gateway-interface-公共网关接口">CGI (Common Gateway Interface 公共网关接口)</h4>
<ol>
<li><p>定义：</p>
<p>CGI(Common Gateway Interface 公共网关接口)是 HTTP 服务器与你的或其它机器上的程序进行“交谈”的一种工具，其程序须运行在网络服务器上。</p>
</li>
<li><p>功能：</p>
<p>绝大多数的 CGI 程序被用来解释处理杰自表单的输入信息，并在服 务器产生相应的处理，或将相应的信息反馈给浏览器。CGI 程序使 网页具有交互功能。</p>
</li>
<li><p>运行环境：</p>
<p>CGI 程序在 UNIX 操作系统上 CERN 或 NCSA 格式的服务器上运行。 在其它操作系统（如：windows NT 及 windows95 等）的服务器上 也广泛地使用 CGI 程序，同时它也适用于各种类型机器。</p>
</li>
<li><p>CGI 处理步骤：</p>
<ol>
<li>通过 Internet 把用户请求送到服务器。</li>
<li>服务器接收用户请求并交给 CGI 程序处理。</li>
<li>CGI 程序把处理结果传送给服务器。</li>
<li>服务器把结果送回到用户。</li>
</ol>
</li>
</ol>
<h4 id="servlet">Servlet</h4>
<p>Servlet 是一种服务器端的 Java 应用程序，具有独立于平台和协议的特性,可以生成动态的 Web 页面。 它担当客户请求（Web 浏览器或其他 HTTP 客户程序）与服务器响应（HTTP 服务器上的数据库或应用程序）的中间层。 Servlet 是位于 Web 服务器内部的服务器端的 Java 应用程序，与传统的从命令行启动的 Java 应用程序不同，Servlet 由 Web 服务器进行加载，该 Web 服务器必须包含支持 Servlet 的 Java 虚拟机。</p>
<p>工作模式：客户端发送请求至服务器；服务器启动并调用 Servlet，Servlet 根据客户端请求生成响应内容并将其传给服务器；服务器将响应返回客户端。</p>
<h4 id="java-servlet-与-cgi-的比较">Java Servlet 与 CGI 的比较</h4>
<p>与传统的 CGI 和许多其他类似 CGI 的技术相比，Java Servlet 具有更高的效率，更容易使用，功能更强大，具有更好的可移植性，更节省投资。在未来的技术发展过程中，Servlet 有可能彻底取代 CGI。</p>
<p>在传统的 CGI 中，每个请求都要启动一个新的进程，如果 CGI 程序本身的执行时间较短，启动进程所需要的开销很可能反而超过实际执行时间。而在 Servlet 中，每个请求由一个轻量级的 Java 线程处理(而不是重量级的操作系统进程)。</p>
<p>在传统 CGI 中，如果有 N 个并发的对同一 CGI 程序的请求，则该 CGI 程序的代码在内存中重复装载了 N 次；而对于 Servlet，处理请求的是 N 个线程，只需要一份 Servlet 类代码。在性能优化方面，Servlet 也比 CGI 有着更多的选择。
　　* 方便 　
　　 Servlet 提供了大量的实用工具例程，例如自动地解析和解码 HTML 表单数据、读取和设置 HTTP 头、处理 Cookie、跟踪会话状态等。
　　* 功能强大
　　在 Servlet 中，许多使用传统 CGI 程序很难完成的任务都可以轻松地完成。例如，Servlet 能够直接和 Web 服务器交互，而普通的 CGI 程序不能。Servlet 还能够在各个程序之间共享数据，使得数据库连接池之类的功能很容易实现。
　　* 可移植性好
Servlet 用 Java 编写，Servlet API 具有完善的标准。因此，为 IPlanet Enterprise Server 写的 Servlet 无需任何实质上的改动即可移植到 Apache、Microsoft IIS 或者 WebStar。几乎所有的主流服务器都直接或通过插件支持 Servlet。</p>
<p>转自：<a href="https://www.cnblogs.com/MuyouSome/p/3938203.html">https://www.cnblogs.com/MuyouSome/p/3938203.html</a></p>
<h3 id="java-hashmap-好文">Java HashMap 好文</h3>
<p>源码解析：</p>
<ul>
<li><a href="https://www.cnblogs.com/xrq730/p/5030920.html">https://www.cnblogs.com/xrq730/p/5030920.html</a></li>
<li><a href="http://www.importnew.com/20386.html">http://www.importnew.com/20386.html</a></li>
</ul>
<p>面试总结：</p>
<ul>
<li><a href="https://www.cnblogs.com/lchzls/p/6714474.html">https://www.cnblogs.com/lchzls/p/6714474.html</a></li>
<li><a href="https://www.toutiao.com/a6317489506677309698/?tt_from=mobile_qq&utm_campaign=client_share&app=news_article&utm_source=mobile_qq&iid=5056005857&utm_medium=toutiao_ios">https://www.toutiao.com/a6317489506677309698/?tt_from=mobile_qq&amp;utm_campaign=client_share&amp;app=news_article&amp;utm_source=mobile_qq&amp;iid=5056005857&amp;utm_medium=toutiao_ios</a></li>
<li><a href="https://blog.csdn.net/u012512634/article/details/72735183">https://blog.csdn.net/u012512634/article/details/72735183</a></li>
</ul>
<h3 id="fastjson-转时间">fastjson 转时间</h3>
<p>在 field 上加注解，比如转 ISO 格式的时间</p>
<pre><code class="hljs language-java"><span class="hljs-meta">@JSONField(format=&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss&#x27;Z&#x27;&quot;)</span>
</code></pre>
<h3 id="sunmiscunsafe">sun.misc.Unsafe</h3>
<ul>
<li><a href="http://mishadoff.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/">http://mishadoff.com/blog/java-magic-part-4-sun-dot-misc-dot-unsafe/</a></li>
<li><a href="https://blog.csdn.net/anLA_/article/details/78631026">https://blog.csdn.net/anLA_/article/details/78631026</a></li>
<li><a href="https://blog.csdn.net/lvbaolin123/article/details/80527598">https://blog.csdn.net/lvbaolin123/article/details/80527598</a></li>
</ul>
<h3 id="java-string-pool">Java String pool</h3>
<p><a href="https://stackoverflow.com/questions/4918399/where-does-javas-string-constant-pool-live-the-heap-or-the-stack">Where does Java&#39;s String constant pool live, the heap or the stack?</a></p>
<h3 id="java-静态内部类和非静态内部类">Java 静态内部类和非静态内部类</h3>
<p><a href="https://softwareengineering.stackexchange.com/questions/238782/why-prefer-non-static-inner-classes-over-static-ones">Why prefer non-static inner classes over static ones?</a></p>
<blockquote>
<p>Joshua Bloch in Item 22 of his book &quot;Effective Java Second Edition&quot; tells when to use which kind of nested class and why. There are some quotes below:</p>
<p>One common use of a static member class is as a public helper class, useful only in conjunction with its outer class. For example, consider an enum describing the operations supported by a calculator. The Operation enum should be a public static member class of the <code>Calculator</code> class. Clients of <code>Calculator</code> could then refer to operations using names like <code>Calculator.Operation.PLUS</code> and <code>Calculator.Operation.MINUS</code>.</p>
<p>One common use of a nonstatic member class is to define an <em>Adapter</em> that allows an instance of the outer class to be viewed as an instance of some unrelated class. For example, implementations of the <code>Map</code> interface typically use nonstatic member classes to implement their <em>collection views</em>, which are returned by <code>Map</code>’s <code>keySet</code>, <code>entrySet</code>, and <code>values</code> methods. Similarly, implementations of the collection interfaces, such as <code>Set</code> and <code>List</code>, typically use nonstatic member classes to implement their iterators:</p>
<pre><code>// Typical use of a nonstatic member class
public class MySet&lt;E&gt; extends AbstractSet&lt;E&gt; {
    ... // Bulk of the class omitted

    public Iterator&lt;E&gt; iterator() {
        return new MyIterator();
    }

    private class MyIterator implements Iterator&lt;E&gt; {
        ...
    }
}
</code></pre>
<p>If you declare a member class that does not require access to an enclosing instance, <em>always</em> put the <code>static</code> modifier in its declaration, making it a static rather than a nonstatic member class.</p>
</blockquote>
<h3 id="bridge-method">bridge method</h3>
<ul>
<li><a href="https://cn.aliyun.com/jiaocheng/330720.html">https://cn.aliyun.com/jiaocheng/330720.html</a></li>
<li><a href="https://docs.oracle.com/javase/tutorial/java/generics/bridgeMethods.html#bridgeMethods">https://docs.oracle.com/javase/tutorial/java/generics/bridgeMethods.html#bridgeMethods</a></li>
<li><a href="https://www.cnblogs.com/zsg88/p/7588929.html">https://www.cnblogs.com/zsg88/p/7588929.html</a></li>
<li><a href="https://www.jianshu.com/p/250030ea9b28">https://www.jianshu.com/p/250030ea9b28</a></li>
</ul>
<h3 id="finally--return">finally &amp; return</h3>
<p>参考：<a href="https://www.cnblogs.com/lanxuezaipiao/p/3440471.html">https://www.cnblogs.com/lanxuezaipiao/p/3440471.html</a></p>
<blockquote>
<ol>
<li><p><strong>finally 块的语句在 try 或 catch 中的 return 语句执行之后返回之前执行</strong></p>
</li>
<li><p><strong>finally 里的修改语句可能影响也可能不影响 try 或 catch 中 return 已经确定的返回值</strong></p>
</li>
<li><p><strong>若 finally 里也有 return 语句则覆盖 try 或 catch 中的 return 语句直接返回</strong></p>
</li>
</ol>
</blockquote>
<h3 id="动态代理">动态代理</h3>
<h4 id="jdk-动态代理">JDK 动态代理</h4>
<p>机制：<strong>通过接口</strong></p>
<p>流程：</p>
<ol>
<li>被代理类<code>Subject</code>需要实现包含相应需要做代理处理的方法，这些方法来自被代理类实现的<strong>若干接口</strong>；</li>
<li>实例化一个<code>Subject</code>对象；</li>
<li>实现 JDK 的<code>InvocationHandler</code>接口，接口中进行业务代理，这部分逻辑在<code>invoke</code>方法中；</li>
<li>实例化一个<code>InvocationHandler</code>对象，并绑定<code>Subject</code>实例；</li>
<li>使用 JDK 的<code>Proxy.newProxyInstance(loader, interfaces, handler); </code>方法生成代理类；<ol>
<li>JDK 动态代理库通过<strong>若干接口</strong>方法名称锁定被代理类的相关方法；</li>
<li>JDK 动态代理库通过字节码技术动态生成代理类，代理类重新定义了这些接口方法，并且调用<code>handler</code>对象；</li>
</ol>
</li>
</ol>
<pre><code class="hljs language-java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">AEvent</span>{<span class="hljs-keyword">void</span> <span class="hljs-title function_">ActionA</span><span class="hljs-params">()</span>;}
<span class="hljs-comment">//被代理类</span>
<span class="hljs-keyword">interface</span> <span class="hljs-title class_">BEvent</span>{<span class="hljs-keyword">void</span> <span class="hljs-title function_">ActionB</span><span class="hljs-params">()</span>;}
<span class="hljs-keyword">class</span> <span class="hljs-title class_">Me</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AEvent</span> ,BEvent{
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ActionA</span><span class="hljs-params">()</span> {System.out.println(<span class="hljs-string">&quot;事件A&quot;</span>);}
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ActionB</span><span class="hljs-params">()</span> {System.out.println(<span class="hljs-string">&quot;事件B&quot;</span>);}
}
<span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInvocationHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">InvocationHandler</span>{
    Object object;<span class="hljs-comment">//实现了接口的被代理类的对象的声明 也是我们要代理的真实对象</span>
    <span class="hljs-comment">//给被代理类的对象实例化</span>
    <span class="hljs-comment">//返回代理类对象</span>
    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">blind</span><span class="hljs-params">(Object o)</span>{
        object = o;
        <span class="hljs-keyword">return</span> Proxy.newProxyInstance(object.getClass().getClassLoader(),
                o.getClass().getInterfaces(),<span class="hljs-built_in">this</span>);
    }
    <span class="hljs-comment">//当通过代理类对象发起对被重写的方法的调用时 都会转化为对如下的invoke方法的调用</span>
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> Object <span class="hljs-title function_">invoke</span><span class="hljs-params">(Object proxy, Method method, Object[] args)</span> <span class="hljs-keyword">throws</span> Throwable {
        <span class="hljs-keyword">return</span> method.invoke(object, args);
    }
}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test_Dynamic_Proxy</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-comment">//创建一个实现了InvocationHandler方法的接口的类的对象</span>
        <span class="hljs-type">MyInvocationHandler</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyInvocationHandler</span>();
        <span class="hljs-comment">//被代理类对象</span>
        <span class="hljs-type">Me</span> <span class="hljs-variable">me</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Me</span>();
        <span class="hljs-comment">//调用blind()方法 动态返回一个同样实现了real所在类实现的接口的Subject代理类的对象</span>
        <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> handler.blind(me);
        <span class="hljs-comment">//subject就是代理类的对象</span>
        <span class="hljs-type">AEvent</span> <span class="hljs-variable">aEvent</span> <span class="hljs-operator">=</span> (AEvent) object;
        aEvent.ActionA();
        System.out.println(<span class="hljs-string">&quot;----------------&quot;</span>);
        <span class="hljs-type">BEvent</span> <span class="hljs-variable">bEvent</span> <span class="hljs-operator">=</span> (BEvent) handler.blind(me);
        bEvent.ActionB();
    }
}
</code></pre>
<h4 id="cglib-动态代理">Cglib 动态代理</h4>
<p>机制：<strong>通过继承实现</strong></p>
<p>流程：</p>
<ol>
<li>实现<code>MethodInterceptor </code>，在里面的<code>intercept</code>方法进行代理业务；</li>
<li>获取 Cglib 的<code>Enhancer</code>对象，传入<code>SupperClass</code>，指定代理类，和<code>Callback</code>也就是一个<code>MethodInterceptor </code>实例；</li>
</ol>
<h3 id="泛型约束和局限性">泛型约束和局限性</h3>
<ol>
<li><p>不能把基本数据类型当成类型参数，要用包装类；</p>
</li>
<li><p>运行时类型检查只适用于原视类型：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">if</span> (a instanceOf AClass&lt;BClass&gt;) <span class="hljs-comment">// 错误</span>
<span class="hljs-keyword">if</span> (a instanceOf AClass) <span class="hljs-comment">// 只能检查原始类型</span>
</code></pre>
</li>
<li><p>不能<code>new</code>参数化类型数组：</p>
<pre><code class="hljs language-java">AClass&lt;BClass&gt;[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AClass</span>&lt;BClass&gt;[<span class="hljs-number">10</span>];	<span class="hljs-comment">// 错误</span>
</code></pre>
<p>非要用数组结构，那就使用<code>ArrayList&lt;AClass&lt;BClass&gt;&gt; al = new ArrayList&lt;&gt;();</code></p>
</li>
<li><p>但是给参数个数可变的方法传递泛型类型实例：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">addAll</span><span class="hljs-params">(Collection&lt;T&gt; coll, T... ts)</span>
</code></pre>
<p>但是编译器会发出警告，你可以使用<code>@SuppressWarnings(&quot;unchecked&quot;)</code>来压制它</p>
</li>
<li><p>不能在静态域或者方法中引用类型变量；</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AClass</span>&lt;T&gt; {
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> T instance;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> T <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) <span class="hljs-comment">//...</span>
        <span class="hljs-keyword">return</span> instance;
    }
}
</code></pre>
</li>
</ol>
<h3 id="classloader">ClassLoader</h3>
<p><a href="https://www.baeldung.com/java-classloaders">https://www.baeldung.com/java-classloaders</a></p>
<h4 id="bootstrap-class-loader"><strong>Bootstrap Class Loader</strong></h4>
<p>Java classes are loaded by an instance of <em>java.lang.ClassLoader</em>. However, class loaders are classes themselves. Hence, the question is, who loads the <em>java.lang.ClassLoader</em> itself*?*</p>
<p>This is where the bootstrap or primordial class loader comes into the picture.</p>
<p>It&#39;s mainly responsible for loading JDK internal classes, typically <em>rt.jar</em> and other core libraries located in <em>$JAVA_HOME/jre/lib directory</em>. Additionally, <strong>Bootstrap class loader serves as a parent of all the other *ClassLoader* instances</strong>.</p>
<p><strong>This bootstrap class loader is part of the core JVM and is written in native code</strong> as pointed out in the above example. Different platforms might have different implementations of this particular class loader.</p>
<h4 id="extension-class-loader"><strong>Extension Class Loader</strong></h4>
<p>The <strong>extension class loader is a child of the bootstrap class loader and takes care of loading the extensions of the standard core Java classes</strong> so that it&#39;s available to all applications running on the platform.</p>
<p>Extension class loader loads from the JDK extensions directory, usually <em>$JAVA_HOME/lib/ext</em> directory or any other directory mentioned in the <em>java.ext.dirs</em> system property.</p>
<h4 id="system-class-loader"><strong>System Class Loader</strong></h4>
<p>The system or application class loader, on the other hand, takes care of loading all the application level classes into the JVM. <strong>It loads files found in the classpath environment variable, *-classpath* or *-cp* command line option</strong>. Also, it&#39;s a child of Extensions classloader.</p>
<h3 id="pojo--javabean">POJO &amp; JavaBean</h3>
<p>When we talk about a POJO(<strong>“Plain Old Java Object”</strong>), what we&#39;re describing is a straightforward type with no references to any particular frameworks. <strong>A POJO has no naming convention</strong> for our properties and methods.</p>
<p><strong>A JavaBean is still a POJO but introduces a strict set of rules around how we implement it:</strong></p>
<ul>
<li>Access levels – our properties are private and we expose getters and setters</li>
<li>Method names – our getters and setters follow the <em>getX</em> and <em>setX</em> convention (in the case of a boolean, <em>isX</em> can be used for a getter)</li>
<li>Default Constructor – a no-argument constructor must be present so an instance can be created without providing arguments, for example during deserialization</li>
<li>Serializable – implementing the <em>Serializable</em> interface allows us to store the state</li>
</ul>
<h3 id="finall-关键字">Finall 关键字</h3>
<ul>
<li>修饰类：该类不能被继承；</li>
<li>修饰方法：该方法不能被重载；</li>
<li>修饰变量：该变量引用不能改变，并且必须在声明时就赋值，并且在编译时就已经赋值完毕，先于本类实例的构造方法；</li>
<li>修饰方法参数：该参数在改方法内不能被改变引用；</li>
</ul>
<h3 id="异常小记">异常小记</h3>
<h4 id="分类">分类</h4>
<pre><code class="hljs language-graph">              ---&gt; Throwable &lt;---
              |    (checked)    |
              |                 |
              |                 |
       --&gt; Exception          Error
       |   (checked)       (unchecked)
       |
RuntimeException
  (unchecked)
</code></pre>
<ol>
<li>受检异常</li>
<li>非受检异常/运行时异常</li>
<li>错误</li>
</ol>
<h4 id="受检异常">受检异常</h4>
<p>Java 编译器要求我们必须处理的异常，要么显式地往上层调用方法抛出该异常，要么必须原地处理（<code>try-catch</code>）</p>
<ul>
<li><em>IOException</em> – this exception is typically a way to say that <strong>something on the network, filesystem, or database failed</strong>.</li>
<li><em>ServletException</em></li>
<li><em>ClassNotFoundException</em> - occurs when an application tries to <strong>load a class through its fully-qualified name</strong> and <strong>can not find its definition on the classpath</strong></li>
</ul>
<h4 id="运行时异常">运行时异常</h4>
<p>运行时异常即不要求我们处理的异常，因此我们可以不用显式地使用<code>try-catch</code>语句去处理他们</p>
<ul>
<li><em>ArrayIndexOutOfBoundsException</em> – this exception means that we tried to <strong>access a non-existent array index</strong>, like when trying to get index 5 from an array of length 3.</li>
<li><em>ClassCastException –</em> this exception means that we tried to perform <strong>an illegal cast</strong>, like trying to convert a <em>String</em> into a <em>List</em>. We can usually avoid it by performing defensive <em>instanceof</em> checks before casting.</li>
<li><em>IllegalArgumentException</em> – this exception is a generic way for us to say that one of the provided method or constructor <strong>parameters is invalid</strong>.</li>
<li><em>IllegalStateException</em> – This exception is a generic way for us to say that <strong>our internal state</strong>, like the state of our object, <strong>is invalid</strong>.</li>
<li><em>NullPointerException</em> – This exception means we tried to <strong>reference a <em>null</em> object</strong>. We can usually avoid it by either performing defensive <em>null</em> checks or by using <em>Optional.</em></li>
<li><em>NumberFormatException</em> – This exception means that we tried to <strong>convert a <em>String</em> into a number, but the string contained illegal</strong> characters, like trying to convert “5f3” into a number.</li>
</ul>
<h4 id="错误">错误</h4>
<p>错误都是非常严重的情况，比如内存泄露、栈溢出等等，而且我们也不会显示地在某个地方处理这些错误，而是希望它们一直往上抛出</p>
<ul>
<li><em>StackOverflowError –</em> this exception means that the <strong>stack trace is too big</strong>. This can sometimes happen in massive applications; however, it usually means that we have some <strong>infinite recursion</strong> happening in our code.</li>
<li><em>NoClassDefFoundError</em> – this exception means that a class failed to load either due to <strong>not being on the classpath</strong> or <strong>due to failure in static initialization</strong>.</li>
<li><em>OutOfMemoryError</em> – this exception means that the JVM doesn&#39;t have any more memory available to allocate for more objects. Sometimes, this is due to a <strong>memory leak</strong>.</li>
</ul>
<h4 id="classnotfoundexception--noclassdeffounderror">ClassNotFoundException &amp; NoClassDefFoundError</h4>
<p>前者是受检异常，就是在编译时就没找到这个类，压根就没有加载进 classpath 里；</p>
<p>后者是错误，是编译时没问题，运行时由于类在初始化静态内容的时候出错了，所以这个类也压根没被加载进运行时的 classpath 里；</p>
<h3 id="metaspace--method-area--perm-gen">Metaspace &amp; Method Area &amp; Perm Gen</h3>
<p>理一理这三个之间的关系：</p>
<ul>
<li>在 JDK 7 之前，方法区是<code>Perm Gen</code>的一部分；</li>
<li>在 JDK 7 之前<code>interned-string</code>也就是平常说的字符串常量池是存储在<code>Perm Gen</code>的，由于<code>Perm Gen</code>的空间很小，所以经常被爆，于是 Java 7 先把字符串常量池移到了方法区；</li>
<li>从 JDK7 开始<code>Perm Gen</code>的移除工作，贮存在<code>Perm Gen</code>的一部分数据已经转移到了 Java Heap 或者是 Native Heap。但<code>Perm Gen</code>仍然存在于 JDK7，并没有完全的移除：符号引用(Symbols)转移到了 native heap；字面量(interned strings)转移到了 java heap；类的静态变量(class statics)转移到了 java heap；剥离到 heap 区的内容形成了<code>Method Area</code>；</li>
<li><code>Perm Gen</code>在 JDK8 中被完全的移除了；</li>
<li>在 JDK 8 后，classe metadata 被存储在叫做<code>Metaspace</code>的 native memory，在系统的直接内存中；</li>
<li>在 JDK 8 后，<code>Method Area</code>承担的数据内容可参考：<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5.4">https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html#jvms-2.5.4</a></li>
</ul>
