<h2 id="网络">网络</h2>
<h3 id="tcpudp">TCP/UDP</h3>
<h4 id="udp-特点">UDP 特点</h4>
<blockquote>
<ul>
<li>UDP 是<strong>无连接</strong>的</li>
<li>UDP 使用尽最大努力交付，但是<strong>不保证可靠交付</strong></li>
<li>UDP 是<strong>面向报文</strong>的</li>
<li>UDP 没有拥塞控制</li>
<li>UDP 支持<strong>一对一，一对多，多对一，多对多</strong>的交互通讯</li>
<li>UDP 首部的开销小</li>
</ul>
</blockquote>
<h4 id="tcp-特点">TCP 特点</h4>
<blockquote>
<ul>
<li>TCP 是<strong>面向连接</strong>的</li>
<li>每一条 TCP 连接只能由两个端点，<strong>每一条 TCP 连接只能是点对点的</strong></li>
<li>TCP 提供<strong>可靠</strong>交付的服务</li>
<li>TCP 提供<strong>全双工通信</strong></li>
<li>面向字节流</li>
</ul>
</blockquote>
<h3 id="tcp-可靠传输保证机制">TCP 可靠传输保证机制</h3>
<p><strong>停止等待协议：</strong> 每发完一个分组就停止发送，直到收到上一个分组的确认信息。若超过规定时间没有接收到确认信息，边认为是分组丢失，开始重传。</p>
<p><strong>连续 ARQ 协议：</strong> 发送方采用滑动窗口的形式，处于滑动窗口的分组可以直接发送出去；接收方一般采用累积确认的方式，也就是说接受方不必对接收到的每一个分组都进行确认，而是对按序到达的最后一个分组进行确认，而发送方每接收到一个确认，窗口就向前滑动一定距离。</p>
<p><strong>流量控制：</strong>协调发送方和接收方的收发速率，利用滑动窗口来协调，使用探测报文来探测当前应该发送的速率，采用<a href="http://baike.sogou.com/v10500918.htm?fromTitle=Nagle%E7%AE%97%E6%B3%95">Nagle 算法</a></p>
<p><strong>拥塞控制：</strong>
当网络中某一资源的需求超出了该资源所能提供的可用部分，这时网络的性能就要开始变坏，这种情况就叫做拥塞。而拥塞控制就是为了减少或者避免拥塞对网络性能的影响而做出的一种控制手段。</p>
<p><strong>拥塞控制思路：</strong>发送方维持一个叫做<strong>拥塞窗口</strong>的状态变量，拥塞窗口的大小取决于网络的拥塞程度，并且在动态的变化。发送方让自己的发送窗口等于拥塞窗口，如果在考虑接收方的接收能力，一般发送窗口还要小于拥塞窗口。</p>
<p><strong>慢开始：</strong>当主机开始发送数据的时候，由小到大的增大发送窗口，也就是由小到大的增大拥塞窗口。接收方接收到一个报文之后就回传一个确认报文，发送方每接收到一个确认报文，就将拥塞窗口加 1，这样每经过一个传输轮次之后，拥塞窗口就增大一倍。</p>
<p><strong>拥塞避免：</strong>思路是让拥塞窗口缓慢的增大，即每经过一个往返时间 RTT 就把发送方的拥塞窗口加 1，而不是加倍，这样拥塞窗口就是线性缓慢增加，比慢开始的增长速率缓慢的多。</p>
<p><strong>慢开始门限：</strong>为了防止拥塞窗口增长过大引起网络拥塞，还需要设置一个慢开始门限</p>
<ul>
<li>拥塞窗口&lt;慢开始门限时，使用慢开始算法</li>
<li>拥塞窗口&gt;慢开始门限时，使用拥塞避免算法</li>
<li>拥塞窗口=慢开始门限时，两种算法都可以</li>
</ul>
<p><strong>快重传：</strong>要求收到方每收到一个时序的报文段之后就立即发出重复确认，而不要等到自己发送数据时才进行捎带确认。而发送方只要一连收到三个重复确认就应当立即重传对方尚未接受到的报文，而不必等待为报文设置的重传计时器到期。</p>
<p><strong>快回复：</strong>与快重传配合使用，当发送方连续收到三个重复确认的时候，就执行“乘法减小”算法，将慢开始门限减半。将拥塞窗口设置为慢开始门限减半之后的值，并开始指向拥塞避免算法。</p>
<h3 id="tcpip-握手">TCP/IP 握手</h3>
<h4 id="建立连接">建立连接</h4>
<ol>
<li><p><strong>客户端</strong>请求建立连接：SYN=1，seq=x；</p>
</li>
<li><p><strong>服务器</strong>对<strong>客户端</strong>的请求进行响应：SYN=1，ACK=1，seq=y，ack=x+1；</p>
</li>
<li><p><strong>客户端</strong>对<strong>服务器端</strong>的响应信息进行回应：ACK=1，seq=x+1，ack=y+1；</p>
</li>
</ol>
<h4 id="断开连接">断开连接</h4>
<ol>
<li><strong>客户端</strong>请求断开连接： FIN=1，seq = u；</li>
<li><strong>服务端</strong>对<strong>客户端</strong>的请求应答：ACK=1，seq=v，ack=u+1；</li>
<li><strong>服务端</strong>请求断开连接：FIN=1，ACK=1，seq=w，ack=u+1；</li>
<li><strong>客户端</strong>对<strong>服务端</strong>的请求应答：ACK=1，seq=u+1，ack=w+1；</li>
</ol>
<p><img src="../../../img/v2-8720bd64871a5452df583fdab8207d64_1440w.webp" alt="img"></p>
<h3 id="对于游戏来说-怎么选择-tcp-和-udp">对于游戏来说 怎么选择 TCP 和 UDP?</h3>
<ul>
<li><p>如果是由客户端间歇性的发起无状态的查询，并且偶尔发生延迟是可以容忍，那么使用 HTTP/HTTPS 吧。</p>
</li>
<li><p>如果客户端和服务器都可以独立发包，但是偶尔发生延迟可以容忍（比如：在线的纸牌游戏，许多 MMO 类的游戏），那么使用 TCP 长连接吧。</p>
</li>
<li><p>如果客户端和服务器都可以独立发包，而且无法忍受延迟（比如：大多数的多人动作类游戏，一些 MMO 类游戏），那么使用 UDP 吧。</p>
</li>
</ul>
<p>转自: <a href="http://blog.jobbole.com/64638/">http://blog.jobbole.com/64638/</a></p>
<h3 id="osi-七层网络模型">OSI 七层网络模型</h3>
<p><img src="../../../img/20200626085325.webp" alt></p>
<h3 id="tcpip-四层模型">TCP/IP 四层模型</h3>
<p><img src="../../../img/20200625181452.webp" alt></p>
<p><img src="../../../img/20200625181433.webp" alt></p>
<h3 id="arp-与-rarp">ARP 与 RARP</h3>
<h4 id="arp：拿-ip-地址问-mac-地址">ARP：拿 IP 地址问 MAC 地址</h4>
<ol>
<li>首先，每个主机都会在自己的 ARP 缓冲区中<strong>建立一个 ARP 列表</strong>，以表示 IP 地址和 MAC 地址之间的对应关系；</li>
<li>当<strong>源主机要发送数据</strong>时，首先检查 ARP 列表中是否有对应 IP 地址的目的主机的 MAC 地址：<ol>
<li>如果有，则直接发送数据；</li>
<li>如果没有，就向本网段的所有主机发送 ARP 数据包，该数据包中有：源主机 IP 地址、源主机 MAC 地址、目的主机 IP 地址；</li>
</ol>
</li>
<li>当<strong>本网络的所有主机</strong>收到该 ARP 数据包时，首先<strong>检查数据包中的 IP 地址是否是自己的 IP 地址</strong>，如果不是，则忽略该数据包，如果是，则首先从数据包中取出源主机的 IP 和 MAC 地址写入到 ARP 列表中，如果已经存在，则覆盖，然后将自己的 MAC 地址写入 ARP 响应包中，告诉源主机自己是它想要找的 MAC 地址；</li>
<li>源主机收到 ARP 响应包后，<strong>将目的主机的 IP 和 MAC 写入 ARP 列表</strong>，并利用此信息发送数据。如果源主机一直都没有收到 ARP 响应数据包，表示 ARP 查询失败；</li>
</ol>
<h4 id="rarp：拿-mac-地址问-ip-地址">RARP：拿 MAC 地址问 IP 地址</h4>
<p>作用是完成<strong>硬件地址到 IP 地址的映射</strong>。</p>
<p>在网络中配置一台 RARP 服务器，里面保存着 IP 地址和 MAC 地址的映射关系，当无盘工作站启动后：</p>
<ol>
<li>首先，封装一个 RARP 数据包，里面有其 MAC 地址；</li>
<li>其次，广播到网络中去；</li>
<li>最后，当服务器收到请求包后，就查找对应的 MAC 地址的 IP 地址装入响应报文中发回给请求者。因为需要广播请求报文，因此 RARP 只能用于具有广播能力的网络；</li>
</ol>
<h3 id="dns">DNS</h3>
<p>DNS( Domain Name System)是“域名系统”的英文缩写，是一种组织成域层次结构的计算机和网络服务命名系统，它用于 TCP/IP 网络，它所提供的服务是用来将主机名和域名转换为 IP 地址的工作。</p>
<p>关于 DNS 的获取流程：
DNS 是应用层协议，事实上他是为其他应用层协议工作的，包括不限于 HTTP 和 SMTP 以及 FTP，用于将用户提供的主机名解析为 ip 地址。
具体过程如下：</p>
<ol>
<li>用户主机上运行着 DNS 的客户端，就是我们的 PC 机或者手机客户端运行着 DNS 客户端了</li>
<li>浏览器将接收到的 url 中抽取出域名字段，就是访问的主机名，比如并将这个主机名传送给 DNS 应用的客户端</li>
<li>DNS 客户机端向 DNS 服务器端发送一份查询报文，报文中包含着要访问的主机名字段（中间包括一些列缓存查询以及分布式 DNS 集群的工作）</li>
<li>该 DNS 客户机最终会收到一份回答报文，其中包含有该主机名对应的 IP 地址</li>
<li>一旦该浏览器收到来自 DNS 的 IP 地址，就可以向该 IP 地址定位的 HTTP 服务器发起 TCP 连接；</li>
</ol>
