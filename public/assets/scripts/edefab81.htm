<h2 id="概念与思考">概念与思考</h2>
<h3 id="关于-ci">关于 CI</h3>
<h4 id="small_blue_diamond示意图">🔹示意图</h4>
<p><img src="https://user-images.githubusercontent.com/23525754/39740876-26eba2da-52ca-11e8-9403-74ce6686407e.png" alt="image"></p>
<blockquote>
<p>文章 <a href="https://www.mindtheproduct.com/2016/02/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us/">The Product Managers’ Guide to Continuous Delivery and DevOps</a></p>
<p>对「持续集成（Continuous Integration）」、「持续交付（Continuous Delivery）」和「持续部署（Continuous Deployment）」这三个概念有很详细的解释。</p>
</blockquote>
<h3 id="对-iocdi-的理解">对 IoC/DI 的理解</h3>
<h4 id="small_blue_diamondiocinverse-of-control">🔹Ioc—Inverse of Control</h4>
<p><strong>即“控制反转”，不是什么技术，而是一种设计思想</strong>。在 Java 开发中，<strong>Ioc 意味着将你设计好的对象交给容器控制，而不是传统的在你的对象内部直接控制。</strong></p>
<p>深入分析一下：</p>
<ul>
<li>谁控制谁，控制什么：传统 Java SE 程序设计，我们直接在对象内部通过 new 进行创建对象，是程序主动去创建依赖对象；而 IoC 是有专门一个容器来创建这些对象，即由 Ioc 容器来控制对 象的创建；<strong>谁控制谁？当然是 IoC 容器控制了对象；控制什么？那就是主要控制了外部资源获取（不只是对象包括比如文件等）。</strong></li>
<li>为何是反转，哪些方面反转了：有反转就有正转，传统应用程序是由我们自己在对象中主动控制去直接获取依赖对象，也就是正转；而反转则是由容器来帮忙创建及注入依赖对象；为何是反转？<strong>因为由容器帮我们查找及注入依赖对象，对象只是被动的接受依赖对象，所以是反转；哪些方面反转了？依赖对象的获取被反转了。</strong></li>
</ul>
<p><strong>举例说明</strong></p>
<p>“常规的是，我们程序员<strong>手动 new</strong>来给程序的<strong>Service 对象</strong>提供所<strong>依赖的 DAO 对象</strong>，而现在是程序通过 IoC 容器自己提供<strong>DAO 对象</strong>给<strong>Service 对象</strong>。”</p>
<h4 id="small_blue_diamonddidependency-injection">🔹DI—Dependency Injection</h4>
<p><strong>即“依赖注入”</strong>：<strong>组件之间依赖关系</strong>由容器在运行期决定，形象的说，即<strong>由容器动态的将某个依赖关系注入到组件之中</strong>。</p>
<p><strong>依赖注入的目的并非为软件系统带来更多功能，而是为了提升组件重用的频率，并为系统搭建一个灵活、可扩展的平台。</strong>通过依赖注入机制，我们只需要通过简单的配置，而无需任何代码就可指定目标需要的资源，完成自身的业务逻辑，而不需要关心具体的资源来自何处，由谁实现。</p>
<p>深入分析一下：</p>
<ul>
<li>谁依赖于谁：当然是<strong>应用程序依赖于 IoC 容器</strong>；</li>
<li>为什么需要依赖：<strong>应用程序需要 IoC 容器来提供对象需要的外部资源</strong>；</li>
<li>谁注入谁：很明显是<strong>IoC 容器注入应用程序某个对象，应用程序依赖的对象</strong>；</li>
<li>注入了什么：就是<strong>注入某个对象所需要的外部资源（包括对象、资源、常量数据）</strong>。</li>
</ul>
<p><strong>举例说明</strong></p>
<p>“<strong>Service 对象</strong>依赖于<strong>DAO 对象</strong>，IoC 容器通过<strong>注解和反射机制</strong>来<strong>注入（Injected）</strong>用户在配置文件中配置好的 DAO 对象到<strong>Service 对象</strong>的对应属性中。”</p>
<h4 id="small_blue_diamond两者关系">🔹两者关系</h4>
<p><strong>IoC 和 DI</strong>由什么<strong>关系</strong>呢？其实它们<strong>是同一个概念的不同角度描述</strong>，由于控制反转概念比较含糊（可能只是理解为容器控制对象这一个层面，很难让人想到谁来维护对象关系），所以 2004 年大师级人物 Martin Fowler 又给出了一个新的名字：“依赖注入”，相对 IoC 而言，“依赖注入”明确描述了“被注入对象依赖 IoC 容器配置依赖对象”。</p>
<p>我的理解是：<strong>IoC 说的是一种程序过程，而 DI 说的是注入的动作，DI 是 IoC 的一种实现</strong>。</p>
<p><a href="https://blog.csdn.net/qq_22654611/article/details/52606960">参考</a></p>
<h3 id="oop-三大特性">OOP 三大特性</h3>
<h4 id="small_blue_diamond封装优点：">🔹封装优点：</h4>
<ul>
<li><strong>安全：</strong> 只能通过规定的方法访问数据</li>
<li><strong>隐藏细节：</strong> 隐藏类的实例细节，方便修改和实现</li>
</ul>
<h4 id="small_blue_diamond继承优点：">🔹继承优点：</h4>
<ul>
<li><strong>代码复用</strong></li>
</ul>
<h4 id="small_blue_diamond多态主要表现：">🔹多态主要表现：</h4>
<ul>
<li><p><strong>引用多态</strong></p>
<ul>
<li>父类的引用可以指向本类的对象；</li>
<li>父类的引用可以指向子类的对象；</li>
</ul>
</li>
<li><p><strong>方法多态</strong></p>
<p>根据上述创建的两个对象：本类对象和子类对象，同样都是父类的引用，当我们指向不同的对象时，它们调用的方法也是多态的。</p>
<ul>
<li><p>创建本类对象时，调用的方法为本类方法；</p>
</li>
<li><p>创建子类对象时，调用的方法为子类重写的方法或者继承的方法；</p>
</li>
</ul>
<p><strong>注意： 继承是多态的基础。</strong></p>
</li>
</ul>
<p>参考: <a href="https://www.cnblogs.com/hysum/p/7100874.html#_label1">https://www.cnblogs.com/hysum/p/7100874.html#_label1</a></p>
<h3 id="文件头魔数-判断文件类型">文件头魔数 判断文件类型</h3>
<p><a href="https://blog.csdn.net/t894690230/article/details/51242110?winzoom=1">https://blog.csdn.net/t894690230/article/details/51242110?winzoom=1</a></p>
<p>但是这种方法比较复杂，在帖子里有前辈提到，文本类型是无法通过魔术去判断的，比如 html 和 txt
而且同一种文件类型不同的程序去创建，魔数也可能不一样，比如 ZIP 可能有多种不同的魔数</p>
<p>魔数列表参考如下：
<a href="https://www.garykessler.net/library/file_sigs.html">https://www.garykessler.net/library/file_sigs.html</a></p>
<h3 id="微服务集群分布式">微服务/集群/分布式</h3>
<h4 id="small_blue_diamond微服务好文">🔹微服务好文</h4>
<p><a href="https://blog.csdn.net/ityouknow/article/details/80490926">学习 springboot 看这一篇就够了</a> 看它的微服务启蒙 3 篇</p>
<h4 id="small_blue_diamond集群和分布式">🔹集群和分布式</h4>
<blockquote>
<p>小饭店原来只有一个厨师，切菜洗菜备料炒菜全干。后来客人多了，厨房一个厨师忙不过来，又请了个厨师，两个厨师都能炒一样的菜，这两个厨师的关系是集群。为了让厨师专心炒菜，把菜做到极致，又请了个配菜师负责切菜，备菜，备料，厨师和配菜师的关系是分布式，一个配菜师也忙不过来了，又请了个配菜师，两个配菜师关系是集群</p>
<p>作者：张鹏飞
链接：<a href="https://www.zhihu.com/question/20004877/answer/112124929">https://www.zhihu.com/question/20004877/answer/112124929</a>
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<p>参考：
<a href="https://blog.csdn.net/cutesource/article/details/5811914">https://blog.csdn.net/cutesource/article/details/5811914</a>
<a href="https://www.zhihu.com/question/20004877/answer/61025046">https://www.zhihu.com/question/20004877/answer/61025046</a>
<a href="https://www.cnblogs.com/aspirant/p/5697807.html">https://www.cnblogs.com/aspirant/p/5697807.html</a></p>
<h3 id="什么是为什么要-tracing？opentracing-的入门铺垫">什么是/为什么要 Tracing？Opentracing 的入门铺垫</h3>
<p><img src="https://user-images.githubusercontent.com/23525754/46987507-0e617d80-d127-11e8-86b6-ba3a9ccd8f36.png" alt="image"></p>
<p>好文：<a href="https://yq.aliyun.com/articles/514488">https://yq.aliyun.com/articles/514488</a></p>
<h4 id="small_blue_diamond这个-gitbook-爆炸推【opentracing-的中文文档翻译】：">🔹这个 Gitbook 爆炸推【Opentracing 的中文文档翻译】：</h4>
<p><a href="https://wu-sheng.gitbooks.io/opentracing-io/content/">https://wu-sheng.gitbooks.io/opentracing-io/content/</a></p>
<p>Tutorials:</p>
<p><a href="https://github.com/yurishkuro/opentracing-tutorial/tree/master/java">https://github.com/yurishkuro/opentracing-tutorial/tree/master/java</a></p>
<h3 id="什么是为什么要-devops？">什么是/为什么要 DevOps？</h3>
<p><img src="https://user-images.githubusercontent.com/23525754/46988029-4b2e7400-d129-11e8-943c-81b28b5ac5ec.png" alt="image"></p>
<p><a href="https://www.cnblogs.com/liufei1983/p/7152013.html">https://www.cnblogs.com/liufei1983/p/7152013.html</a></p>
<h3 id="k8s">k8s</h3>
<h4 id="small_blue_diamond好文">🔹好文</h4>
<ul>
<li>概念：<a href="http://www.dockone.io/article/8341?cmd=redirect&arubalp=12345">http://www.dockone.io/article/8341?cmd=redirect&amp;arubalp=12345</a></li>
<li>简要介绍：<a href="http://www.dockone.io/article/8328">http://www.dockone.io/article/8328</a></li>
<li>10 分钟核心概念了解：<a href="http://www.dockone.io/article/932">http://www.dockone.io/article/932</a></li>
</ul>
<h4 id="small_blue_diamond中文文档">🔹中文文档</h4>
<ul>
<li>设计理念（概念介绍）：<a href="http://docs.kubernetes.org.cn/249.html">http://docs.kubernetes.org.cn/249.html</a></li>
</ul>
<h4 id="small_blue_diamond配置">🔹配置</h4>
<ul>
<li>k8s 的 Dashboard：<a href="http://blog.51cto.com/ylw6006/2113542">http://blog.51cto.com/ylw6006/2113542</a></li>
<li>yaml：<ul>
<li>sample: <a href="https://www.mirantis.com/blog/introduction-to-yaml-creating-a-kubernetes-deployment/">https://www.mirantis.com/blog/introduction-to-yaml-creating-a-kubernetes-deployment/</a></li>
<li>offical reference: <a href="https://kubernetes.io/docs/reference/">https://kubernetes.io/docs/reference/</a> see the api</li>
</ul>
</li>
</ul>
<h3 id="docker">docker</h3>
<p>介绍与入门：<a href="http://www.dockone.io/article/8350">http://www.dockone.io/article/8350</a></p>
<h3 id="grpc--protobuf--swagger">gRPC &amp; protobuf &amp; Swagger</h3>
<ul>
<li><a href="https://segmentfault.com/a/1190000013513469">Grpc+Grpc Gateway 实践三 Swagger 了解一下</a></li>
<li><a href="https://www.cnblogs.com/luoxn28/p/5303517.html">google protobuf 安装与使用</a></li>
<li><a href="https://github.com/protocolbuffers/protobuf">protobuf</a></li>
<li><a href="https://www.cnblogs.com/andyidea/archive/2017/03/10/6529900.html">grpc-gateway：grpc 转换为 http 协议对外提供服务</a></li>
</ul>
<h3 id="graphql-一种用于-api-的查询语言">GraphQL 一种用于 API 的查询语言</h3>
<blockquote>
<p>GraphQL 既是一种用于 API 的查询语言也是一个满足你数据查询的运行时。</p>
<p>GraphQL 对你的 API 中的数据提供了一套易于理解的完整描述，使得客户端能够准确地获得它需要的数据，而且没有任何冗余，也让 API 更容易地随着时间推移而演进，还能用于构建强大的开发者工具。</p>
</blockquote>
<p>中文网 : <a href="http://graphql.cn/">官网</a>
引子 : <a href="https://segmentfault.com/a/1190000006132986">segmentfault</a>
知乎专栏 : <a href="https://zhuanlan.zhihu.com/p/28077095">面向未来的 API —— GitHub GraphQL API 使用介绍</a></p>
<blockquote>
<p>2018 年 11 月 16 日 10 点 04 分
要构建一个 graphql 需要的成本太大了 还不如 restful 来的快</p>
</blockquote>
<h3 id="protobuf">Protobuf</h3>
<h4 id="what-are-protocol-buffers">What are protocol buffers?</h4>
<p>Protocol buffers are a flexible, efficient, automated mechanism for serializing structured data – think XML, but smaller, faster, and simpler. You define how you want your data to be structured once, then you can use special generated source code to easily write and read your structured data to and from a variety of data streams and using a variety of languages. You can even update your data structure without breaking deployed programs that are compiled against the &quot;old&quot; format.</p>
<h4 id="why-not-just-use-xml">Why not just use XML?</h4>
<p>Protocol buffers have many advantages over XML for serializing structured data. Protocol buffers:</p>
<ul>
<li>are simpler</li>
<li>are 3 to 10 times smaller</li>
<li>are 20 to 100 times faster</li>
<li>are less ambiguous</li>
<li>generate data access classes that are easier to use programmatically</li>
</ul>
<h4 id="references">References</h4>
<ul>
<li><a href="https://www.jianshu.com/p/a24c88c0526a">深入 Protobuf</a></li>
<li><a href="https://www.jianshu.com/p/b4b51b99e218">ProtoBuf 试用与 JSON 的比较</a></li>
<li><a href="https://mp.weixin.qq.com/s/yiAhQddl42eGSnM6XpkNZw">在 python 中使用 ProtocolBuffers</a></li>
<li><a href="https://developers.google.com/protocol-buffers/docs/overview">Google Docs</a></li>
</ul>
<h3 id="clu--tui">CLU &amp; TUI?</h3>
<h4 id="command-line-utilities">Command-line Utilities</h4>
<ul>
<li>Accept arguments at invocation, execute, and terminate</li>
<li>Examples:<code>ls</code>,<code>grep</code>,<code>git</code></li>
<li>Python&#39;s built-in argparse module or Click have this well covered</li>
</ul>
<h4 id="text-user-interfaces">Text User Interfaces</h4>
<ul>
<li>Full-screen applications more like a GUI but in a terminal</li>
<li>Examples: <code>vim</code>, <code>emacs</code>, <code>top</code></li>
<li>Python&#39;s built-in curses module can be used for this.</li>
</ul>
<h4 id="python-tui-libaraies">Python TUI Libaraies</h4>
<ul>
<li><a href="https://python-prompt-toolkit.readthedocs.io/en/stable/index.html">Python Prompt ToolKit</a></li>
<li><a href="https://github.com/peterbrittain/asciimatics">asciimatics</a></li>
<li><a href="http://urwid.org/index.html#">Urwid</a></li>
</ul>
<h3 id="github">Github</h3>
<h4 id="small_blue_diamond科学获取资源">🔹科学获取资源</h4>
<ol>
<li><p>在 <a href="https://site.ip138.com/raw.Githubusercontent.com/">https://site.ip138.com/raw.Githubusercontent.com/</a> 输入 raw.githubusercontent.com 查询 IP 地址</p>
</li>
<li><p>修改 hosts Ubuntu，CentOS 及 macOS 直接在终端输入</p>
<pre><code class="hljs language-bash">sudo vi /etc/hosts
</code></pre>
</li>
<li><p>或者直接使用项目<a href="https://github.com/521xueweihan/GitHub520">GitHub520</a>，去修改 hosts 文件</p>
</li>
</ol>
<h3 id="yarn">Yarn</h3>
<h4 id="设置镜像">设置镜像</h4>
<pre><code class="hljs language-bash">yarn config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org
<span class="hljs-comment"># electron</span>
yarn config <span class="hljs-built_in">set</span> electron_mirror https://npm.taobao.org/mirrors/electron/
</code></pre>
<h4 id="让-nodejs-能够引用-yarn-的全局模块">让 nodejs 能够引用 yarn 的全局模块</h4>
<pre><code class="hljs language-bash"><span class="hljs-comment"># 在有效的rc文件下</span>
<span class="hljs-built_in">export</span> PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$HOME</span>/.yarn/bin:<span class="hljs-variable">$HOME</span>/.config/yarn/global/node_modules/.bin:<span class="hljs-variable">$PATH</span>&quot;</span>
<span class="hljs-built_in">export</span> NODE_PATH=<span class="hljs-string">&quot;<span class="hljs-variable">$PATH</span>&quot;</span>
</code></pre>
<h3 id="项目已知风险的状态与管理">项目已知风险的状态与管理</h3>
<h4 id="对于小项目小团队">对于小项目/小团队</h4>
<p>涉及人员：</p>
<ul>
<li>风险处理方——一线处理风险；</li>
<li>风险处理监测方——对处理方的处理过程、结果进行监测；</li>
<li>风险负责方——确立风险立项，负责风险管理与处理流程；</li>
</ul>
<p>风险状态（3 种）：</p>
<ol>
<li><p><strong>任务期内，有 X%概率发生，还未发生</strong>——由风险责任方：立项，规划方案，划配资源；</p>
</li>
<li><p><strong>任务期内，发生</strong>——由风险责任方：启用方案，资源；</p>
</li>
<li><p><strong>任务期后，仍未发生，标记过期</strong>——由风险处理方独自并同风险处理监测方：双方验收，使失效；</p>
<p>失效意味着该风险已经被认为消除或者不会发生，即使客观上该风险再次发生了，也将被认为是新的而未被立项的风险；</p>
</li>
</ol>
<h4 id="对于大项目大团队">对于大项目/大团队</h4>
<p>涉及人员：</p>
<ul>
<li>原风险处理方——一线处理风险；</li>
<li>原风险处理监测方——对处理方的处理过程、结果进行监测；</li>
<li>原风险负责方——确立风险立项，负责风险管理与处理流程；</li>
<li>时任风险处理方——同；</li>
<li>时任风险处理监测方——同；</li>
<li>时任风险负责方——同；</li>
</ul>
<p>风险状态（4 种）：</p>
<ol>
<li><p><strong>任务期内，有 X%概率发生，还未发生</strong>——由原风险责任方：立项，规划方案，划配资源；</p>
</li>
<li><p><strong>任务期内，发生</strong>——由原风险责任方：启用方案，资源；</p>
</li>
<li><p><strong>任务期后，仍未发生，标记进入例检期</strong>——由原风险处理方并同原风险处理监测方：双方检测，使进入例检；</p>
<ul>
<li>原风险处理方同原风险处理监测方需规划例检方案；</li>
<li>例检意味着该风险即使在风险立项的任务期结束后，也需要例行检查，检查周期可以大于一个任务期，例如 3 个任务期检查一次；检查周期可以不固定，可以是不定时周期检查，也可以临时抽检；</li>
<li>例检无视人员变动，原人员离职就分配新人员时任；</li>
</ul>
</li>
<li><p><strong>例检期内，N 次例检后仍未发生，标记消除</strong>——由时任风险处理方，时任风险处理监测方，时任风险责任方：三方共同验收，使失效；</p>
</li>
</ol>
<h3 id="search-engine-bias">Search Engine Bias</h3>
<details>
<summary>Van Couvering, Elizabeth. Search engine bias: the structuration of traffic on the World-Wide Web. Diss. The London School of Economics and Political Science (LSE), 2010.</summary>

<ul>
<li>1.3.1 :The Mechanisms of search engine bias</li>
<li></li>
</ul>
</details>
