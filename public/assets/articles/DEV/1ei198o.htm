<h3 id="docker-concepts">Docker concepts</h3>
<p>Docker is a platform for developers and sysadmins to <strong>develop, deploy, and run</strong> applications with containers. The use of Linux containers to deploy applications is called <em>containerization</em>. Containers are not new, but their use for easily deploying applications is.</p>
<p>Containerization is increasingly popular because containers are:</p>
<ul>
<li>Flexible: Even the most complex applications can be containerized.</li>
<li>Lightweight: Containers leverage and share the host kernel.</li>
<li>Interchangeable: You can deploy updates and upgrades on-the-fly.</li>
<li>Portable: You can build locally, deploy to the cloud, and run anywhere.</li>
<li>Scalable: You can increase and automatically distribute container replicas.</li>
<li>Stackable: You can stack services vertically and on-the-fly.</li>
</ul>
<blockquote>
<p>优点巨多，这也是为什么开发中 vm 被 container 技术迅速淘汰的原因</p>
</blockquote>
<p><img src="https://docs.docker.com/get-started/images/laurel-docker-containers.png" alt="Containers are portable"></p>
<h4 id="images-and-containers">Images and containers</h4>
<p>A container is launched by running an image. An <strong>image</strong> is an executable package that includes everything needed to run an application--the code, a runtime, libraries, environment variables, and configuration files.</p>
<p>A <strong>container</strong> is a runtime instance of an image--what the image becomes in memory when executed (that is, an image with state, or a user process). You can see a list of your running containers with the command, <code>docker ps</code>, just as you would in Linux.</p>
<blockquote>
<p>这里表明了 image 是一个只读的镜像，包含了运行 app 所需要的代码/运行库/运行环变量/配置文件</p>
<p>而 container 是一个运行时的 image 实例</p>
</blockquote>
<h4 id="containers-and-virtual-machines">Containers and virtual machines</h4>
<p>A <strong>container</strong> runs <em>natively</em> on Linux and shares the kernel of the host machine with other containers. It runs a discrete process, taking no more memory than any other executable, making it lightweight.</p>
<p>By contrast, a <strong>virtual machine</strong> (VM) runs a full-blown “guest” operating system with <em>virtual</em> access to host resources through a hypervisor. In general, VMs provide an environment with more resources than most applications need.</p>
<p><img src="../../img/20181116135034.png" alt=""></p>
<h3 id="setup">Setup</h3>
<h4 id="installation">Installation</h4>
<p>For more information, please go to the official site :</p>
<p><a href="https://docs.docker.com/install/linux/docker-ce/centos/#upgrade-docker-ce-1">https://docs.docker.com/install/linux/docker-ce/centos/#upgrade-docker-ce-1</a></p>
<ol>
<li><p>update yum packages</p>
<pre><code class="hljs language-bash">$ sudo yum update
</code></pre>
</li>
<li><p>perform the docker installation script(<a href="http://www.docker.org.cn/book/install/install-docker-on-rhel-29.html" title="docker installation reference">reference here</a>)</p>
<pre><code class="hljs language-bash">$ curl -sSL https://get.docker.com/ | sh
</code></pre>
<p>if it&#39;s error because the fallowing problem:</p>
<pre><code class="hljs language-ba">Error: Package: docker-ce-17.06.0.ce-1.el7.centos.x86_64 (docker-ce-stable)
           Requires: container-selinux &gt;= 2.9
 You could try using --skip-broken to work around the problem
 You could try running: rpm -Va --nofiles --nodigest
</code></pre>
<p>seems like you should update or get your container-selinux before your installation move forward, here is the solution reference on <a href="https://stackoverflow.com/questions/45272827/docker-ce-on-rhel-requires-container-selinux-2-9" title="requires container-selinux">requires container-selinux</a>:</p>
<blockquote>
<p>Installing the Selinux from the Centos repository worked for me:</p>
<ol>
<li>Go to <a href="http://mirror.centos.org/centos/7/extras/x86_64/Packages/">http://mirror.centos.org/centos/7/extras/x86_64/Packages/</a></li>
<li>Find the latest version for container-selinux i.e. container-selinux-2.21-1.el7.noarch.rpm</li>
<li>Run the following command on your terminal: $ sudo yum install -y <a href="http://mirror.centos.org/centos/7/extras/x86_64/Packages/**Add_current_container-selinux_package_here">http://mirror.centos.org/centos/7/extras/x86_64/Packages/**Add_current_container-selinux_package_here</a>**</li>
<li>The command should looks like the following $ sudo yum install -y <a href="http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.21-1.el7.noarch.rpm">http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.21-1.el7.noarch.rpm</a>
Note: the container version is constantly being updated, that is why you should look for the latest version in the Centos&#39; repository</li>
</ol>
</blockquote>
<p>for now it may look like:</p>
<pre><code class="hljs language-bash">$ sudo yum install -y http://mirror.centos.org/centos/7/extras/x86_64/Packages/container-selinux-2.55-1.el7.noarch.rpm
</code></pre>
<p>then you could try the installation script again and it should be done</p>
</li>
<li><p>start docker service</p>
<pre><code class="hljs language-bash">$ sudo service docker start
[sudo] password <span class="hljs-keyword">for</span> xxx:
Redirecting to /bin/systemctl start docker.service
</code></pre>
</li>
</ol>
<h4 id="verify-your-installation">Verify your installation</h4>
<pre><code class="hljs language-bash">$ sudo docker run hello-world
Unable to find image <span class="hljs-string">&#x27;hello-world:latest&#x27;</span> locally
latest: Pulling from library/hello-world
d1725b59e92d: Pull complete
Digest: sha256:0add3ace90ecb4adbf7777e9aacf18357296e799f81cabc9fde470971e499788
Status: Downloaded newer image <span class="hljs-keyword">for</span> hello-world:latest

Hello from Docker!
This message shows that your installation appears to be working correctly.

To generate this message, Docker took the following steps:
1. The Docker client contacted the Docker daemon.
2. The Docker daemon pulled the <span class="hljs-string">&quot;hello-world&quot;</span> image from the Docker Hub.
   (amd64)
3. The Docker daemon created a new container from that image <span class="hljs-built_in">which</span> runs the
   executable that produces the output you are currently reading.
4. The Docker daemon streamed that output to the Docker client, <span class="hljs-built_in">which</span> sent it
   to your terminal.

To try something more ambitious, you can run an Ubuntu container with:
$ docker run -it ubuntu bash

Share images, automate workflows, and more with a free Docker ID:
https://hub.docker.com/

For more examples and ideas, visit:
https://docs.docker.com/get-started/
</code></pre>
<h3 id="optional-linux-post-installation-steps">Optional Linux post-installation steps</h3>
<h4 id="manage-docker-as-a-non-root-user">Manage Docker as a non-root user</h4>
<p>You might trouble with permissions problems like:</p>
<pre><code class="hljs language-bash">$ docker ps
Got permission denied <span class="hljs-keyword">while</span> trying to connect to the Docker daemon socket at unix:///var/run/docker.sock: Get http://%2Fvar%2Frun%2Fdocker.sock/v1.39/containers/json: dial unix /var/run/docker.sock: connect: permission denied
</code></pre>
<p>It&#39;s because the Docker daemon binds to a Unix socket instead of a TCP port. By default that Unix socket is owned by the user <code>root</code> and other users can only access it using <code>sudo</code>. The Docker daemon always runs as the <code>root</code> user.</p>
<p>If you don’t want to preface the <code>docker</code> command with <code>sudo</code>, create a Unix group called <code>docker</code> and add users to it. When the Docker daemon starts, it creates a Unix socket accessible by members of the <code>docker</code> group.</p>
<ol>
<li><p>create the docker group:</p>
<pre><code class="hljs language-bash">$ sudo groupadd docker
</code></pre>
</li>
<li><p>add your user to the <code>docker</code> group</p>
<pre><code class="hljs language-bash">$ sudo usermod -aG docker <span class="hljs-variable">$USER</span>
</code></pre>
<p>or</p>
<pre><code class="hljs language-bash">$ sudo gpasswd -a <span class="hljs-variable">$USER</span> docker
</code></pre>
</li>
<li><p>update the group</p>
<pre><code class="hljs language-bash">$ newgrp docker
</code></pre>
</li>
</ol>
<p>Then you can run docker commands without sudo.</p>
<h4 id="configure-docker-to-start-on-boot">Configure Docker to start on boot</h4>
<p>Most current Linux distributions (RHEL, CentOS, Fedora, Ubuntu 16.04 and higher) use <a href="https://docs.docker.com/install/linux/linux-postinstall/#systemd"><code>systemd</code></a> to manage which services start when the system boots. Ubuntu 14.10 and below use <a href="https://docs.docker.com/install/linux/linux-postinstall/#upstart"><code>upstart</code></a>.</p>
<h5 id="systemd"><code>systemd</code></h5>
<pre><code>$ sudo systemctl enable docker
</code></pre>
<p>To disable this behavior, use <code>disable</code> instead.</p>
<pre><code>$ sudo systemctl disable docker
</code></pre>
<p>If you need to add an HTTP Proxy, set a different directory or partition for the Docker runtime files, or make other customizations, see<a href="https://docs.docker.com/engine/admin/systemd/">customize your systemd Docker daemon options</a>.</p>
<h4 id="more-options">More options</h4>
<p>Please refer to <a href="https://docs.docker.com/install/linux/linux-postinstall" title="docker post installation options">post-install</a></p>
<p>Congrats and enjoy your journey of docker~</p>
<hr>
