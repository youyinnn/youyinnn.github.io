<h3 id="introduction">Introduction</h3>
<p>上节我们介绍了 Java 并发编程的一个新的阶段——Java 并发包中的<code>Lock</code>接口以及<code>AbstractQueuedSynchronizer</code>的配合使用</p>
<p>并且尝试实现了一个简单的独占锁 Mutex，借此我们了解到，并发编程还能如此灵活与优雅</p>
<p>本节还是属于第七坎，因为第七坎应该是关于整个 Java 并发包的基础内容，所以会分成多节进行</p>
<p>在上节的最后我们运用<code>Lock</code>和<code>AbstractQueuedSynchronizer</code>去简单地实现了一个独占锁，本节我们紧接着要分析一下<code>AbstractQueuedSynchronizer</code>的部分方法的实现原理，了解同步器为什么能如此强大</p>
<p>本篇参考书本上，试图分析<strong>独占式同步状态的获取和释放/共享式同步状态的获取和释放</strong>的源码</p>
<p>观察源码之前我们需要回顾一下：</p>
<blockquote>
<p>对于同步器中的方法，我们需要实现的是：<strong>对同步状态的“尝试”获取/释放</strong>的一类方法</p>
<ul>
<li>try 方法只返回是否获取同步状态成功（独占式）/获取到了 1 个以上的同步状态（共享式）</li>
<li>这类方法被模板方法第一次尝试调用：<ul>
<li>若成功，则线程获取到锁；</li>
<li>若失败，则模板方法继续管理同步队列</li>
</ul>
</li>
<li>在线程成为结点加入到同步队列的过程中，结点在自旋的时候也在不断地 try 获取同步状态</li>
</ul>
</blockquote>
<h3 id="synchronizedqueue">SynchronizedQueue</h3>
<p>同步器依赖内部实现的一个同步队列来完成<strong>同步状态的管理</strong>，当前线程获取同步状态失败的时候，同步器会将当前线程以及等待状态等信息构造成一个结点（Node）并将其加入到同步队列的尾部，<strong>同时阻塞当前线程</strong></p>
<h4 id="node">Node</h4>
<p>同步队列中的结点用来保存同步状态获取失败的线程引用、等待状态以及前驱和后继结点，我们来看一下 Node 结构，值得一提的是，Node 的结构是 CLH 队列锁的一个变体，CLH 队列锁是一种自旋锁，有兴趣可以参考<a href="./vywf17.html">这里</a>来学习一下，推荐学习 Node 之前看一下 CLH 队列锁</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span> {
    <span class="hljs-comment">/** Marker to indicate a node is waiting in shared mode */</span>
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">SHARED</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();
    <span class="hljs-comment">/** Marker to indicate a node is waiting in exclusive mode */</span>
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">EXCLUSIVE</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;

    <span class="hljs-comment">// 在同步队列中等待的线程如果超时或者被中断了，则会转变为此状态，且以后不会再发生状态变化</span>
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CANCELLED</span> <span class="hljs-operator">=</span>  <span class="hljs-number">1</span>;
    <span class="hljs-comment">// 后继结点如果处于等待（park）状态，而当前结点的线程如果释放了同步状态或者被取消了的话，就会唤醒(unpark)后继结点</span>
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SIGNAL</span>    <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;
    <span class="hljs-comment">// 结点在等待队列中，结点等带在Condition上，如果其他线程调用了Condition的signal()方法，则该结点会从等待队列中转移到同步队列中，加入到同步状态的获取中</span>
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">CONDITION</span> <span class="hljs-operator">=</span> -<span class="hljs-number">2</span>;
    <span class="hljs-comment">// 表示下一次共享式同步状态的获取会被无条件地传播下去</span>
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">PROPAGATE</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3</span>;
    <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> waitStatus;

    <span class="hljs-comment">// 前驱节点</span>
    <span class="hljs-keyword">volatile</span> Node prev;
    <span class="hljs-comment">// 后继结点</span>
    <span class="hljs-keyword">volatile</span> Node next;
    <span class="hljs-comment">// 要获取同步状态的线程</span>
    <span class="hljs-keyword">volatile</span> Thread thread;
    <span class="hljs-comment">// 等待队列中的后继结点</span>
    Node nextWaiter;

    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isShared</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> nextWaiter == SHARED;
    }
    <span class="hljs-keyword">final</span> Node <span class="hljs-title function_">predecessor</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> NullPointerException {
        <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> prev;
        <span class="hljs-keyword">if</span> (p == <span class="hljs-literal">null</span>)
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NullPointerException</span>();
        <span class="hljs-keyword">else</span>
            <span class="hljs-keyword">return</span> p;
    }
    Node() {    <span class="hljs-comment">// Used to establish initial head or SHARED marker</span>
    }
    Node(Thread thread, Node mode) {     <span class="hljs-comment">// Used by addWaiter</span>
        <span class="hljs-built_in">this</span>.nextWaiter = mode;
        <span class="hljs-built_in">this</span>.thread = thread;
    }
    Node(Thread thread, <span class="hljs-type">int</span> waitStatus) { <span class="hljs-comment">// Used by Condition</span>
        <span class="hljs-built_in">this</span>.waitStatus = waitStatus;
        <span class="hljs-built_in">this</span>.thread = thread;
    }
}
</code></pre>
<p>结点是构成<strong>同步队列</strong>和<strong>等待队列</strong>的基础，等待队列的概念会在后面几节介绍，它和 Condition 对象有关；</p>
<p>我们看到最前面两个变量都是 Node 类型的，分别代表结点的共享式和独占式两种模式，然后就是结点的状态以及前驱后继结点的引用，关于<code>nextWaiter</code>的意义我们后面说到等待队列的时候再细说</p>
<p>同步器拥有头节点 head 和尾结点 tail，没有成功获取到同步状态的线程会称为结点加入到队列的尾部，其结构大概是：</p>
<pre class="nhi">
         AQS          setHead(Node update)
    ┏-----------┓       /
    |           |     ┏---&gt;Node         Node         Node         Node
    |  { head }-|-----┛  | prev |&lt;----|-prev |&lt;----|-prev |&lt;----|-prev |
    |           |        | next-|----&gt;| next-|----&gt;| next-|----&gt;| next |
    |  { tail }-|--------------------------------------------------^
    |           |        \
    ┗-----------┛      compareAndSetTail(Node expect, Node update)
</pre>

<p>把<strong>当前结点（刚获取同步状态失败的线程构成的结点）</strong>放到尾部的过程必须用 CAS 的方式去做，<strong>保证每个并发加入的结点最终能够串行成队列</strong>，它需要传入当前线程“认为”的尾结点和当前结点</p>
<p>同步队列也遵从 FIFO，首节点是获取同步状态成功的结点，首节点线程在释放同步状态的时候，会唤醒后继结点，而后继结点会在<strong>获取同步状态成功的那一刻</strong>将自己设置为首节点，因为设置首节点的前提是<strong>获取到同步状态</strong>，<u>由于只有一个线程获取到同步状态</u>，所以设置首节点的方法并不需要使用 CAS 来保证，它只需要将首节点设置成原首节点的后继，并且断开原首节点的 next 引用即可</p>
<blockquote>
<p>这里就有一个疑问，如果是共享式锁的情况下，同步状态回被多个线程获取到，那又该怎么办呢？</p>
<p>疑问解决：看完后面的 shared 节点的获取过程之后，我们就能知道，在同步状态足够的情况下，unpark 是会传递下去的</p>
</blockquote>
<h4 id="exclusive-acquire--release">Exclusive acquire &amp; release</h4>
<h5 id="acquire">acquire</h5>
<p>通过调用同步器的<code>acquire(int arg)</code>方法可以获取到同步状态</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquire</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> {
    <span class="hljs-keyword">if</span> (!tryAcquire(arg) &amp;&amp;
        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
        selfInterrupt();
}
</code></pre>
<p>在获取同步状态的时候，首先调用<code>tryAcquire(int arg)</code>方法，这个方法是我们需要实现的模板方法之一，我们需要保证该方法能够线程安全地获取同步状态，方法尝试获取一次同步状态，如果获取成功，则<code>acquire(int arg)</code>方法结束；如果获取失败，首先调用<code>addWaiter</code>方法将获取同步状态失败的线程构建为 Node 结点（Node.EXCLUSIVE），然后加入到队尾，最后调用<code>acquireQueued</code>方法，让这个结点以“死循环”的方式不断获取同步状态<strong>（实际上也就循环了 2 次，之后就会被 park 掉）</strong>，若是获取失败，则阻塞结点持有的线程，等到结点被前驱结点唤醒的时候（一般是前驱结点已经获取到同步状态并且打算释放了的时候），或者阻塞线程被中断了的时候</p>
<h5 id="addwaiter">addWaiter</h5>
<pre><code class="hljs language-java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">addWaiter</span><span class="hljs-params">(Node mode)</span> {
    <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(Thread.currentThread(), mode);
    <span class="hljs-comment">// Try the fast path of enq; backup to full enq on failure</span>
    <span class="hljs-type">Node</span> <span class="hljs-variable">pred</span> <span class="hljs-operator">=</span> tail;
    <span class="hljs-keyword">if</span> (pred != <span class="hljs-literal">null</span>) {
        node.prev = pred;
        <span class="hljs-keyword">if</span> (compareAndSetTail(pred, node)) {
            pred.next = node;
            <span class="hljs-keyword">return</span> node;
        }
    }
    enq(node);
    <span class="hljs-keyword">return</span> node;
}
</code></pre>
<p>如注释所说，Node.EXCLUSIVE 是独占式结点，Node.SHARED 是共享式结点，我其实很好奇为什么要用 Node 对象来表示结点的 mode，也许在后面的共享式结点中有什么出彩的操作吧，后面再继续研究这个事</p>
<p>注释里也说了，line：10-17 行只是一个<code>enq</code>的快速版本，如果是第一个要 addWaiter 的结点，这时候 AQS 里面的 tail 是为 null 的；如果 AQS 里已经有 tail 了，那么可以在这段代码中尝试快速设置 tail（如注释中所说）</p>
<h5 id="enq">enq</h5>
<pre><code class="hljs language-java"><span class="hljs-keyword">private</span> Node <span class="hljs-title function_">enq</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node)</span> {
    <span class="hljs-keyword">for</span> (;;) {
        <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail;
        <span class="hljs-keyword">if</span> (t == <span class="hljs-literal">null</span>) { <span class="hljs-comment">// Must initialize</span>
            <span class="hljs-keyword">if</span> (compareAndSetHead(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>()))
                tail = head;
        } <span class="hljs-keyword">else</span> {
            node.prev = t;
            <span class="hljs-keyword">if</span> (compareAndSetTail(t, node)) {
                t.next = node;
                <span class="hljs-keyword">return</span> t;
            }
        }
    }
}
</code></pre>
<p>这 part 其实是很欢乐的，死循环里的逻辑：如果 tail 为 null，证明这是第一个获取同步状态失败的线程的结点，所以 call<code>compareAndSetHead</code>，刚开始肯定是走的这里，将一个新的结点设置为 AQS 的 head</p>
<blockquote>
<p>这个方法实际上是调用<code>sun.misc.Unsafe</code>类的<code>compareAndSwapObject</code>方法，更底层的就没必要深入了，作用是以 CAS 的方式设置 AQS 的 head 字段，同理<code>compareAndSetTail</code>也一样</p>
<p><code>compareAndSwapXXX</code>系列的方法都是一样的参数列表，比如 SwapInt 就是<code>(Object o, long offset, int expected, int update)</code>，Object o 就是要设置字段的对象，offset 值同样可以通过<code>Unsafe</code>类的<code>objectFieldOffset</code>方法获取，比如在 AQS 中就是：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Unsafe</span> <span class="hljs-variable">unsafe</span> <span class="hljs-operator">=</span> Unsafe.getUnsafe();
<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> headOffset;
<span class="hljs-comment">// ...</span>
<span class="hljs-keyword">static</span> {
    <span class="hljs-keyword">try</span> {
        headOffset = unsafe.objectFieldOffset
            (AbstractQueuedSynchronizer.class.getDeclaredField(<span class="hljs-string">&quot;head&quot;</span>));
        <span class="hljs-comment">// ...</span>
    } <span class="hljs-keyword">catch</span> (Exception ex) { <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(ex); }
}
</code></pre>
<p>然后<code>compareAndSetHead</code>方法里面：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">compareAndSetHead</span><span class="hljs-params">(Node update)</span> {
    <span class="hljs-keyword">return</span> unsafe.compareAndSwapObject(<span class="hljs-built_in">this</span>, headOffset, <span class="hljs-literal">null</span>, update);
}
</code></pre>
<p>值得一提的是，unsafe 对象并不能直接使用，它是单例模式，只有有限的几个类加载器才能够获取它的单例</p>
</blockquote>
<p>anyway，在设置好 head 了之后，又把 tail 设置为 head，也就是说这个时候 tail 和 head 都是这个<code>new Node()</code>，这还没结束，还得再循环一遍，这一遍来，就是走 else 的时候了，还记得从<code>enq</code>进来的 node 嘛？这里用到了！我们称它为入队结点</p>
<pre><code class="hljs language-java"><span class="hljs-comment">// ...</span>
<span class="hljs-comment">// t = tail</span>
<span class="hljs-keyword">else</span> {
    node.prev = t;
    <span class="hljs-keyword">if</span> (compareAndSetTail(t, node)) {
        t.next = node;
        <span class="hljs-keyword">return</span> t;
    }
}
</code></pre>
<p>之前的<code>new Node()</code>作为入队结点的前驱（prev），然后<code>compareAndSetTail</code>，将入队结点设置为 AQS 的 tail 字段，然后 t 的后继指向入队结点，然后返回 t，这时候 AQS 的结构如：</p>
<pre class="nhi">
         AQS       
    -------------   
    |           |      new Node()     入队结点
    |  { head }-|------>{ prev }&lt;----{-prev }
    |           |       { next-}----&gt;{ next }
    |  { tail }-|------------------------^
    |           |        
    ------------- 
</pre>

<p>这时候的<code>new Node()</code>是没有什么意义的，然后入队结点还系着获取同步状态失败的线程，后面如果再有入队的结点的话，就直接走 else，尝试不断地将新入队结点设置为 tail，直到成功的时候才返回，虽然<code>enq</code>的返回值没有被用到</p>
<h5 id="aquirequeued">aquireQueued</h5>
<p>结点进入同步队列之后，就进入了一个自旋的过程并阻塞结点持有的线程，每个结点会自我审查，当条件满足，获取到同步状态的时候，就会从自旋中退出</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">acquireQueued</span><span class="hljs-params">(<span class="hljs-keyword">final</span> Node node, <span class="hljs-type">int</span> arg)</span> {
    <span class="hljs-type">boolean</span> <span class="hljs-variable">failed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;
    <span class="hljs-keyword">try</span> {
        <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;
        <span class="hljs-keyword">for</span> (;;) {
            <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> node.predecessor();
            <span class="hljs-keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) {
                setHead(node);
                p.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span>
                failed = <span class="hljs-literal">false</span>;
                <span class="hljs-keyword">return</span> interrupted;
            }
            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;
                parkAndCheckInterrupt())
                interrupted = <span class="hljs-literal">true</span>;
        }
    } <span class="hljs-keyword">finally</span> {
        <span class="hljs-keyword">if</span> (failed)
            cancelAcquire(node);
    }
}
</code></pre>
<p>接上面的内容，当我们从<code>addWaiter</code>的<code>enq</code>方法返回之后，<code>addWaiter</code>也就结束了，返回入队结点，然后入队结点进入到<code>aquireQueued</code>方法，其中通过死循环来自审：</p>
<ul>
<li><p>获取<strong>当前入队结点</strong>的前驱，如果前驱是 head 的话，那么<strong>当前入队结点</strong>就不断地尝试获取同步状态（line:15 <code>tryAcquire</code>）</p>
<ul>
<li><p>如果尝试成功，则将<strong>当前入队结点</strong>设置为头节点，并且断开引用便于 GC</p>
<blockquote>
<p>这里也指明了，头节点在不同的时候具有不同的涵义：头节点最开始或许是一个无用的<code>new Node()</code>，但是当下一个入队结点成获取同步状态了之后，这个入队结点会称为新的 head</p>
</blockquote>
</li>
</ul>
</li>
<li><p>然后如果前驱节点并不是 head，即使是也没有获取到同步状态的话，就到了<code>shouldParkAfterFailedAcquire</code>方法</p>
<pre><code class="hljs language-java"><span class="hljs-comment">/**
 * Checks and updates status for a node that failed to acquire.
 * Returns true if thread should block. This is the main signal
 * control in all acquire loops.  Requires that pred == node.prev.
 *
 * <span class="hljs-doctag">@param</span> pred node&#x27;s predecessor holding status
 * <span class="hljs-doctag">@param</span> node the node
 * <span class="hljs-doctag">@return</span> {<span class="hljs-doctag">@code</span> true} if thread should block
 */</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">shouldParkAfterFailedAcquire</span><span class="hljs-params">(Node pred, Node node)</span> {
    <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> pred.waitStatus;
    <span class="hljs-keyword">if</span> (ws == Node.SIGNAL)
        <span class="hljs-comment">/*
         * This node has already set status asking a release
         * to signal it, so it can safely park.
         */</span>
        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
    <span class="hljs-keyword">if</span> (ws &gt; <span class="hljs-number">0</span>) {
        <span class="hljs-comment">/*
         * Predecessor was cancelled. Skip over predecessors and
         * indicate retry.
         */</span>
        <span class="hljs-keyword">do</span> {
            node.prev = pred = pred.prev;
        } <span class="hljs-keyword">while</span> (pred.waitStatus &gt; <span class="hljs-number">0</span>);
        pred.next = node;
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-comment">/*
         * waitStatus must be 0 or PROPAGATE.  Indicate that we
         * need a signal, but don&#x27;t park yet.  Caller will need to
         * retry to make sure it cannot acquire before parking.
         */</span>
        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);
    }
    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
}
</code></pre>
<ul>
<li><p>如果已经设置过状态，并且状态是处于 SIGNAL 中的话，则返回 true</p>
</li>
<li><p>如果最开始的结构是<code>new Node()--&gt;当前入队结点</code>的话，入队结点的前驱<code>new Node()</code>的 waitStatus 是 0，这时候走 line: 33，然后返回 false 接着继续死循环</p>
<blockquote>
<p>但是这里比较关键，第二次再到这里的时候，pred 的 waitStatus 已经是 SIGNAL 了，所以这趟出去之后会返回 true，线程会 park 掉，除非被中断或者被前驱 unpark</p>
</blockquote>
</li>
<li><p>如果前驱的状态大于零，意味着这个前驱已经被 cancel 掉了，所以在 line:23-26 的时候做出的处理是断开这些前驱的引用，一直到找到一个没有被 cancel 了的前驱为止，然后返回 false；</p>
</li>
</ul>
</li>
<li><p>如果<code>shouldParkAfterFailedAcquire</code>返回 true，则意味着<strong>当前入队结点</strong>的线程应该被<strong>“park（停置）”</strong>掉，所以进入<code>parkAndCheckInterrupt</code>方法，这个方法暂停线程并且返回线程的中断标志；这个中断标志的返回关系到最开始的<code>acquireQueued</code>方法是否会返回 true，并且调用<code>selfInterrupted</code>方法</p>
</li>
</ul>
<p>简单来说，<code>aquireQueued</code>方法让入队的线程进入一个自旋过程，我们可以展开一下它的结构与过程：</p>
<pre class="nhi">
                                     node.prev=head && tryAcquire(arg)
         AQS       might get sync state             /
    -------------         /      ┌------v       ┌------v       ┌------v
    |           |       Node     |     Node     |     Node     |     Node
    |  { head }-|----&gt;{ prev }&lt;--|---{-prev }&lt;--|---{-prev }&lt;--|---{-prev }
    |           |     { next-}---|--&gt;{ next-}---|--&gt;{ next-}---|--&gt;{ next }
    |  { tail }-|----------------|------|-------|------|-------|------^
    |           |                └------┘       └------┘       └------┘
    -------------
注意：并不是所有结点都在无时无刻地自旋当中，结点在第二次for循环中，就都是处于park状态，
     因为一次for循环中的shouldParkAfterFailedAcquire就已经把前驱设置为SIGNAL了，
     直到第二个结点称为新的头节点，并且unpark原来的第三个结点，以此...
</pre>

<p>如结构里展示的一样，除了获取到同步状态的头节点之外，后面的结点都在排队 park 中，这个结论我已经 debug 过了，确实是这样的，<strong>这样看来，排队中的各个结点线程它们之间获取锁的顺序，是“公平的”</strong>，</p>
<p>最后，给出独占锁<code>acquire</code>方法的流程图：</p>
<p><img src="../../img/image-20211214115918238.png" alt="image-20211214115918238"></p>
<p><em>流程图可以知道里的线条还需要注意一个，‘线程进入等待状态’到‘前驱是头节点’这里，意义是：线程被中断或者前驱结点被释放</em></p>
<h5 id="release">release</h5>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">release</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> {
    <span class="hljs-keyword">if</span> (tryRelease(arg)) {
        <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;
        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; h.waitStatus != <span class="hljs-number">0</span>)
            unparkSuccessor(h);
        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
    }
    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
}
</code></pre>
<p>方法执行的时候，会唤醒头节点的后继结点，然后在自旋中的后继结点会有机会获取到同步状态，然后进行上面的流程图；</p>
<h4 id="shared-acquire--release">Shared acquire &amp; release</h4>
<p>共享式的源码阅读真是<strong>一道大坎</strong>，网上的要么没说到重点，要么一通胡说，而且网上的版本大多都是 1.7 的，虽然相较 1.8，也仅仅在<code>setHeadAndPropagate</code>中某处多了 2 个 condition，但就是这个方法都没人能搞清楚到底<strong>“propagate”</strong>的含义是什么，甚至我觉得 1.8 多的那 2 个 condition 是用来迫不得已去修 1.7 时留下来的 bug 才加上去的，<em>Daug Lea</em>前辈的思想确实精巧高深</p>
<h5 id="tryacquireshared">tryAcquireShared</h5>
<p>分析<code>acquireShared</code>之前，我们首先分析一下<code>tryAcquireShared</code>方法，这个方法的返回值对前者影响非常大，关键是注释：</p>
<p>这是第一段：</p>
<pre><code>* Attempts to acquire in shared mode. This method should query if
* the state of the object permits it to be acquired in the shared
* mode, and if so to acquire it.
*
* This method is always invoked by the thread performing
* acquire.
* If this method reports failure, the acquire method
* may queue the thread, if it is not already queued, until it is
* signalled by a release from some other thread.
</code></pre>
<blockquote>
<p>这个方法尝试在共享模式下获取同步状态，方法应该在同步器支持共享模式的情况下才能被使用</p>
<p>方法应该在线程请求获取同步状态的时候（即 call<code>acquire</code>）被调用</p>
<p>如果方法返回错误，那么<code>acquire</code>方法会让线程进入同步队列</p>
</blockquote>
<p>第二段是关于参数和返回值</p>
<pre><code>* @param arg the acquire argument. This value is always the one
*        passed to an acquire method, or is the value saved on entry
*        to a condition wait.  The value is otherwise uninterpreted
*        and can represent anything you like.
* @return a negative value on failure; zero if acquisition in shared
*         mode succeeded but no subsequent shared-mode acquire can
*         succeed; and a positive value if acquisition in shared
*         mode succeeded and subsequent shared-mode acquires might
*         also succeed, in which case a subsequent waiting thread
*         must check availability. (Support for three different
*         return values enables this method to be used in contexts
*         where acquires only sometimes act exclusively.)  Upon
*         success, this object has been acquired.
</code></pre>
<blockquote>
<p><strong>参数 arg：</strong>这个值也许是 1，或者是保存在 condition（某个地方- -）的一个值，或者你可以设置为任意你喜欢的值</p>
<p><strong>返回值：</strong></p>
<ul>
<li>如果获取失败了的话，就返回复数</li>
<li>在共享模式下获取成功，但是后继的共享模式获取同步状态没有成功（很迷吧？），返回 0</li>
<li>共享模式下获取成功，后期的共享模式也获取成功，返回正数</li>
</ul>
<p>这里说支持 3 种情况，但是老爷子自己在写的时候也没太多想，实际上运用当作一般只支持负数代表不成功，非负数代表成功，所以和 boolean 没什么区别- -</p>
</blockquote>
<h5 id="acquireshared">acquireShared</h5>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">acquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> {
    <span class="hljs-keyword">if</span> (tryAcquireShared(arg) &lt; <span class="hljs-number">0</span>)
        doAcquireShared(arg);
}

<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> {
    <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">node</span> <span class="hljs-operator">=</span> addWaiter(Node.SHARED);
    <span class="hljs-type">boolean</span> <span class="hljs-variable">failed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;
    <span class="hljs-keyword">try</span> {
        <span class="hljs-type">boolean</span> <span class="hljs-variable">interrupted</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;
        <span class="hljs-keyword">for</span> (;;) {
            <span class="hljs-keyword">final</span> <span class="hljs-type">Node</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> node.predecessor();
            <span class="hljs-keyword">if</span> (p == head) {
                <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> tryAcquireShared(arg);
                <span class="hljs-keyword">if</span> (r &gt;= <span class="hljs-number">0</span>) {	<span class="hljs-comment">// 这里就是，非负数就是代表成功了</span>
                    setHeadAndPropagate(node, r);
                    p.next = <span class="hljs-literal">null</span>; <span class="hljs-comment">// help GC</span>
                    <span class="hljs-keyword">if</span> (interrupted)
                        selfInterrupt();
                    failed = <span class="hljs-literal">false</span>;
                    <span class="hljs-keyword">return</span>;
                }
            }
            <span class="hljs-keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;
                parkAndCheckInterrupt())
                interrupted = <span class="hljs-literal">true</span>;
        }
    } <span class="hljs-keyword">finally</span> {
        <span class="hljs-keyword">if</span> (failed)
            cancelAcquire(node);
    }
}
</code></pre>
<p>首先<code>addWaiter</code>，添加的是 SHARED 模式的结点，这种结点的 mode 对象是一个<code>new Node</code></p>
<p>一直到 line: 25，进入自旋阶段：</p>
<ol>
<li><p>如果前驱是 head，则 try 一次同步状态：</p>
<ol>
<li><p>如果 try 到了<code>arg</code>个同步状态，那么就设置这个刚刚获取同步状态成功的结点为，head 并且<strong>“Propagate”</strong>：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setHeadAndPropagate</span><span class="hljs-params">(Node node, <span class="hljs-type">int</span> propagate)</span> {
    <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head; <span class="hljs-comment">// Record old head for check below</span>
    setHead(node);
    <span class="hljs-comment">/*
     * Try to signal next queued node if:
     *   Propagation was indicated by caller,
     *     or was recorded (as h.waitStatus either before
     *     or after setHead) by a previous operation
     *     (note: this uses sign-check of waitStatus because
     *      PROPAGATE status may transition to SIGNAL.)
     * and
     *   The next node is waiting in shared mode,
     *     or we don&#x27;t know, because it appears null
     *
     * The conservatism in both of these checks may cause
     * unnecessary wake-ups, but only when there are multiple
     * racing acquires/releases, so most need signals now or soon
     * anyway.
     */</span>
    <span class="hljs-keyword">if</span> (propagate &gt; <span class="hljs-number">0</span> || h == <span class="hljs-literal">null</span> || h.waitStatus &lt; <span class="hljs-number">0</span> ||
        (h = head) == <span class="hljs-literal">null</span> || h.waitStatus &lt; <span class="hljs-number">0</span>) {
        <span class="hljs-type">Node</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> node.next;
        <span class="hljs-keyword">if</span> (s == <span class="hljs-literal">null</span> || s.isShared())
            doReleaseShared();
    }
}
</code></pre>
<p>这段其实也很迷，首先用<code>h</code>记录旧头，然后设置新头，如果说</p>
<ul>
<li>上一步的<code>tryAcquireShared</code>拿到了 1 以上的同步状态的话</li>
<li>旧头是 null 的话</li>
<li>旧头的<code>waitStatus</code>是 SIGNAL/CONDITION/PROPAGATE 的话</li>
<li><code>(h = head) == null</code>这段更不知所云，变成新头了之后，新头还能为 null 嘛？</li>
<li>新头<code>waitStatus</code>是 SIGNAL/CONDITION/PROPAGATE 的话</li>
</ul>
<p>后面 2 个条件是 1.8 新加的，1.7 没有这样的，但是真的不是很懂为什么会判断后面 2 个条件，也许是为了处理并发，如果是这样的话，那我越发觉得 shared 这段的代码写的很不严谨了，应该有直接的方法去处理 shared 锁的</p>
<p>anyway，总之如果说满足上面的条件的话，代表着这个时候应该从队中<code>doReleaseShared</code>结点了，</p>
<pre><code class="hljs language-java"><span class="hljs-comment">/**
 * Release action for shared mode -- signals successor and ensures
 * propagation. (Note: For exclusive mode, release just amounts
 * to calling unparkSuccessor of head if it needs signal.)
 */</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doReleaseShared</span><span class="hljs-params">()</span> {
    <span class="hljs-comment">/*
     * Ensure that a release propagates, even if there are other
     * in-progress acquires/releases.  This proceeds in the usual
     * way of trying to unparkSuccessor of head if it needs
     * signal. But if it does not, status is set to PROPAGATE to
     * ensure that upon release, propagation continues.
     * Additionally, we must loop in case a new node is added
     * while we are doing this. Also, unlike other uses of
     * unparkSuccessor, we need to know if CAS to reset status
     * fails, if so rechecking.
     */</span>
    <span class="hljs-keyword">for</span> (;;) {
        <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;
        <span class="hljs-keyword">if</span> (h != <span class="hljs-literal">null</span> &amp;&amp; h != tail) {
            <span class="hljs-type">int</span> <span class="hljs-variable">ws</span> <span class="hljs-operator">=</span> h.waitStatus;
            <span class="hljs-keyword">if</span> (ws == Node.SIGNAL) {
                <span class="hljs-keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="hljs-number">0</span>))
                    <span class="hljs-keyword">continue</span>;            <span class="hljs-comment">// loop to recheck cases</span>
                unparkSuccessor(h);
            }
            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ws == <span class="hljs-number">0</span> &amp;&amp;
                     !compareAndSetWaitStatus(h, <span class="hljs-number">0</span>, Node.PROPAGATE))
                <span class="hljs-keyword">continue</span>;                <span class="hljs-comment">// loop on failed CAS</span>
        }
        <span class="hljs-keyword">if</span> (h == head)                   <span class="hljs-comment">// loop if head changed</span>
            <span class="hljs-keyword">break</span>;
    }
}
</code></pre>
<p>这个<code>doReleaseShared</code>的含义是：头结点的后继结点或许已经 park 了，这时候我们需要 unpark 它，让这个后继<strong>重新开始死循环以尝试获取同步状态</strong>因，为<strong>在 park 状态的无法回到自旋中尝试继续获取同步状态的！！！</strong>这些结点也许是 SHARED 模式的，但是它们必须被 unpark 之后，重新开始自旋之后，才能够尝试获取新的同步状态！</p>
<p><strong><code>acquireShared/setHeadAndPropagate/doReleaseShared</code>这三个方法加一起这才是 Propagate 的含义</strong></p>
<blockquote>
<p>同一时间有 3 个同步状态被释放，队列中有 A、B、C 三个共享结点被 park 掉，A 的前驱最后释放的时候，会 unparkA 结点，当 A 获取到了同步状态的时候，A 经过<code>acquireShared</code>，进入<code>setHeadAndPropagate</code>，将 A 设置为 head，然后验证 B 是 shared 模式了之后，进入<code>doReleaseShared</code>，这时候在 A 结点线程中通过死循环的方式最终 unparkB，A 返回到线程继续作业；</p>
<p>于是 B 又尝试获取同步状态，然后将自己设置为头，然后验证 C 是 shared 了之后，然后死循环 unparkC，以此类推....</p>
<p>这也是和独占不一样的地方，独占每次只需要 unpark 头结点的后继就行了，共享是尽可能地从队伍开始，往后 unpark 更多的 SHARED 结点！</p>
</blockquote>
<p>此外，这个方法还有另外一层含义，这个下面马上说到</p>
</li>
</ol>
</li>
<li><p>如果不是 head，则应该 park 当前线程，直到被前驱唤醒</p>
</li>
</ol>
<h5 id="releaseshared">releaseShared</h5>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">releaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> arg)</span> {
    <span class="hljs-keyword">if</span> (tryReleaseShared(arg)) {
        doReleaseShared();
        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
    }
    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
}
</code></pre>
<p><code>doReleaseShared</code>在这里体现出的含义是：确保同步状态被<strong>线程安全地释放（归还）</strong>，可以看到，方法内部通过 CAS 加循环的方式做这个确保，因为释放操作会同时来自多个线程</p>
<h3 id="conclusion">Conclusion</h3>
<p>这篇应该是字数最多的 blog 了，分析了很很久时间，花费的精力也比较多，老爷子总是在高层次的地方设计逻辑，如果不多处一起看代码，估计很难理解逻辑设计的用意</p>
<p>特别是有的时候，即使是畅销书都不太会和你分析深一些的道理和结构逻辑，比如 share 部分就没太分析，网上也有许多同行尝试进行分析，但是也没讲出<strong>Propagate</strong>的真正含义</p>
<hr>
