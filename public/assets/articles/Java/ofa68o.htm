<h3 id="前言">前言</h3>
<p>一言难尽 直接开始吧 时间有限 就不一一解读接口了</p>
<p>这篇是逐行级别的<code>HashMap</code>的<strong>“基础操作”</strong>源码解读，仅仅分析一些核心的<strong>单元素基础操作（CRUD）</strong>，尽可能从大框架思路去分析实现思路，一些太细的变量和无关操作，就不分析太多了</p>
<p>本篇因为时间和精力有限，也跳过了一些很底层的分析如 hash 计算，比特位计算等，网上还有好多大神对于这个分析的比我好得多</p>
<p>**多元素操作如<code>putAll</code>**以及一些克隆和序列化的操作的话，就不分析了</p>
<p>开篇即是对于作者实现笔记的解读，你可能觉得就是一篇源码英文翻译，但是到后面到了方法的时候，每行都是根据自己的理解去解读的，如果您有其他的看法，可以留言讨论。</p>
<hr>
<h3 id="document-介绍">Document 介绍</h3>
<blockquote>
<p>基于哈希表实现的<code>Map</code>接口。这个实现提供了所有可选的映射操作，并允许空值和空键。(HashMap 类大致相当于 Hashtable，但它是非同步的，并且允许为空。)这个类不保证映射的顺序；特别地，它不能保证顺序会随时间保持不变（也就是说顺序可能会在其他的操作中被改变）。</p>
<p>这个实现为基本操作（<code>get</code>和<code>put</code>）提供了恒定时间的性能，假设哈希函数将元素适当地分散在各个桶（ <strong>buckets，存储元素的结构，后文用仓位描述这个概念</strong> ）中。对集合视图的遍历迭代所花费的时间，与<code>HashMap</code>实例的 <strong>“容量（capacity）”</strong> 及其 <strong>大小（键-值映射数）</strong> 成比例。因此，如果迭代性能很重要，那么不要将初始容量设置得太高（或者负载系数太低），这是非常重要的。</p>
<p><code>HashMap</code>实例有两个影响其性能的参数：初始容量 <strong>（initial capacity）</strong> 和负载因子<strong>（load factor）</strong>。容量是哈希表中的桶数<strong>（箱子数）</strong>，初始容量只是创建哈希表时的容量。负载因子是在哈希表的容量自动增加之前，哈希表被允许达到的最大容量的度量<strong>（阈值）</strong>。当哈希表中的条目数量超过负载因子和当前容量的乘积时，哈希表就会被重新哈希(也就是说，重新构建内部数据结构)，这样哈希表的容量大约是原来的两倍。</p>
<p>一般来说，默认的负载因子**(0.75)<strong>在时间和空间成本之间提供了很好的权衡。较高的值减少了空间开销，但增加了查找成本（反映在<code>HashMap</code>类的大多数操作中，包括<code>get</code>和<code>put</code>）。在设置映射的初始容量时，应该考虑映射中的</strong>期望最大键值对数量<strong>及其</strong>负载因子<strong>，以最小化重哈希</strong>（rehash）<strong>操作的次数。如果初始容量大于</strong>期望最大键值对数量<strong>除以</strong>负载因子**，就不会发生重哈希操作。</p>
<p>如果要将许多映射（键值对）存储在<code>HashMap</code>实例中，那么使用足够大的容量创建映射将使映射存储的效率更高，而不是让它根据需要执行自动重哈希以增长表。注意，使用具有相同<code>hashCode()</code>的多个键确实会降低任何散列表的性能。为了改善影响，当键具有可比性时，这个类可以使用键之间的比较顺序来帮助断开连接（避免 hash 冲突）。</p>
</blockquote>
<h3 id="作者给的实现提示">作者给的实现提示</h3>
<h4 id="1关于整体结构">1.关于整体结构</h4>
<blockquote>
<p>这个 map 实现，在一般的情况下就像是一个个由哈希表（<strong>hash table</strong>）组织起来的箱子一样，但是当这些箱子的数量变得非常大（非常大如何衡量？）的时候，它会用树结点（<strong>TreeNode</strong>）结构去替换箱子的结构，每个结构和<code>java.util.TreeMap</code>很相似。</p>
<p>类中大部分的方法都是在一般的情况下考虑的（<strong>table method</strong>），你可以把它想象成当作一堆普通箱子一样使用，但是在合适的情况下（可能只是简单的判断结构是否<code>instanceof</code>一个 Node）会将转接到<strong>TreeNode</strong>结构下可用的方法（<strong>tree method</strong>），这时候你需要讲每个箱子当成一棵树去对待。</p>
<p><strong>TreeNode</strong>结构下的这些箱子可能会被遍历或者有别的用途，但是在这个<strong>TreeNode</strong>结构里的箱子数量越来越多的情况下，依旧支持以理想的速度进行快速查找操作。然而，考虑到 map 中绝大多数的箱子结构都是一般的结构，那么检查这些树结构箱子的操作就可能在表方法（<strong>table method</strong>）进行的过程中被延迟执行。</p>
</blockquote>
<h4 id="2关于-tree-bins">2.关于 Tree Bins</h4>
<blockquote>
<p>树箱子（<strong>Tree bins</strong>，箱子都是<strong>TreeNode</strong>结构）的顺序首先由元素的 hashCode（哈希码）决定，但是在有关联的情况下，如果两个元素实现了同一个<code>class C implements Comparable&lt;C&gt;</code>接口的话，那么它们的顺序由实现了的比较方法决定（我们保守地通过反射去验证 this 对象来检查泛型--详情见<code>comparableClassFor</code>方法）。</p>
<p>树箱子的增加比较复杂但是绝对值得，最坏的情况下也有**O(logn)**效率，但是操作要求键（KEYS）必须有唯一的哈希（hashs）或者有序性保证，因此，在一些意外情况或者<code>hashCode()</code>方法实现得太烂，也就是一些键（KEYS）共享一个 hashCode 的情况下，只要它们还能互相比较，性能会慢慢退化。（如果这些办法都没有被采用，我们可能会在两倍的时间效率或者空间效率上进行比较元素，这是在没有预防措施的情况下。但是这样的情况只会在菜鸟程序员的身上才有可能发生，因为程序已经够慢了，再慢一点也没差）</p>
</blockquote>
<h4 id="3treenode-结构带来的性能">3.TreeNode 结构带来的性能</h4>
<blockquote>
<p>因为 <strong>TreeNodes</strong> 结构一般都是普通结点大小的两倍左右大，我们仅仅是在当箱子装了足够的结点的时候，为了保证能够继续使用才使用这个结构（看<code>TREEIFY_THRESHOLD</code>，树化阈值）。而且当他们的数量变小的时候（移除操作或者恢复大小的操作）它们会变回一般的箱子结构。</p>
<p>在使用分布良好的用户实现的哈希码的时候，很少使用树箱子结构。</p>
<p>理想情况中，如果哈希码的实现能保证随机性，那么容器中的节点分布频率遵循<a href="http://en.wikipedia.org/wiki/Poisson_distribution">泊松分布</a>，默认调整大小的参数平均约为 <strong>0.5</strong> ，阈值为 <strong>0.75</strong> ，虽然由于方差较大，会适当调整分布粒度。（这个意思大致是说，保持容器的载量是容器的容量的 <strong>0.5~0.75</strong> 之间，接近 <strong>0.75</strong> 就需要考虑容器扩容）</p>
<p>如果忽视方差,预期的列表大小 k 的出现次数是：**(exp(-0.5) * pow(0.5, k) / 阶乘(k))**，值如下：</p>
<ul>
<li><p>0: 0.60653066</p>
</li>
<li><p>1: 0.30326533</p>
</li>
<li><p>2: 0.07581633</p>
</li>
<li><p>3: 0.01263606</p>
</li>
<li><p>4: 0.00157952</p>
</li>
<li><p>5: 0.00015795</p>
</li>
<li><p>6: 0.00001316</p>
</li>
<li><p>7: 0.00000094</p>
</li>
<li><p>8: 0.00000006</p>
</li>
</ul>
<p>更多的值就已经不到千万分之一了，也就是说在<code>hashCode()</code>实现得理想的情况下，几乎容器中几乎不可能出现两位数以上的树箱子。</p>
<p>树箱的根通常是它的第一个节点。然而，有时（当前的实现，仅在<code>Iterator.remove</code>方法上出现这个情况），根可能会在其他地方，但可以通过<code>TreeNode.root()</code>方法恢复父节点跟随。</p>
</blockquote>
<h4 id="4其他的细节">4.其他的细节</h4>
<blockquote>
<p>所有适用的内部方法都接受哈希码作为参数（通常由 public 方法提供），允许它们可以在不重新计算用户实现的哈希码的情况下相互调用。大多数内部方法也接受一个“tab”参数，这个参数通常是当前的表，但可能是新表或旧表调整或转换。</p>
<p>当箱子（bin）列表被树化、分割或未树化时，我们保留它们具有相同的相对访问 / 遍历顺序（例如：字段、后一个结点）以更好地保存局部，并稍微保留简化调用的分割和遍历的函数调用<code>iterator.remove</code>。当在插入时使用比较器时，保持一次全部排序（或这里要求的最接近的排序）以达到重新平衡，我们将类和标识码进行比较，以作为一个权衡的选择。</p>
<p><strong>普通模式</strong>和<strong>树模式</strong>之间的使用和转换是有点复杂的，可以参考<code>LinkedHashMap</code>。看到其中是在<strong>插入</strong>时调用<strong>hook 方法</strong>，允许<code>LinkedHashMap</code>内部进行<strong>删除操作</strong>和<strong>访问操作</strong>，否则保持这些机制独立性。（这也要求将 map 实例传递给一些实用程序方法，而这可能会创建一些新的节点。）</p>
</blockquote>
<h3 id="static-final-成员变量">static final 成员变量</h3>
<pre><code class="hljs language-java"><span class="hljs-comment">// 默认的初始化容器容量 一开始就是16个</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">DEFAULT_INITIAL_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">4</span>; <span class="hljs-comment">// aka 16</span>

<span class="hljs-comment">// 最大的容量</span>
<span class="hljs-comment">// 只在你使用指定容量的构造函数构造容器的时候 并且你给的值比这个值更大的时候使用</span>
<span class="hljs-comment">// 无论如何一个容器初始化容量不会大过这个值</span>
<span class="hljs-comment">// 而且最好是小于这个值的2的任意次方</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAXIMUM_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">30</span>;

<span class="hljs-comment">// 默认的负载因子</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">float</span> <span class="hljs-variable">DEFAULT_LOAD_FACTOR</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.75f</span>;

<span class="hljs-comment">// 树化阈值</span>
<span class="hljs-comment">// 箱子结构超过这个阈值的时候会用树结构而不是链结构去管理箱子</span>
<span class="hljs-comment">// 当一条链结点超过这个阈值的时候 箱子会变成树结构</span>
<span class="hljs-comment">// 这个值必须大于2，并且应该至少为8，以便匹配在树中进行删除操作后因为尺寸收缩而转换为普通箱子的情况</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">TREEIFY_THRESHOLD</span> <span class="hljs-operator">=</span> <span class="hljs-number">8</span>;

<span class="hljs-comment">// 逆树化阈值</span>
<span class="hljs-comment">// 在一些恢复容量的操作中 当箱子容量小于这个阈值的时候会对箱子进行逆树化</span>
<span class="hljs-comment">// 这个值最大是6</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">UNTREEIFY_THRESHOLD</span> <span class="hljs-operator">=</span> <span class="hljs-number">6</span>;

<span class="hljs-comment">// 最小的表容量</span>
<span class="hljs-comment">// 超过这个最小的表容量就应该树化了(否则如果在一个仓位中有太多节点，表将被调整大小)</span>
<span class="hljs-comment">// 这个值至少为4 * TREEIFY_THRESHOLD 以避免调整大小和树化阈值之间的冲突</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MIN_TREEIFY_CAPACITY</span> <span class="hljs-operator">=</span> <span class="hljs-number">64</span>;
</code></pre>
<h3 id="内部类：链箱子结点">内部类：链箱子——结点</h3>
<pre><code class="hljs language-java"><span class="hljs-comment">/**
 * Basic hash bin node, used for most entries.  (See below for
 * TreeNode subclass, and in LinkedHashMap for its Entry subclass.)
 */</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&lt;K,V&gt; <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Map</span>.Entry&lt;K,V&gt; {
    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> hash;
    <span class="hljs-keyword">final</span> K key;
    V value;
    Node&lt;K,V&gt; next;

    Node(<span class="hljs-type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) {
        <span class="hljs-built_in">this</span>.hash = hash;
        <span class="hljs-built_in">this</span>.key = key;
        <span class="hljs-built_in">this</span>.value = value;
        <span class="hljs-built_in">this</span>.next = next;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> K <span class="hljs-title function_">getKey</span><span class="hljs-params">()</span>        { <span class="hljs-keyword">return</span> key; }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> V <span class="hljs-title function_">getValue</span><span class="hljs-params">()</span>      { <span class="hljs-keyword">return</span> value; }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> { <span class="hljs-keyword">return</span> key + <span class="hljs-string">&quot;=&quot;</span> + value; }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hashCode</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> Objects.hashCode(key) ^ Objects.hashCode(value);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> V <span class="hljs-title function_">setValue</span><span class="hljs-params">(V newValue)</span> {
        <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> value;
        value = newValue;
        <span class="hljs-keyword">return</span> oldValue;
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">equals</span><span class="hljs-params">(Object o)</span> {
        <span class="hljs-keyword">if</span> (o == <span class="hljs-built_in">this</span>)
            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
        <span class="hljs-keyword">if</span> (o <span class="hljs-keyword">instanceof</span> Map.Entry) {
            Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o;
            <span class="hljs-keyword">if</span> (Objects.equals(key, e.getKey()) &amp;&amp;
                Objects.equals(value, e.getValue()))
                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
        }
        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
    }
}
</code></pre>
<p>简单而常规，主要是两个 final 变量，存储 Key 和 hash，然后是 value 和下一个结点；</p>
<p><img src="../../img/20180817154531.webp" alt></p>
<h3 id="静态方法">静态方法</h3>
<h4 id="hash">hash</h4>
<pre><code class="hljs language-java"><span class="hljs-comment">// 计算key.hashCode()，并将(XORs)的高比特位分散到低比特位 以减少hash冲突</span>
<span class="hljs-comment">// 应用了一种转换 将高比特的影响向下传播</span>
<span class="hljs-comment">// 比特传播的速度 效用和质量之间存在权衡</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">hash</span><span class="hljs-params">(Object key)</span> {
    <span class="hljs-type">int</span> h;
    <span class="hljs-keyword">return</span> (key == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="hljs-number">16</span>);
}
</code></pre>
<h4 id="comparableclassfor">comparableClassFor</h4>
<pre><code class="hljs language-java"><span class="hljs-comment">// 如果x实现了比较器接口就返回x的Class对象 不然就返回null</span>
<span class="hljs-keyword">static</span> Class&lt;?&gt; comparableClassFor(Object x) {
    <span class="hljs-comment">//...</span>
}
</code></pre>
<h4 id="comparecomparables">compareComparables</h4>
<pre><code class="hljs language-java"><span class="hljs-comment">// 返回两个可比较对象的比较结果</span>
<span class="hljs-meta">@SuppressWarnings({&quot;rawtypes&quot;,&quot;unchecked&quot;})</span> <span class="hljs-comment">// for cast to Comparable</span>
<span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compareComparables</span><span class="hljs-params">(Class&lt;?&gt; kc, Object k, Object x)</span> {
    <span class="hljs-keyword">return</span> (x == <span class="hljs-literal">null</span> || x.getClass() != kc ? <span class="hljs-number">0</span> :
            ((Comparable)k).compareTo(x));
}
</code></pre>
<h4 id="tablesizefor">tableSizeFor</h4>
<pre><code class="hljs language-java"><span class="hljs-comment">// 无论给什么容量 总是调整为比他大的2的若干次幂大大小 最大不超过MAXIMUM_CAPACITY</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tableSizeFor</span><span class="hljs-params">(<span class="hljs-type">int</span> cap)</span> {
    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> cap - <span class="hljs-number">1</span>;
    n |= n &gt;&gt;&gt; <span class="hljs-number">1</span>;
    n |= n &gt;&gt;&gt; <span class="hljs-number">2</span>;
    n |= n &gt;&gt;&gt; <span class="hljs-number">4</span>;
    n |= n &gt;&gt;&gt; <span class="hljs-number">8</span>;
    n |= n &gt;&gt;&gt; <span class="hljs-number">16</span>;
    <span class="hljs-keyword">return</span> (n &lt; <span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="hljs-number">1</span>;
}
</code></pre>
<h3 id="成员变量">成员变量</h3>
<pre><code class="hljs language-java"><span class="hljs-comment">// 表</span>
<span class="hljs-comment">// 以一个Node&lt;K,V&gt;数组来表示一张表的第一层结构 我称这个数组为“主仓”</span>
<span class="hljs-comment">// 刚初始化的时候首先使用的表 在有必要的时候会重新计算容量</span>
<span class="hljs-comment">// 表的长度总是2的任意次幂 （某些情况下也可以是0）</span>
<span class="hljs-keyword">transient</span> Node&lt;K,V&gt;[] table;

<span class="hljs-comment">// 键值对集合</span>
<span class="hljs-comment">// 保存键值对的集合 注意AbstractMap的成员白能力用的是keySet() and values()</span>
<span class="hljs-keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;

<span class="hljs-comment">// 载量 这个map中装了多少对键值对</span>
<span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> size;

<span class="hljs-comment">// 这个map改变结构的次数 可以是HaspMap结构的改变也可以是内部结构的改变</span>
<span class="hljs-comment">// 通常迭代的时候会用这个值做参考</span>
<span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> modCount;

<span class="hljs-comment">// 下一次容量调整（load_factor * capacity）要达到的的阈值</span>
<span class="hljs-type">int</span> threshold;

<span class="hljs-comment">// 当前哈希表的负载因子</span>
<span class="hljs-keyword">final</span> <span class="hljs-type">float</span> loadFactor;
</code></pre>
<h3 id="构造函数">构造函数</h3>
<p>本来不打算分析构造函数的，但是检查文章的时候发现，构造函数也有点东西，构造函数有 4 个，放 map 的那个就忽略了，先看无参的：</p>
<h4 id="无参">无参</h4>
<pre><code class="hljs language-java"><span class="hljs-comment">/**
 * Constructs an empty &lt;tt&gt;HashMap&lt;/tt&gt; with the default initial capacity
 * (16) and the default load factor (0.75).
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">()</span> {
    <span class="hljs-built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="hljs-comment">// all other fields defaulted</span>
}
</code></pre>
<p>函数就只指定了一个默认的负载因子，其他的参数会在<code>resize()</code>方法做出，往下看就知道了；</p>
<h4 id="有参-1">有参 1</h4>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity)</span> {
    <span class="hljs-built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);
}
</code></pre>
<h4 id="有参-2">有参 2</h4>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">HashMap</span><span class="hljs-params">(<span class="hljs-type">int</span> initialCapacity, <span class="hljs-type">float</span> loadFactor)</span> {
    <span class="hljs-keyword">if</span> (initialCapacity &lt; <span class="hljs-number">0</span>)
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal initial capacity: &quot;</span> +
                                           initialCapacity);
    <span class="hljs-keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)
        initialCapacity = MAXIMUM_CAPACITY;
    <span class="hljs-keyword">if</span> (loadFactor &lt;= <span class="hljs-number">0</span> || Float.isNaN(loadFactor))
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalArgumentException</span>(<span class="hljs-string">&quot;Illegal load factor: &quot;</span> +
                                           loadFactor);
    <span class="hljs-built_in">this</span>.loadFactor = loadFactor;
    <span class="hljs-built_in">this</span>.threshold = tableSizeFor(initialCapacity);
}
</code></pre>
<p>这里其他的都不重要，关键看<code>line:11</code>，其实我们指定初始容量并是直接的给表指定长度，而是直接指定阈值大小，因为我指定 1000 容量的容器，肯定是计划好能一次性不扩容地装 1000 个，读后面你会发现，hashmap 你是不会装满的，到了它容量的 75%（默认情况下）它就会扩容，因为它要留一大部分的空间来防止 hash 冲突；</p>
<h3 id="结构剧透！">结构剧透！</h3>
<p><img src="../../img/20180817171145.webp" alt></p>
<p>我们看到，这就是一张一般的 HashMap 的结构，最上面的一横排是一个<code>Node&lt;K,V&gt;[]</code>也就是成员变量 table，我私称这个 table 为<strong>主仓（main warehouse）。</strong></p>
<p>每 hash 到的元素都会首先被放到<strong>主仓</strong>对应下标的位置上去，我私称每个下标对应的位置为一个<strong>仓位（position）</strong>，每一个<strong>箱子（也就是每一个结点）</strong>经过 hash 散列后，如果分到同一个仓位中，将在这个仓位上组织成链表，我私称这个链表为<strong>链箱群（linked bins）</strong>，如果<strong>链箱群</strong>长度达到树化阈值，那么这条<strong>链箱群</strong>就会树化为树结构，我私称这个树结构为<strong>树箱群（tree bins）</strong>。<strong>链箱群</strong>和<strong>树箱群</strong>我统称为<strong>箱群结构（bins structure）</strong></p>
<p>所以我们找元素的时候有这么一件事：<strong>hashCode 找仓位，equals 找箱子！</strong></p>
<h3 id="成员方法">成员方法</h3>
<h4 id="get">get</h4>
<pre><code class="hljs language-java"><span class="hljs-comment">// 多的没什么好说 关键是引出getNode方法</span>
<span class="hljs-keyword">public</span> V <span class="hljs-title function_">get</span><span class="hljs-params">(Object key)</span> {
    Node&lt;K,V&gt; e;
    <span class="hljs-keyword">return</span> (e = getNode(hash(key), key)) == <span class="hljs-literal">null</span> ? <span class="hljs-literal">null</span> : e.value;
}
</code></pre>
<h5 id="getnode">getNode</h5>
<pre><code class="hljs language-java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt; <span class="hljs-title function_">getNode</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, Object key)</span> {
    Node&lt;K,V&gt;[] tab;
    Node&lt;K,V&gt; first, e;
    <span class="hljs-type">int</span> n; K k;
    <span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;
        (first = tab[(n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-literal">null</span>) {
        <span class="hljs-keyword">if</span> (first.hash == hash &amp;&amp; <span class="hljs-comment">// always check first node</span>
            ((k = first.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))
            <span class="hljs-keyword">return</span> first;
        <span class="hljs-keyword">if</span> ((e = first.next) != <span class="hljs-literal">null</span>) {
            <span class="hljs-keyword">if</span> (first <span class="hljs-keyword">instanceof</span> TreeNode)
                <span class="hljs-keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);
            <span class="hljs-keyword">do</span> {
                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;
                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))
                    <span class="hljs-keyword">return</span> e;
            } <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-literal">null</span>);
        }
    }
    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
}
</code></pre>
<p>这里有 5 个变量，第一个<strong>tab</strong>变量引用 map 的<strong>主仓</strong>；</p>
<p>然后<strong>first</strong>根据 hash 去找到的<strong>主仓</strong>上的仓位的第一个<strong>箱子</strong>；</p>
<p><strong>e</strong>表示箱群中的某个<strong>箱子</strong>；</p>
<p><strong>n</strong>表示<strong>主仓数组的长度</strong>；</p>
<p><strong>k</strong>表示当前访问的箱子的 Key 对象；</p>
<p>读完代码发现，在一系列严谨的条件过后，首先看第一个箱子的 hash 值和要找到的 key 的 hash 值是否相等，相等则再比较地址以及 equals 方法；</p>
<p>如果第一个箱子并不是要找的元素，且当前仓位不只一个箱子而是一个箱群，那么接下来就开始判断<strong>箱群结构</strong>，如果 first 是<strong>树箱</strong>，那么就用<strong>树结构的方法去查找结点</strong>，否则就是<strong>链箱群</strong>，接着就是中规中矩的链遍历，对比步骤和上面一致；</p>
<p><strong>无论是树箱子还是链箱子的查找，都是<code>k == key || k.equals(key)</code>这样的比较句式！</strong></p>
<p>注意到<code>line:8</code>有一句<code>(n - 1) &amp; hash</code>，这是将 hash 再映射到主仓的下标中，这也就解释了为什么会有<code>first.hash == hash</code>这样的语句，因为即使不同的 hash 也有可能映射到同一个仓位，下文的<code>hash &amp; (n - 1)</code>也是计算仓位的下标，二者没有区别；</p>
<p>但是要注意的是，这样计算下标是有要求的，<strong>要求就是表容量必须是 2 的次幂，才能进行这样的运算</strong>，这也是为什么有静态方法<code>tableSizeFor</code>这个方法，比如说你指定初始化容量为 1000，实际创建出来的表容量也是比 1000 大的 2 的次幂数即 1024，我们配合<strong>有参构造方法 1</strong>去解答，当我们最开始使用<strong>有参构造方法 1</strong>的时候，只有<strong>threshold</strong>被赋值为比如说 1000，然后到了<code>resize()</code>方法：</p>
<blockquote>
<p>oldCap=0；</p>
<p>oldThr = threshold = 1024；</p>
<p>newCap = oldThr = 1024；</p>
<p>newThr = newCap * loadFactor = 1024 * 0.75；</p>
</blockquote>
<p>所以新容量就是 1024！</p>
<h4 id="containskey">containsKey</h4>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">containsKey</span><span class="hljs-params">(Object key)</span> {
    <span class="hljs-keyword">return</span> getNode(hash(key), key) != <span class="hljs-literal">null</span>;
}
</code></pre>
<p>不解释了</p>
<h4 id="put">put</h4>
<pre><code class="hljs language-java"><span class="hljs-comment">// 引putVal</span>
<span class="hljs-keyword">public</span> V <span class="hljs-title function_">put</span><span class="hljs-params">(K key, V value)</span> {
    <span class="hljs-keyword">return</span> putVal(hash(key), key, value, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>);
}
</code></pre>
<h5 id="putval">putVal</h5>
<pre><code class="hljs language-java"><span class="hljs-keyword">final</span> V <span class="hljs-title function_">putVal</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, K key, V value, <span class="hljs-type">boolean</span> onlyIfAbsent,
               <span class="hljs-type">boolean</span> evict)</span> {
    Node&lt;K,V&gt;[] tab;
    Node&lt;K,V&gt; p;
    <span class="hljs-type">int</span> n, i;
    <span class="hljs-keyword">if</span> ((tab = table) == <span class="hljs-literal">null</span> || (n = tab.length) == <span class="hljs-number">0</span>)
        n = (tab = resize()).length;
    <span class="hljs-keyword">if</span> ((p = tab[i = (n - <span class="hljs-number">1</span>) &amp; hash]) == <span class="hljs-literal">null</span>)
        tab[i] = newNode(hash, key, value, <span class="hljs-literal">null</span>);
    <span class="hljs-keyword">else</span> {
        Node&lt;K,V&gt; e; K k;
        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;
            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))
            e = p;
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)
            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="hljs-built_in">this</span>, tab, hash, key, value);
        <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">binCount</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; ; ++binCount) {
                <span class="hljs-keyword">if</span> ((e = p.next) == <span class="hljs-literal">null</span>) {
                    p.next = newNode(hash, key, value, <span class="hljs-literal">null</span>);
                    <span class="hljs-keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="hljs-number">1</span>) <span class="hljs-comment">// -1 for 1st</span>
                        treeifyBin(tab, hash);
                    <span class="hljs-keyword">break</span>;
                }
                <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;
                    ((k = e.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))
                    <span class="hljs-keyword">break</span>;
                p = e;
            }
        }
        <span class="hljs-keyword">if</span> (e != <span class="hljs-literal">null</span>) { <span class="hljs-comment">// existing mapping for key</span>
            <span class="hljs-type">V</span> <span class="hljs-variable">oldValue</span> <span class="hljs-operator">=</span> e.value;
            <span class="hljs-keyword">if</span> (!onlyIfAbsent || oldValue == <span class="hljs-literal">null</span>)
                e.value = value;
            afterNodeAccess(e);
            <span class="hljs-keyword">return</span> oldValue;
        }
    }
    ++modCount;
    <span class="hljs-keyword">if</span> (++size &gt; threshold)
        resize();
    afterNodeInsertion(evict);
    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
}
</code></pre>
<p>假设我们要存储的 key 和 value 组装成了一个<strong>箱子（node）</strong>，我们的工作是要把这个箱子放在 map 中合适的位置上</p>
<ul>
<li><strong>tab</strong>代表当前的表，在<code>line:6</code>被赋值，<code>line:7</code>我们看到如果 map 是一个没被初始化过的 map，那么就调用<code>resize()</code>方法初始化一个 map；</li>
<li><strong>p</strong>用来预存之前在这个仓位上的第一个箱子，也就是一个结点，在<code>line:8</code>被赋值，同时也做链遍历的<strong>双指针之一</strong>，且如果位置上原本就没有元素的话，就不会进行<code>line:10-38</code>的一系列操作，而是直接在<code>line:9</code>被赋予新的结点；如果原来位置上有元素的话，那么继续进行如下逻辑：<ul>
<li>首先有一个<strong>e</strong>，用来存储一个结点，这个 e 有两个作用，一个是用作链遍历的<strong>双指针之一</strong>，另一个就是在链中已经存在一个和要存入的箱子具有相同的<strong>hash 和 key</strong>的箱子的情况下，存储这个已存在的箱子，用于后面判断是否覆盖 value</li>
<li>还有一个<strong>k</strong>，用来存储要存入箱子的 key 值；</li>
</ul>
</li>
</ul>
<p><code>line:12-16</code>如果 hash（key 的 hash 值）、key 都一样，那 e 就被赋值为 p，这时候也就是该仓位上原来的第一个箱子；如果不一样，那就接着判断 p 是不是树箱子，如果是树箱子，那么就按照树的方式去存放我们要存放的箱子；</p>
<p>如果还不是树箱子，意味着这时候这个<strong>仓位</strong>下的箱群结构是<strong>链箱群</strong>，我们执行<code>line:17-30</code>，尝试摸到链尾，把新结点添加到链尾<code>line:20</code>，然后判断链长度，到达树化阈值就将<strong>链箱群</strong>树化为<strong>树箱群</strong><code>line:21-22</code>；</p>
<p>如果在摸链尾的过程中发现有 hash 和 key 都一样的，这就意味着<strong>key 冲突（key conflict）</strong>，赋值<strong>e</strong>之后（代表记下这个冲突的位置了），那就可以退出循环了<code>line:25-27</code>；</p>
<p><code>line:31-37</code>是对<strong>key 冲突</strong>的情况进行判断，如果变量<strong>onlyIfAbsent</strong>是真，那么就不覆盖原有 key 对应的 value；我们的<code>put</code>方法传的就是 false，也就是默认覆盖 key 相同的 value；</p>
<p><strong>需要强调的是：整个方法中，hash 方法和 equals 方法的地位都是无比重要的！</strong></p>
<p>后面还注意到有<code>afterNodeAccess</code>和<code>afterNodeInsertion</code>两个方法，这两个方法在<code>HashMap</code>中没有实现，是给<code>LinkedHashMap</code>去实现的，在这里我们不必关心；</p>
<p>最后调整主仓，如果主仓 size 大于阈值就执行<code>resize()</code>方法；</p>
<h6 id="resizerehash">resize/rehash</h6>
<p>resize 是 HashMap 的扩容方法，而 rehash 指的是扩容后旧表节点重新散列的过程</p>
<pre><code class="hljs language-java"><span class="hljs-comment">// 这个方法很关键 用于调整主仓的大小</span>
<span class="hljs-comment">// 要么是初始化一个主仓 要么将主仓扩至2倍大</span>
<span class="hljs-comment">// 如果旧主仓是null 那就分配一个和根据阈值做参考的主仓</span>
<span class="hljs-comment">// 否则的话 使用2的次幂值去调整容量 元素要么在原来的位置 要么在新的表中有2的次幂的偏移量</span>
<span class="hljs-keyword">final</span> Node&lt;K,V&gt;[] resize() {
    Node&lt;K,V&gt;[] oldTab = table;
    <span class="hljs-type">int</span> <span class="hljs-variable">oldCap</span> <span class="hljs-operator">=</span> (oldTab == <span class="hljs-literal">null</span>) ? <span class="hljs-number">0</span> : oldTab.length;
    <span class="hljs-type">int</span> <span class="hljs-variable">oldThr</span> <span class="hljs-operator">=</span> threshold;
    <span class="hljs-type">int</span> newCap, newThr = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">if</span> (oldCap &gt; <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) {
            threshold = Integer.MAX_VALUE;
            <span class="hljs-keyword">return</span> oldTab;
        }
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="hljs-number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;
                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)
            newThr = oldThr &lt;&lt; <span class="hljs-number">1</span>; <span class="hljs-comment">// double threshold</span>
    }
    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (oldThr &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// initial capacity was placed in threshold</span>
        newCap = oldThr;
    <span class="hljs-keyword">else</span> {               <span class="hljs-comment">// zero initial threshold signifies using defaults</span>
        newCap = DEFAULT_INITIAL_CAPACITY;
        newThr = (<span class="hljs-type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);
    }
    <span class="hljs-keyword">if</span> (newThr == <span class="hljs-number">0</span>) {
        <span class="hljs-type">float</span> <span class="hljs-variable">ft</span> <span class="hljs-operator">=</span> (<span class="hljs-type">float</span>)newCap * loadFactor;
        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="hljs-type">float</span>)MAXIMUM_CAPACITY ?
                  (<span class="hljs-type">int</span>)ft : Integer.MAX_VALUE);
    }
    threshold = newThr;
    <span class="hljs-meta">@SuppressWarnings({&quot;rawtypes&quot;,&quot;unchecked&quot;})</span>
        Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[newCap];
    table = newTab;
    <span class="hljs-keyword">if</span> (oldTab != <span class="hljs-literal">null</span>) {
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; oldCap; ++j) {
            Node&lt;K,V&gt; e;
            <span class="hljs-keyword">if</span> ((e = oldTab[j]) != <span class="hljs-literal">null</span>) {
                oldTab[j] = <span class="hljs-literal">null</span>;
                <span class="hljs-keyword">if</span> (e.next == <span class="hljs-literal">null</span>)
                    newTab[e.hash &amp; (newCap - <span class="hljs-number">1</span>)] = e;
                <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (e <span class="hljs-keyword">instanceof</span> TreeNode)
                    ((TreeNode&lt;K,V&gt;)e).split(<span class="hljs-built_in">this</span>, newTab, j, oldCap);
                <span class="hljs-keyword">else</span> { <span class="hljs-comment">// preserve order</span>
                    Node&lt;K,V&gt; loHead = <span class="hljs-literal">null</span>, loTail = <span class="hljs-literal">null</span>;
                    Node&lt;K,V&gt; hiHead = <span class="hljs-literal">null</span>, hiTail = <span class="hljs-literal">null</span>;
                    Node&lt;K,V&gt; next;
                    <span class="hljs-keyword">do</span> {
                        next = e.next;
                        <span class="hljs-keyword">if</span> ((e.hash &amp; oldCap) == <span class="hljs-number">0</span>) {
                            <span class="hljs-keyword">if</span> (loTail == <span class="hljs-literal">null</span>)
                                loHead = e;
                            <span class="hljs-keyword">else</span>
                                loTail.next = e;
                            loTail = e;
                        }
                        <span class="hljs-keyword">else</span> {
                            <span class="hljs-keyword">if</span> (hiTail == <span class="hljs-literal">null</span>)
                                hiHead = e;
                            <span class="hljs-keyword">else</span>
                                hiTail.next = e;
                            hiTail = e;
                        }
                    } <span class="hljs-keyword">while</span> ((e = next) != <span class="hljs-literal">null</span>);
                    <span class="hljs-keyword">if</span> (loTail != <span class="hljs-literal">null</span>) {
                        loTail.next = <span class="hljs-literal">null</span>;
                        newTab[j] = loHead;
                    }
                    <span class="hljs-keyword">if</span> (hiTail != <span class="hljs-literal">null</span>) {
                        hiTail.next = <span class="hljs-literal">null</span>;
                        newTab[j + oldCap] = hiHead;
                    }
                }
            }
        }
    }
    <span class="hljs-keyword">return</span> newTab;
}
</code></pre>
<ol>
<li><code>line:9-29</code>：这一阶段主要是确定新的阈值和新的容量，要么是原来的两倍，要么最大也大不过 Integer 的最大值</li>
<li><code>line:33</code>：之后的代码主要就是元素的搬运工作了，值得注意的是这里面有<code>TreeNode</code>对象调用的<code>split</code>方法，可能会调整一些箱子的位置（并不是调整箱子所在的仓位）比如<strong>逆树化一个树箱群</strong>，这个待会就分析</li>
</ol>
<h6 id="树箱子大名鼎鼎的红黑树">树箱子——大名鼎鼎的红黑树</h6>
<p>这方法里面的一些树操作细节，得先了解清楚<strong>树箱子</strong>的结构，才好继续分析，所以这里先插播一下，了解一下<strong>树箱子</strong>的结构</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TreeNode</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">LinkedHashMap</span>.Entry&lt;K,V&gt; {
    TreeNode&lt;K,V&gt; parent;  <span class="hljs-comment">// red-black tree links</span>
    TreeNode&lt;K,V&gt; left;
    TreeNode&lt;K,V&gt; right;
    TreeNode&lt;K,V&gt; prev;    <span class="hljs-comment">// needed to unlink next upon deletion</span>
    <span class="hljs-type">boolean</span> red;
    <span class="hljs-comment">// ...</span>
}
<span class="hljs-comment">// 这个是LinkedHashMap.Entry&lt;K,V&gt; 结构也挺简单</span>
<span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Entry</span>&lt;K,V&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HashMap</span>.Node&lt;K,V&gt; {
    Entry&lt;K,V&gt; before, after;
    Entry(<span class="hljs-type">int</span> hash, K key, V value, Node&lt;K,V&gt; next) {
        <span class="hljs-built_in">super</span>(hash, key, value, next);
    }
}
</code></pre>
<p>这里虽然说继承关系稍微复杂了点，但是单纯从数据结构的角度去理解还是挺简单的：</p>
<p><code>HashMap</code>的<strong>主仓</strong>是一个 Node 数组，<code>HashMap.Entry</code>，仅仅用于存放键值对；</p>
<p>而<code>LinkedHashMap</code>的<strong>主仓</strong>之间的<strong>仓位</strong>是以链的形式组织的，<code>LinkedHashMap.Entry&lt;K,V&gt;</code>除了键值对还要存放前一个仓位（before）以及后一个仓位（after）</p>
<p>再说回<code>TreeNode&lt;K,V&gt;</code>，可以看到，这是一个 3+1 指针的结点，3 分别指向：<strong>父结点（parent）、左孩子结点（left）、右孩子结点（right）</strong>，1 指的是<strong>前指针（prev）</strong>，用于删除结点的时候，做辅助指针用，前指针不一定是父节点；再加上间接继承自<code>HashMap.Node&lt;K,V&gt;</code> ，<strong>那么就还有一个 next 指针！</strong></p>
<p>如果没分析错的话，<strong>树箱子</strong>的结构就应该是：</p>
<p><img src="../../img/20180818150455.webp" alt></p>
<p>这里应该还有<strong>before</strong>和<strong>after</strong>，但是和 HashMap 无关，就忽略了，我认为这里是不想重新实现某些已有方法</p>
<h6 id="split">split</h6>
<p>之前在说<strong>resize/rehash</strong>的时候，就有看到，在重新散列节点的时候，也就是旧节点从旧表搬运到新表的时候，如果该节点是一个树节点，那么它会直接调用 split 方法：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">split</span><span class="hljs-params">(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, <span class="hljs-type">int</span> index, <span class="hljs-type">int</span> bit)</span> {
    TreeNode&lt;K,V&gt; b = <span class="hljs-built_in">this</span>;
    <span class="hljs-comment">// Relink into lo and hi lists, preserving order</span>
    TreeNode&lt;K,V&gt; loHead = <span class="hljs-literal">null</span>, loTail = <span class="hljs-literal">null</span>;
    TreeNode&lt;K,V&gt; hiHead = <span class="hljs-literal">null</span>, hiTail = <span class="hljs-literal">null</span>;
    <span class="hljs-type">int</span> <span class="hljs-variable">lc</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, hc = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">for</span> (TreeNode&lt;K,V&gt; e = b, next; e != <span class="hljs-literal">null</span>; e = next) {
        next = (TreeNode&lt;K,V&gt;)e.next;
        e.next = <span class="hljs-literal">null</span>;
        <span class="hljs-keyword">if</span> ((e.hash &amp; bit) == <span class="hljs-number">0</span>) {
            <span class="hljs-keyword">if</span> ((e.prev = loTail) == <span class="hljs-literal">null</span>)
                loHead = e;
            <span class="hljs-keyword">else</span>
                loTail.next = e;
            loTail = e;
            ++lc;
        }
        <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">if</span> ((e.prev = hiTail) == <span class="hljs-literal">null</span>)
                hiHead = e;
            <span class="hljs-keyword">else</span>
                hiTail.next = e;
            hiTail = e;
            ++hc;
        }
    }

    <span class="hljs-keyword">if</span> (loHead != <span class="hljs-literal">null</span>) {
        <span class="hljs-keyword">if</span> (lc &lt;= UNTREEIFY_THRESHOLD)
            tab[index] = loHead.untreeify(map);
        <span class="hljs-keyword">else</span> {
            tab[index] = loHead;
            <span class="hljs-keyword">if</span> (hiHead != <span class="hljs-literal">null</span>) <span class="hljs-comment">// (else is already treeified)</span>
                loHead.treeify(tab);
        }
    }
    <span class="hljs-keyword">if</span> (hiHead != <span class="hljs-literal">null</span>) {
        <span class="hljs-keyword">if</span> (hc &lt;= UNTREEIFY_THRESHOLD)
            tab[index + bit] = hiHead.untreeify(map);
        <span class="hljs-keyword">else</span> {
            tab[index + bit] = hiHead;
            <span class="hljs-keyword">if</span> (loHead != <span class="hljs-literal">null</span>)
                hiHead.treeify(tab);
        }
    }
}
</code></pre>
<p>可以看到，该方法在保证结点顺序的情况下，将旧节点上的一颗树分为矮树和高树，划分的依据是<code>e.hash &amp; bit</code>，划分完之后，矮树保留在旧节点的原位，而高数则分配到原下标加上一个 offset 为旧表的长度的下标位置</p>
<h6 id="treeifybin">treeifyBin</h6>
<p>不管怎么说，我们还是开始分析树化方法：</p>
<pre><code class="hljs language-java"><span class="hljs-comment">// 树化这个hash仓位上的箱群</span>
<span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">treeifyBin</span><span class="hljs-params">(Node&lt;K,V&gt;[] tab, <span class="hljs-type">int</span> hash)</span> {
    <span class="hljs-type">int</span> n, index; Node&lt;K,V&gt; e;
    <span class="hljs-keyword">if</span> (tab == <span class="hljs-literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)
        resize();
    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((e = tab[index = (n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-literal">null</span>) {
        TreeNode&lt;K,V&gt; hd = <span class="hljs-literal">null</span>, tl = <span class="hljs-literal">null</span>;
        <span class="hljs-keyword">do</span> {
            TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="hljs-literal">null</span>);
            <span class="hljs-keyword">if</span> (tl == <span class="hljs-literal">null</span>)
                hd = p;
            <span class="hljs-keyword">else</span> {
                p.prev = tl;
                tl.next = p;
            }
            tl = p;
        } <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-literal">null</span>);
        <span class="hljs-keyword">if</span> ((tab[index] = hd) != <span class="hljs-literal">null</span>)
            hd.treeify(tab);
    }
}
</code></pre>
<p>直接开始分析<code>line:6-17</code>，这里有许多指针需要一一分析，整体的操作就是对这条链进行遍历，同时将普通箱子变成树箱（树化）：</p>
<ul>
<li><strong>e</strong>代表当前遍历到的普通箱子；</li>
<li><strong>hd</strong>代表当前链箱的第一个箱子，head 箱子，始终指向箱群的第一个箱子；</li>
<li><strong>tl</strong>代表转换为树箱群之后中的某一个树箱；</li>
<li><strong>p</strong>代表将<strong>e</strong>箱子树化之后得到的数箱子；</li>
</ul>
<p>其实观察两轮<code>do{}</code>操作之后，就比较清晰了，只关心树箱子中的<strong>prev</strong>和<strong>next</strong>指针的话，这顿操作就只是把原来的单项链表 copy 为一个双向链表，结点之间有<strong>prev</strong>和<strong>next</strong>的关系，原来只有<strong>next</strong>，然后每个<code>Node</code>换成了<code>TreeNode</code>而已；</p>
<p>然后拿着<strong>hd</strong>和<strong>tab</strong>，调用<code>treeify</code>方法，将这条链变成树，由于树化是选择<strong>红黑树</strong>去做，所以<strong>tab</strong>这个仓位的第一个树箱子不一定是<strong>hd</strong>原来指的那个箱子；关于这个方法，就不继续往下分析了，涉及到很多红黑树的知识，但是：<strong>正是因为红黑树的原因，红黑树的查找、插入、删除的时间复杂度最坏为 O(log n)！</strong></p>
<blockquote>
<p><em>参考：</em></p>
<ul>
<li><a href="http://www.cnblogs.com/skywang12345/p/3245399.html">http://www.cnblogs.com/skywang12345/p/3245399.html</a></li>
<li><a href="https://blog.csdn.net/v_JULY_v/article/details/6105630">https://blog.csdn.net/v_JULY_v/article/details/6105630</a></li>
</ul>
</blockquote>
<p>这里要特别留心！<strong>树化过后的箱群，还保有原来的链箱群的 prev 和 next 的关系！为了方便直接在 prev 和 next 的关系上直接进行逆树化！</strong></p>
<h4 id="remove">remove</h4>
<p>同理引出 removeNode</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> V <span class="hljs-title function_">remove</span><span class="hljs-params">(Object key)</span> {
    Node&lt;K,V&gt; e;
    <span class="hljs-keyword">return</span> (e = removeNode(hash(key), key, <span class="hljs-literal">null</span>, <span class="hljs-literal">false</span>, <span class="hljs-literal">true</span>)) == <span class="hljs-literal">null</span> ?
        <span class="hljs-literal">null</span> : e.value;
}
</code></pre>
<h5 id="removenode">removeNode</h5>
<pre><code class="hljs language-java"><span class="hljs-keyword">final</span> Node&lt;K,V&gt; <span class="hljs-title function_">removeNode</span><span class="hljs-params">(<span class="hljs-type">int</span> hash, Object key, Object value,
                           <span class="hljs-type">boolean</span> matchValue, <span class="hljs-type">boolean</span> movable)</span> {
    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="hljs-type">int</span> n, index;
    <span class="hljs-keyword">if</span> ((tab = table) != <span class="hljs-literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="hljs-number">0</span> &amp;&amp;
        (p = tab[index = (n - <span class="hljs-number">1</span>) &amp; hash]) != <span class="hljs-literal">null</span>) {
        Node&lt;K,V&gt; node = <span class="hljs-literal">null</span>, e; K k; V v;
        <span class="hljs-keyword">if</span> (p.hash == hash &amp;&amp;
            ((k = p.key) == key || (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k))))
            node = p;
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((e = p.next) != <span class="hljs-literal">null</span>) {
            <span class="hljs-keyword">if</span> (p <span class="hljs-keyword">instanceof</span> TreeNode)
                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);
            <span class="hljs-keyword">else</span> {
                <span class="hljs-keyword">do</span> {
                    <span class="hljs-keyword">if</span> (e.hash == hash &amp;&amp;
                        ((k = e.key) == key ||
                         (key != <span class="hljs-literal">null</span> &amp;&amp; key.equals(k)))) {
                        node = e;
                        <span class="hljs-keyword">break</span>;
                    }
                    p = e;
                } <span class="hljs-keyword">while</span> ((e = e.next) != <span class="hljs-literal">null</span>);
            }
        }
        <span class="hljs-keyword">if</span> (node != <span class="hljs-literal">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||
                             (value != <span class="hljs-literal">null</span> &amp;&amp; value.equals(v)))) {
            <span class="hljs-keyword">if</span> (node <span class="hljs-keyword">instanceof</span> TreeNode)
                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="hljs-built_in">this</span>, tab, movable);
            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (node == p)
                tab[index] = node.next;
            <span class="hljs-keyword">else</span>
                p.next = node.next;
            ++modCount;
            --size;
            afterNodeRemoval(node);
            <span class="hljs-keyword">return</span> node;
        }
    }
    <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
}
</code></pre>
<p>经过 get 和 put 的洗礼之后，再看其他的单元素基础操作就比较流畅了，概括一下<code>removeNode</code>到底发生了什么：</p>
<p>观察<strong>node</strong>这一个变量就好了，它代表在表中是否找到你想要删除的那个箱子，如果找到就赋值为这个箱子，否则就为空</p>
<ol>
<li>首先秒找到仓位（hash 映射到数组下标），然后判断仓位上第一个箱子是否是要找的，是就赋值给<strong>node</strong></li>
<li>如果仓位第一个箱子不是要删除的，那么就继续，如果是树箱子就调用树结构的查找箱子的方法，链箱子就往链尾摸，找到就算</li>
<li>如果找到这么一个<strong>node</strong>，并且这个<strong>node</strong>箱子是树箱子，那么就按照红黑树的删除结点规则去删除，否则就简单的链式删除</li>
</ol>
<p>值得注意的是，<code>line:28</code>的<code>removeTreeNode</code>方法会导致：<strong>逆树化</strong>，也就是说树箱群已经小于逆树化的阈值了，这时候就要让<strong>树箱群</strong>逆树化为<strong>链箱群</strong></p>
<p>至于逆树化也非常简单，因为树化的时候还保留<strong>prev</strong>和<strong>next</strong>关系，所以直接顺着<strong>next</strong>去替换结点结构就行了</p>
<h3 id="总结">总结</h3>
<p>主要也是好好了解了一下<code>HashMap</code>在存储结构上的特点，再细致的性能方面的分析，目前还没精力研究，其他方法比如<code>containsValue(Object value)</code>、<code>remove(Object key, Object value)</code>、<code>replace(K key, V oldValue, V newValue)</code>，处理思路都大同小异</p>
<p>本篇关键分析了如下几点：</p>
<ul>
<li>HashMap 的存储条件</li>
<li>主仓是什么？链箱子是什么？树箱子是什么？到底是什么结构？</li>
<li>什么时候树化？树化分几步？什么时候逆树化？</li>
<li>扩容阈值、树化阈值是什么？分别有什么用？负载因子又是什么？</li>
</ul>
<p><strong>HashMap 的存储条件：</strong> <strong>KEY</strong>需要实现<code>hashcode</code>和<code>equals</code>方法，前者用来找仓位，后者用来判断是否键冲突！<code>hashcode</code>冲突意味着存储位置的冲突，这对容器的使用者是透明的，使用者不必关心，而<code>equals</code>冲突意味着容器使用者试图替换掉他规定的键上的值！</p>
<p><strong>主仓：</strong>就是容器的主干，也就是 Node 数组，主仓上的每一个位置是仓位，注释中多次以 bucket（桶）去描述这个概念；</p>
<p><strong>链箱子：</strong>就是一般的链式结点，每个仓位上一开始放的就是链箱子；</p>
<p><strong>树箱子：</strong>就是红黑树的一个结点，当这个仓位存放超过 8 个链箱子的时候，这个<strong>链箱群</strong>就会转变为<strong>树箱群</strong>，树箱群中每一个箱子都是红黑树结点；</p>
<p><strong>树化时机：</strong>有一个静态变量——**树化阈值<code>TREEIFY_THRESHOLD</code>**做参考，值为 8，时机如上；</p>
<p><strong>树化步骤：</strong>将链箱群中的链箱结点替换为树箱结点，这时候还是一条链式结构，然后将这个链式结构转换为一个树结构<code>treeify</code>方法；</p>
<p><strong>逆树化：</strong>当树箱群箱子数少于<code>UNTREEIFY_THRESHOLD</code>，也就是 6 的时候，就会逆树化；</p>
<p><strong>扩容阈值（threshold）：</strong>这个值默认是容量的 0.75 倍，最好也是容量的 0.75 倍，当容器载量超过这个值的时候，比如 1024 的 0.75，容器就需要<code>resize()</code>扩容两倍；</p>
<p><strong>负载因子（load factor）：</strong>默认是 0.75，它表示 HashMap 能在当前容量高效工作的最大载量和容量值比，载量和容量之比如果达到负载因子，那么就需要扩容</p>
<h3 id="源码分析好文索引">源码分析好文索引</h3>
<ul>
<li>JDK1.7HashMap 分析：<a href="https://www.cnblogs.com/xrq730/p/5030920.html">https://www.cnblogs.com/xrq730/p/5030920.html</a></li>
<li>JDK1.8HashMap 分析：<a href="http://www.importnew.com/20386.html">http://www.importnew.com/20386.html</a></li>
</ul>
