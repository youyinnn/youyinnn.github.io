<h3 id="iterable-接口">Iterable 接口</h3>
<p>含义: 这个接口的含义是, 容器的元素是否支持<strong>迭代器</strong>访问</p>
<h4 id="源码">源码</h4>
<pre><code class="hljs language-java"><span class="hljs-comment">/**
 * 实现这个接口, 意味着对象可以使用forEach循环进行操作
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Iterable</span>&lt;T&gt; {
    <span class="hljs-comment">/**
     * 返回一个迭代器
     */</span>
    Iterator&lt;T&gt; <span class="hljs-title function_">iterator</span><span class="hljs-params">()</span>;

    <span class="hljs-comment">/**
     * (1)和lambda有关, 执行这个方法等效于
     *  for (E element : collection) {
     *      //对e进行每一个action操作
     *  }
     */</span>
    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">forEach</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-built_in">super</span> T&gt; action)</span> {
        Objects.requireNonNull(action);
        <span class="hljs-keyword">for</span> (T t : <span class="hljs-built_in">this</span>) {
            action.accept(t);
        }
    }

    <span class="hljs-comment">/**
     * (1)返回一个源迭代器的子集迭代器, 这个子集迭代器可以迭代指定部分的源集合的元素
     * (2)意思是返回一个阉割版的迭代器.
     * (3)关键是Spliterator&lt;T&gt;这个接口, 默认的情况下, 这个方法并不阉割迭代器.
     * 具体作用暂未摸索到, 以后再回来看看.
     */</span>
    <span class="hljs-keyword">default</span> Spliterator&lt;T&gt; <span class="hljs-title function_">spliterator</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> Spliterators.spliteratorUnknownSize(iterator(), <span class="hljs-number">0</span>);
    }
}
</code></pre>
<h3 id="iterator-接口">Iterator 接口</h3>
<p>含义: 实现这个接口的类就是某个容器的<strong>迭代器</strong>, 这个概念的意思是, 我可以持有一个<strong>迭代器</strong>去遍历容器中的元素.</p>
<h4 id="源码-1">源码</h4>
<pre><code class="hljs language-java"><span class="hljs-comment">/**
 * 源代码不多 所以去掉了很多注释就贴出来了
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt; {

    <span class="hljs-comment">/**
     * 如果当次迭代还有下一个元素 就返回true 否则返回false
     */</span>
    <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span>;

    <span class="hljs-comment">/**
     * (1)获取下一个元素, 并且指针下移一次
     * (2)如果迭代器没有下一个元素, 仍要强行调用该方法, 则会抛出
     *
     * <span class="hljs-doctag">@throws</span> NoSuchElementException 这个异常
     */</span>
    E <span class="hljs-title function_">next</span><span class="hljs-params">()</span>;

    <span class="hljs-comment">/**
     * (1)移除元素
     * (2)这个方法会抛出两种异常:
     *  1)必须至少调用一次next方法, 且不能是最后一次next方法调用完之后, 才能调用remove, 否则抛出<span class="hljs-doctag">@throws</span> IllegalStateException
     *  2)如果没有自己的实现, 则调用默认方法, 默认就是不支持remove方法, 所以会抛出<span class="hljs-doctag">@throws</span> UnsupportedOperationException
     */</span>
    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UnsupportedOperationException</span>(<span class="hljs-string">&quot;remove&quot;</span>);
    }

    <span class="hljs-comment">/**
     * (1)这个方法用于执行对Collection里所有元素的遍历, 每次遍历都对元素执行一遍action, 对于Consumer, 这个是1.8的特性, lambda语法糖的一些特性, 这块是对于forEach循环增强的方法.
     * (2)对于这个方法到底在哪里用到, 以后看读源码的时候是否会再遇到它吧.
     */</span>
    <span class="hljs-keyword">default</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">forEachRemaining</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-built_in">super</span> E&gt; action)</span> {
        Objects.requireNonNull(action);
        <span class="hljs-keyword">while</span> (hasNext())
            action.accept(next());
    }
}
</code></pre>
<h4 id="foreachremaining-引例">forEachRemaining 引例</h4>
<blockquote>
<p>待补充</p>
</blockquote>
<h3 id="listiterator">ListIterator</h3>
<p>比一般的迭代器要厉害</p>
<pre><code class="hljs language-java"><span class="hljs-comment">/**
 * 实现这个接口，意味着你的迭代器可以允许正向逆向地遍历list
 * 在过程中你甚至可以获取当前迭代的index，甚至是修改元素
 */</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">ListIterator</span>&lt;E&gt; <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Iterator</span>&lt;E&gt; {

    <span class="hljs-comment">// 查询操作</span>
    <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasNext</span><span class="hljs-params">()</span>;

    E <span class="hljs-title function_">next</span><span class="hljs-params">()</span>;

    <span class="hljs-comment">// 这个是前向询问是否有元素</span>
    <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasPrevious</span><span class="hljs-params">()</span>;

    <span class="hljs-comment">// 这是前向访问元素 作用和next()相反</span>
    E <span class="hljs-title function_">previous</span><span class="hljs-params">()</span>;

    <span class="hljs-comment">// 一个是获取后向index 一个是前向</span>
    <span class="hljs-type">int</span> <span class="hljs-title function_">nextIndex</span><span class="hljs-params">()</span>;
    <span class="hljs-type">int</span> <span class="hljs-title function_">previousIndex</span><span class="hljs-params">()</span>;

    <span class="hljs-comment">// 修改操作</span>
    <span class="hljs-keyword">void</span> <span class="hljs-title function_">remove</span><span class="hljs-params">()</span>;

    <span class="hljs-keyword">void</span> <span class="hljs-title function_">set</span><span class="hljs-params">(E e)</span>;

    <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(E e)</span>;
}
</code></pre>
