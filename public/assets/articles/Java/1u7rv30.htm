<h3 id="introduction">Introduction</h3>
<p>我们对 Lock 和 AQS 有了一定的了解了之后，可以尝试着接触一些 Lock+AQS 的基本实现了，本篇会了解到最基本的同步组件<code>ReentrantLock</code>和<code>ReentrantReadWriteLock</code>，前者提供了排他锁的实现，并且支持重入，后者在前者的基础上，支持锁的分级，写锁排他读锁共享。特别的，重入锁的获取还有公平和非公平之分，我们先从这部分入手。</p>
<h4 id="fair-lock--nonfair-lock">Fair Lock &amp; Nonfair Lock</h4>
<p>公平锁：锁的获取次序和请求锁的时间顺序一致，即在绝对的时间里，等待时间越久的线程越先获取到锁。</p>
<p>非公平锁：锁的获取和瞬间的竞争有关，一瞬间谁运气好就能获取到锁，而且锁的获取即同步状态的获取，刚获取到同步状态的线程，再次获取到状态的机会比较大。</p>
<p>说明：虽然非公平锁可能会造成“饥饿”情况，但是大多数情况下还是非公平锁用的多，因为公平锁在释放锁又再获取锁的时候，总是会<strong>切换线程</strong>，而非公平锁一段时间内很可能总是那一个线程不停放锁持锁，<strong>线程切换的开销小就意味着——吞吐量大</strong></p>
<p>再说多一点，公平性和非公平性是<strong>“针对未入队结点”</strong>和<strong>“已入队结点”</strong>而言，上一篇文章已经提到过，<strong>同步队列</strong>中的结点都是公平获取锁的，遵从 FIFO，至于具体的体现，继续往下读，读到 FairSync 的<code>tryAcquire</code>和<code>hasQueuedPredecessors</code>方法就知道了</p>
<h4 id="reentrantlock">ReentrantLock</h4>
<p>重入锁可以通过构造器来决定公平机制，默认是非公平锁：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantLock</span><span class="hljs-params">()</span> {
    sync = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();
}
<span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantLock</span><span class="hljs-params">(<span class="hljs-type">boolean</span> fair)</span> {
    sync = fair ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">FairSync</span>() : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();
}
</code></pre>
<p>ReentrantLock 中有 3 个简单的内部类，<code>FairSync</code>/<code>NonfairSync</code>以及<code>Sync</code>，后者是前两个的父类，</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> {
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">5179523762034025860L</span>;

    <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span>;

    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">nonfairTryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> {
        <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();
        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();
        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) {
            <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, acquires)) {
                setExclusiveOwnerThread(current);
                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
            }
        }
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) {
            <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c + acquires;
            <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// overflow</span>
                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);
            setState(nextc);
            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
        }
        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
    }

    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> {
        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState() - releases;
        <span class="hljs-keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalMonitorStateException</span>();
        <span class="hljs-type">boolean</span> <span class="hljs-variable">free</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;
        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) {
            free = <span class="hljs-literal">true</span>;
            setExclusiveOwnerThread(<span class="hljs-literal">null</span>);
        }
        setState(c);
        <span class="hljs-keyword">return</span> free;
    }

    <span class="hljs-comment">// other method..</span>
}
</code></pre>
<p>一个抽象的 lock 方法，以及一个非公平的<code>tryAcquire</code>和<code>tryRelease</code>，可以在这看到，在重入锁中：<strong>state 代表占锁的线程重入次数（用层数应该更好理解）</strong></p>
<p>观察<code>nonfairTryAcquire</code>方法，当 state 为 0 的时候，代表没有线程获取到锁，但是同时可能有多个线程在竞争同步状态，所以使用 CAS 来设置 state，设置成功的线程会设置 AQS 的独占线程为当前线程，此时 state 为 1；下次再来的时候，如果是自己获取自己，那么现在的 state 加上 aquire 数量，设置为新的 state，并且此时没有竞争，所以常规设置 state 即可；</p>
<p>即在某一绝对时刻，如果 state 为 0，任何线程都能够和同步队列中的头结点竞争 state，一旦竞争到了就获取到了锁，不用入队；</p>
<p>观察<code>tryRelease</code>方法，如果不是持锁线程掉用的话，则什么都不干，否则现在的 state 减去 releases 数量，直到为 0 的时候，才移除 AQS 的独占线程；</p>
<p>再来看看<code>Sync</code>的子类之一：<code>NonfairSync</code></p>
<pre><code class="hljs language-java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> {
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> <span class="hljs-number">7316153563782823691L</span>;

    <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">if</span> (compareAndSetState(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>))
            setExclusiveOwnerThread(Thread.currentThread());
        <span class="hljs-keyword">else</span>
            acquire(<span class="hljs-number">1</span>);
    }

    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> {
        <span class="hljs-keyword">return</span> nonfairTryAcquire(acquires);
    }
}
</code></pre>
<p>非常简单的实现，并且在<code>lock</code>方法中会尝试一次快速地获取同步状态，获取到就贼赚，获取不到就乖乖<code>acquire</code> 去，<code>tryAcquire</code>则是直接调用父类提供的非公平<code>nonfairTryAcquire</code>，如果获取不到，下场一样是进入同步队列尾部排队</p>
<p>最后是<code>FairSync</code></p>
<pre><code class="hljs language-java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> {
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">3000897897090466540L</span>;

    <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> {
        acquire(<span class="hljs-number">1</span>);
    }

    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> {
        <span class="hljs-keyword">final</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();
        <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();
        <span class="hljs-keyword">if</span> (c == <span class="hljs-number">0</span>) {
            <span class="hljs-keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;
                compareAndSetState(<span class="hljs-number">0</span>, acquires)) {
                setExclusiveOwnerThread(current);
                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
            }
        }
        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (current == getExclusiveOwnerThread()) {
            <span class="hljs-type">int</span> <span class="hljs-variable">nextc</span> <span class="hljs-operator">=</span> c + acquires;
            <span class="hljs-keyword">if</span> (nextc &lt; <span class="hljs-number">0</span>)
                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);
            setState(nextc);
            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
        }
        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
    }
}
</code></pre>
<p>我们只需要注意到，它的<code>tryAcquire</code>方法和父类的非公平获取几乎如出一撤，仅是在 CAS 竞争之前，先要判断一下当前线程所在队列中的结点是否有前驱（<code>hasQueuedPredecessors</code>），如果没有就可以开始 CAS 获取，保证总是最早入队的结点有权获取同步状态；</p>
<p>我们再深入一下<code>hasQueuedPredcessors</code></p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">hasQueuedPredecessors</span><span class="hljs-params">()</span> {
    <span class="hljs-comment">// The correctness of this depends on head being initialized</span>
    <span class="hljs-comment">// before tail and on head.next being accurate if the current</span>
    <span class="hljs-comment">// thread is first in queue.</span>
    <span class="hljs-type">Node</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> tail; <span class="hljs-comment">// Read fields in reverse initialization order</span>
    <span class="hljs-type">Node</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> head;
    Node s;
    <span class="hljs-keyword">return</span> h != t &amp;&amp;
        ((s = h.next) == <span class="hljs-literal">null</span> || s.thread != Thread.currentThread());
}
</code></pre>
<p>判断 head 是否等于 tail：</p>
<ol>
<li><p>若等于，则条件结束，方法返回 fasle</p>
<blockquote>
<p>等于的含义有 2 层，一是队列里没有任何结点的时候，head=tail=null，这时候方法返回 false，代表进入方法的线程是整个系统第一次访问该锁的线程，则可以获取同步状态；</p>
<p>二是队列中只有一个结点，这个结点即是 head 又是 tail；</p>
</blockquote>
</li>
<li><p>若不等于，则看 head 是否有后继：</p>
<ol>
<li>若没有后继，则条件结束，方法返回 true，回到上层方法，<code>tryAcquire</code>返回 false；</li>
<li>若有后继，如果 head 的后继不是当前线程的话，方法返回 true，回到上层方法，<code>tryAcquire</code>返回 false；</li>
<li>若有后继，且 head 后继是当前线程，则方法返回 false，回到上层方法，当前线程可以尝试获取同步状态；</li>
</ol>
</li>
</ol>
<h5 id="real-meaning-of-fair">Real meaning of &quot;fair&quot;</h5>
<p>读完上面的方法之后，接下来这句话非常重要：为什么之前说，公平性和非公平性是<strong>“针对未入队结点”</strong>和<strong>“已入队结点”</strong>而言？因为<strong>已入队的结点之间不存在竞争</strong>，竞争仅仅是队列前几个结点和未入队的新线程而言：</p>
<ul>
<li>如果是公平锁，未入队的新线程在<code>hasQueuePredecessors</code>方法之后，肯定是 false，导致<code>tryAcquire</code>方法必定返回 false，导致这个新线程必定组成结点然后入队排队，<strong>即不入队的线程没有参与同步资源竞争的权利</strong>；</li>
<li>如果是非公平锁，未入队的新线程有机会和已入队的一起竞争同步资源；所以才叫非公平！</li>
</ul>
<p>所以不要误解非公平锁的情况下，后排队的结点线程也能很<strong>“不公平”</strong>地比先排队的结点线程先获得同步状态，这是不可能的；</p>
<h4 id="reentrantreadwritelock">ReentrantReadWriteLock</h4>
<p>在 Lock 接口之前，我们使用等待通知的设计机制可以简单地实现一个读写场景，当写线程开始的时候，所有后续读写线程都进入等待，写操作完成之后，通知唤醒等待中的其他线程；而当有一个读线程在读取的时候，写线程进入等待；</p>
<p>基于这样的逻辑，才能避免脏读</p>
<p>所以读写锁的基本思想是：<strong>写锁的优先度高于读锁，可以多读，只能单写；</strong></p>
<p><strong>换句话说，写锁是独占锁，读锁是共享锁</strong>，而上面说的<code>ReentrantLock</code>则是排他锁，在一般场景下，读写锁的性能会比排他锁好，因为绝大部分场景是读操作远多于写操作的；</p>
<p>使用读写锁的时候，只需要在读操作的时候获取读锁，写操作的时候获取写锁就可以了，比<code>synchronized</code>关键字加等待通知方法更加简单明了</p>
<p><code>ReentrantReadWirteLock</code>是读写锁的一种，其特性如：</p>
<ul>
<li>可重入</li>
<li>公平性选择</li>
<li>遵循获取写锁、获取读锁再释放写锁的顺序，写锁可降级称为读锁</li>
</ul>
<p>另外它还提供了外部监控内部锁状态的方法：</p>
<table>
<thead>
<tr>
<th>方法</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td><code>int getReadLockCount()</code></td>
<td><strong>返回当前读锁被获取到的次数</strong>，该次数不等于获取读锁的线程数，比如仅一个线程连续重入了 n 次，则返回 n；该方法会返回<strong>所有线程持有的当前读锁的层数</strong>，比如线程 A 获取 3 次，释放 1 次，线程 B 获取 5 次释放 2 次，则该方法会返回 3-1+5-2=<strong>5 层</strong>；</td>
</tr>
<tr>
<td><code>int getReadHoldCount()</code></td>
<td><strong>返回当前线程获取到读锁的次数</strong>，该方法在 Java6 之后加入，通过<strong>ThreadLocal</strong>实现；该方法返回<strong>当前线程持有该锁的层数</strong>，比如线程 A 获取该锁 5 次释放<strong>2 层</strong>，则在 A 锁该方法返回 3，同时 B 线程获取该锁 4 次释放 4 次，则在 B 线程该方法返回<strong>0 层</strong>；</td>
</tr>
<tr>
<td><code>boolean isWirteLocked()</code></td>
<td><strong>判断写锁是否被获取到；</strong></td>
</tr>
<tr>
<td><code>int getWriteHoldCount()</code></td>
<td><strong>判断当前写锁被获取的次数；</strong></td>
</tr>
</tbody></table>
<h5 id="read-write-state-design">Read Write State Design</h5>
<p>我们来思考一下，对于一个读写锁来说，它应当将读写分离为 2 把锁，但是读写锁的排队应该排在同一队，所以读写锁的 AQS 应该是同一个实例，所以问题来了，如何在一个 AQS 实例上的一个 state 变量中表示读与写两种同步状态？老爷子给出了这样的答案：</p>
<pre class="nhi">
    int value
    |&lt;-----------------------------32------------------------------&gt;|
    ┌---------------------------------------------------------------┐
    |0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|1|
    └---------------------------------------------------------------┘
                    |                                 ↓
                    |                ┌-------------------------------┐
                    ↓                |0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|1|
    ┌-------------------------------┐└-------------------------------┘
    |0|0|0|0|0|0|0|0|0|0|0|0|0|0|1|0|               低16位表示写状态 = 3
    └-------------------------------┘
                   高16位表示读状态 = 2
</pre>

<p>通过位运算，假设当前同步状态值为 S，那么写状态就等于 S &amp; 0x0000FFFF（高 16 位清零），读状态等于 S &gt;&gt;&gt; 16（无符号补位 0 右移 16 位）</p>
<p>当写状态要增加 1 的时候，直接 S + 1，当读状态要增加 1 的是，直接 S + 0x00010000 就行</p>
<h5 id="structure">Structure</h5>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReentrantReadWriteLock</span>
        <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ReadWriteLock</span>, java.io.Serializable {

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantReadWriteLock.ReadLock readerLock;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReentrantReadWriteLock.WriteLock writerLock;
    <span class="hljs-keyword">final</span> Sync sync;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantReadWriteLock</span><span class="hljs-params">()</span> {<span class="hljs-built_in">this</span>(<span class="hljs-literal">false</span>);}
    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ReentrantReadWriteLock</span><span class="hljs-params">(<span class="hljs-type">boolean</span> fair)</span> {
        sync = fair ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">FairSync</span>() : <span class="hljs-keyword">new</span> <span class="hljs-title class_">NonfairSync</span>();
        readerLock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReadLock</span>(<span class="hljs-built_in">this</span>);
        writerLock = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WriteLock</span>(<span class="hljs-built_in">this</span>);
    }

    <span class="hljs-keyword">public</span> ReentrantReadWriteLock.WriteLock <span class="hljs-title function_">writeLock</span><span class="hljs-params">()</span> { <span class="hljs-keyword">return</span> writerLock; }
    <span class="hljs-keyword">public</span> ReentrantReadWriteLock.ReadLock  <span class="hljs-title function_">readLock</span><span class="hljs-params">()</span>  { <span class="hljs-keyword">return</span> readerLock; }

    <span class="hljs-comment">// ...</span>
}
</code></pre>
<p>这是重入读写锁的整体结构，可以看到 ReentrantReadWriteLock 仅仅只是实现了 ReadWriteLock 接口而已，这个接口仅定义了获取 ReadLock 和 WriteLock 的方法，真正的锁实现是<code>ReentrantReadWriteLock.ReadLock</code>和<code>ReentrantReadWriteLock.WriteLock</code>，而这两个锁实现，用的是同一个<code>Sync</code>实例，<code>Sync</code>实例即实现了 AQS 的公平锁或者非公平锁</p>
<h5 id="fair--nonfair">Fair &amp; NonFair</h5>
<p>我们先来看非公平锁和公平锁的实现：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">NonfairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> {
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">8159625535654395037L</span>;
    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">writerShouldBlock</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>; <span class="hljs-comment">// writers can always barge</span>
    }
    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">readerShouldBlock</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> apparentlyFirstQueuedIsExclusive();
    }
}

<span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FairSync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Sync</span> {
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">serialVersionUID</span> <span class="hljs-operator">=</span> -<span class="hljs-number">2274990926593161451L</span>;
    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">writerShouldBlock</span><span class="hljs-params">()</span> {<span class="hljs-keyword">return</span> hasQueuedPredecessors();}
    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">readerShouldBlock</span><span class="hljs-params">()</span> {<span class="hljs-keyword">return</span> hasQueuedPredecessors();}
}
</code></pre>
<p>读写锁中的公平性主要体现在是否要阻塞读写线程这方面，对于公平锁而言，无论读写线程，都要判断<code>hasQueeudPredecessors</code>这个方法我们上面讲过了，关键是非公平锁，对于写锁是否应该 block 来说，它总是不应该被 block 住，而读锁则需要判断<code>apparentlyFirstQueuedIsExclusive</code>方法，</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">apparentlyFirstQueuedIsExclusive</span><span class="hljs-params">()</span> {
    Node h, s;
    <span class="hljs-keyword">return</span> (h = head) != <span class="hljs-literal">null</span> &amp;&amp;
        (s = h.next)  != <span class="hljs-literal">null</span> &amp;&amp;
        !s.isShared()         &amp;&amp;
        s.thread != <span class="hljs-literal">null</span>;
}
</code></pre>
<p>如果队列中的第一个等待结点明显是是独占式锁的结点的话，就返回 true，两个方法连起来的意思是，如果队列中的第一个结点是写锁（独占锁）的话，读锁应该被 Block 住</p>
<h5 id="sync-in-reentrantreadwritelock">Sync in ReentrantReadWriteLock</h5>
<pre><code class="hljs language-java"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sync</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AbstractQueuedSynchronizer</span> {
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SHARED_SHIFT</span>   <span class="hljs-operator">=</span> <span class="hljs-number">16</span>;
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">SHARED_UNIT</span>    <span class="hljs-operator">=</span> (<span class="hljs-number">1</span> &lt;&lt; SHARED_SHIFT);
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MAX_COUNT</span>      <span class="hljs-operator">=</span> (<span class="hljs-number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="hljs-number">1</span>;
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">EXCLUSIVE_MASK</span> <span class="hljs-operator">=</span> (<span class="hljs-number">1</span> &lt;&lt; SHARED_SHIFT) - <span class="hljs-number">1</span>;

    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sharedCount</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span>    { <span class="hljs-keyword">return</span> c &gt;&gt;&gt; SHARED_SHIFT; }
    <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">exclusiveCount</span><span class="hljs-params">(<span class="hljs-type">int</span> c)</span> { <span class="hljs-keyword">return</span> c &amp; EXCLUSIVE_MASK; }

    Sync() {
        readHolds = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadLocalHoldCounter</span>();
        setState(getState()); <span class="hljs-comment">// ensures visibility of readHolds</span>
    }

    <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">readerShouldBlock</span><span class="hljs-params">()</span>;
    <span class="hljs-keyword">abstract</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">writerShouldBlock</span><span class="hljs-params">()</span>;

    <span class="hljs-comment">// .. HolderCounter 相关方法暂时略</span>

    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryRelease</span><span class="hljs-params">(<span class="hljs-type">int</span> releases)</span> {
        <span class="hljs-comment">// ..</span>
    }
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> {
        <span class="hljs-comment">// ..</span>
    }
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReleaseShared</span><span class="hljs-params">(<span class="hljs-type">int</span> unused)</span> {
        <span class="hljs-comment">// ..</span>
    }
    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> unused)</span> {
        <span class="hljs-comment">// ..</span>
    }
    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">fullTryAcquireShared</span><span class="hljs-params">(Thread current)</span> {
        <span class="hljs-comment">// ..</span>
    }
    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryWriteLock</span><span class="hljs-params">()</span> {
        <span class="hljs-comment">// ..</span>
    }
    <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryReadLock</span><span class="hljs-params">()</span> {
        <span class="hljs-comment">// ..</span>
    }

    <span class="hljs-comment">// .. 锁状态 相关方法暂时略</span>

    <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getCount</span><span class="hljs-params">()</span> { <span class="hljs-keyword">return</span> getState(); }
}
</code></pre>
<p>重入读写锁中的<code>Sync</code>类提供的功能比较多，它同时实现了读锁和写锁的管理操作，我们先分析这部分，略去的部分我在注释中说明了</p>
<p>读写状态的管理就是通过位运算去实现的，读写锁的层数也是通过位运算 state 变量算出来的，这里不再赘述；写锁的 tryRelease 方法和<code>ReentrantLock</code>基本一致；</p>
<p>我们接着看写锁的 try：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryAcquire</span><span class="hljs-params">(<span class="hljs-type">int</span> acquires)</span> {
    <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();
    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();
    <span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> exclusiveCount(c);
    <span class="hljs-keyword">if</span> (c != <span class="hljs-number">0</span>) {
        <span class="hljs-comment">// (Note: if c != 0 and w == 0 then shared count != 0)</span>
        <span class="hljs-keyword">if</span> (w == <span class="hljs-number">0</span> || current != getExclusiveOwnerThread())
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        <span class="hljs-keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)
            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;Maximum lock count exceeded&quot;</span>);
        <span class="hljs-comment">// Reentrant acquire</span>
        setState(c + acquires);
        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
    }
    <span class="hljs-keyword">if</span> (writerShouldBlock() ||
        !compareAndSetState(c, c + acquires))
        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
    setExclusiveOwnerThread(current);
    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
}
</code></pre>
<p>老爷子特地写下了一段 WalkThrough 注释，指出了本方法要处理的情况：</p>
<ol>
<li>如果读写状态都不为零，且当前线程不是该 AQS 的独占线程，则不能获取写锁；</li>
<li>如果状态满值了，也获取不了写锁；</li>
<li>如果不是上面 2 种情况，则该线程应该在公平性的指导下<code>writerShouldBlock</code>合法竞争独占锁；</li>
</ol>
<p>再来看读锁的，再看读锁之前，我们要了解一下<code>Sync</code>的几个变量和类：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HoldCounter</span> {
    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
    <span class="hljs-comment">// Use id, not reference, to avoid garbage retention</span>
    <span class="hljs-keyword">final</span> <span class="hljs-type">long</span> <span class="hljs-variable">tid</span> <span class="hljs-operator">=</span> getThreadId(Thread.currentThread());
}

<span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadLocalHoldCounter</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">ThreadLocal</span>&lt;HoldCounter&gt; {
    <span class="hljs-keyword">public</span> HoldCounter <span class="hljs-title function_">initialValue</span><span class="hljs-params">()</span> {<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HoldCounter</span>();}
}

<span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> ThreadLocalHoldCounter readHolds;

<span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> HoldCounter cachedHoldCounter;

<span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">Thread</span> <span class="hljs-variable">firstReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;
<span class="hljs-keyword">private</span> <span class="hljs-keyword">transient</span> <span class="hljs-type">int</span> firstReaderHoldCount;
</code></pre>
<p>有一个<code>HoldCounter</code>类，用于存储每个线程自己的读层数，然后通过 ThreadLocal 来管理</p>
<ul>
<li><code>readHolds</code>：一个 ThreadLocal 实例，保存了所有读线程的 HoldCounter</li>
<li><code>cachedHoldCounter</code>：表示最后一个成功 acquire 到 readLock 的线程的 holdCount</li>
<li><code>firstReader</code>：是第一个 acquire 到读锁的线程</li>
<li><code>firstReaderHoldCount</code>：是<code>firstReader</code>的 holdCount</li>
</ul>
<p>然后是读 try：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-title function_">tryAcquireShared</span><span class="hljs-params">(<span class="hljs-type">int</span> unused)</span> {
    <span class="hljs-type">Thread</span> <span class="hljs-variable">current</span> <span class="hljs-operator">=</span> Thread.currentThread();
    <span class="hljs-type">int</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> getState();
    <span class="hljs-keyword">if</span> (exclusiveCount(c) != <span class="hljs-number">0</span> &amp;&amp;
        getExclusiveOwnerThread() != current)
        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;
    <span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> sharedCount(c);
    <span class="hljs-keyword">if</span> (!readerShouldBlock() &amp;&amp;
        r &lt; MAX_COUNT &amp;&amp;
        compareAndSetState(c, c + SHARED_UNIT)) {
        <span class="hljs-keyword">if</span> (r == <span class="hljs-number">0</span>) {
            firstReader = current;
            firstReaderHoldCount = <span class="hljs-number">1</span>;
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (firstReader == current) {
            firstReaderHoldCount++;
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-type">HoldCounter</span> <span class="hljs-variable">rh</span> <span class="hljs-operator">=</span> cachedHoldCounter;
            <span class="hljs-keyword">if</span> (rh == <span class="hljs-literal">null</span> || rh.tid != getThreadId(current))
                cachedHoldCounter = rh = readHolds.get();
            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (rh.count == <span class="hljs-number">0</span>)
                readHolds.set(rh);
            rh.count++;
        }
        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
    }
    <span class="hljs-keyword">return</span> fullTryAcquireShared(current);
}
</code></pre>
<p>WalkThrough：</p>
<ol>
<li>如果写锁被其它线程获取了，则不能获取读锁；</li>
<li>否则就在公平性的指导下<code>writerShouldBlock</code>，如果允许竞争，则判断是否超量读，如果没超量，则尝试 CAS 设置读状态，这三个条件过了之后，line:11~line:24 是快速地进行 tryAcquireShared，它并没有检查重入情况下的 acquire，所以它将完整地 holdCount 检查等工作推迟到了<code>fullTryAcquireShared</code>中去了，因为典型的情况下都是非重入地使用；</li>
<li>如果前 2 步都不对，那么就开始完整的<code>fullTryAcquireShared</code>，它将会处理之前的 CAS 失败，已经第二步没有处理好的读重入的情况；</li>
</ol>
<p>关于<code>fullTryAcquireShared</code>的更详细的逻辑，我觉得比较复杂，不太想深究，到此为止</p>
<p>最后回到<code>Sync</code>类最后 2 个方法：</p>
<ul>
<li><code>tryWriteLock</code>：和<code>tryAcquire</code>相比仅仅少了<code>writerShouldBlock</code></li>
<li><code>tryReadLock</code>：和<code>tryAcquire</code>相比仅仅少了<code>readerShouldBlock</code></li>
</ul>
<h5 id="readlock--writelock-in-reentrantreadwirtelock">ReadLock &amp; WriteLock in ReentrantReadWirteLock</h5>
<p>大致读下了上面的<code>Sync</code>之后，剩下的<code>ReadLock </code>&amp; <code>WriteLock </code>其实就很简单了</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Lock</span>, java.io.Serializable {
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync;
    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">ReadLock</span><span class="hljs-params">(ReentrantReadWriteLock lock)</span> {
        sync = lock.sync;
    }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> {sync.acquireShared(<span class="hljs-number">1</span>);}
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">()</span> {<span class="hljs-keyword">return</span> sync.tryReadLock();}
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> {sync.releaseShared(<span class="hljs-number">1</span>);}

    <span class="hljs-comment">// 其余release、中断acquire、超时、状态相关方法略</span>
}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WriteLock</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Lock</span>, java.io.Serializable {
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Sync sync;
    <span class="hljs-keyword">protected</span> <span class="hljs-title function_">WriteLock</span><span class="hljs-params">(ReentrantReadWriteLock lock)</span> {
        sync = lock.sync;
    }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">lock</span><span class="hljs-params">()</span> {sync.acquire(<span class="hljs-number">1</span>);}
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">tryLock</span><span class="hljs-params">()</span> {<span class="hljs-keyword">return</span> sync.tryWriteLock();}
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unlock</span><span class="hljs-params">()</span> {sync.release(<span class="hljs-number">1</span>);}

    <span class="hljs-comment">// 其余release、中断acquire、超时、状态相关方法略</span>
}
</code></pre>
<h5 id="write-lock-degradation">Write Lock Degradation</h5>
<p>虽然写锁在被某一个线程持有的时候，其他线程的读锁请求和写锁请求都会被阻塞，但是同一线程的读写锁请求是不会被阻塞的；</p>
<p>而读写锁中的<strong>锁降级</strong>是指：同一个线程在持有写锁的情况下，同时获取读锁，再释放写锁；</p>
<p>这样做是<strong>保证数据可见性</strong>，因为当 A 线程在持有写锁的时候，这时候其他线程的读写操请求都会被阻塞，这时候 A 线程再获取读锁然后释放写锁，那么在 A 线程持有读锁的情况下，A 线程最后一次修改过的数据就对其他线程可见（其他线程的读请求会被唤醒）</p>
<pre><code class="hljs language-java">readLock.unLock();
writeLock.lock();
<span class="hljs-keyword">try</span>{
    <span class="hljs-comment">// update</span>
    data.update();
    readLock.lock();
} <span class="hljs-keyword">finally</span> {
    writeLoce.unLock();
}
</code></pre>
<h3 id="conclusion">Conclusion</h3>
<p>上一篇文章我们在分析<code>SynchronizedQueue</code>的时候同时也分析了共享式获取和释放等方法，这些方法就是就是给读写锁来实现写锁的</p>
<p>关于重入锁和读写锁的原理方面，我觉得要注意以下几点：</p>
<ol>
<li><code>Lock</code>接口、<code>AbstractSynchronizedQueue</code>的关系；</li>
<li>CAS 更改 State；</li>
<li>同步队列的原理<ol>
<li>结构；</li>
<li>自旋、等待；</li>
<li>共享式锁的**<em>Propagation</em>**；</li>
</ol>
</li>
<li>锁重入的过程；</li>
<li>公平/非公平的原理；</li>
<li>读锁写锁的工作流程于应用设计；</li>
<li>写锁的降级；</li>
</ol>
<p>虽然<em>《艺术》</em>书上没有关于读写锁的更多源码讲解，但是有了之前重入锁的讲解分析经历，还是能自己把读写锁的源码分析了一遍</p>
