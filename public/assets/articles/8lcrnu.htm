<h3 id="前言">前言</h3>
<p>这篇记录下从今天开始，复习到、新遇到的所有算法题</p>
<ul>
<li>栈相关</li>
<li>数学逻辑相关</li>
</ul>
<hr>
<h4 id="栈相关">栈相关</h4>
<h5 id="汉诺塔（递归方法）">汉诺塔（递归方法）</h5>
<h6 id="c-语言实现">C 语言实现</h6>
<pre><code class="hljs language-c"><span class="hljs-type">void</span> <span class="hljs-title function_">hanoi</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">char</span> source, <span class="hljs-type">char</span> help, <span class="hljs-type">char</span> target)</span> {
    <span class="hljs-comment">// 讲塔座上按照直径大小自上而下编号为1到n的n个圆盘按规则搬到塔座target上，help做辅助塔</span>
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) {
        move(source, <span class="hljs-number">1</span>, target);
    } <span class="hljs-keyword">else</span> {
        hanoi(n<span class="hljs-number">-1</span>, source, target, help);	<span class="hljs-comment">// 将要搬离的n个盘中的前n-1个盘搬到help塔上，用target塔为辅助</span>
        move(source, n, target);			<span class="hljs-comment">// 将编号为n的盘移动到target塔上</span>
        hanoi(n<span class="hljs-number">-1</span>, help, source, target);	<span class="hljs-comment">// 将之前的放在help塔上的n-1个盘移动到target塔，用souece塔做辅助塔</span>
    }
}

<span class="hljs-type">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">(<span class="hljs-type">char</span> source, <span class="hljs-type">int</span> n, <span class="hljs-type">char</span> target)</span>{
    <span class="hljs-comment">// 将source塔上的盘子n搬到target塔上，移动步数加1（设置为全局变量）</span>
    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Step: %i. Move disk %i from %c to %c\n&quot;</span>, ++stepCount, n, x, z);
}
</code></pre>
<blockquote>
<p>参考：《数据结构（C 语言版）》——严蔚敏. P55</p>
</blockquote>
<hr>
<h4 id="数学逻辑相关">数学逻辑相关</h4>
<h5 id="有理数的循环节">有理数的循环节</h5>
<blockquote>
<p>两次看到这题，第一次是在某年蓝桥杯上，第二次就是昨天（2018 年 9 月 10 日）的快手笔试。如出一辙，分码未写。</p>
<p>1/7 = 0.142857142... 是个无限循环小数。任何有理数都可以表示为无限循环小数的形式。本题目要求即是：给出一个数字的循环小数表示法。</p>
<p>例如：</p>
<p>输入：
1,5</p>
<p>则输出：
0.2</p>
<p>输入：
1,7</p>
<p>则输出：</p>
<p>0.[142857]</p>
<p>输入：</p>
<p>7,6</p>
<p>则输出:</p>
<p>1.1[6]</p>
<p>用户输入的格式是：</p>
<p>整数,整数</p>
<p>每个整数范围均为：1~1000</p>
<p>程序输出两个整数做除法产生的小数或无限循环小数（循环节用方括号括起）。</p>
</blockquote>
<p>这题.....真是纯数学题，你要是不懂怎么判断循环节，那就凉了，然后就求循环嘛，然后又发现一个很尴尬的事情，余数不会求....折腾了大半天，搞定- -</p>
<p>首先我们手算 3 个例子，1/4 和 1/7 和 1/6</p>
<p><img src="../../../public/img/20180912111445.png" alt=""></p>
<p>我们每次计算的时候，<strong>都需要将余数乘以 10，再和除数取余，再进行下一轮计算，直到余数为 0 或者余数重复出现为止，与此同时我们可以记录每一轮的商</strong>；</p>
<p>比如 1/4，余数是 1，<code>(1*10)%4=2</code>，再继续<code>(2*10)%4=0</code>，算到 0 就可以截止了</p>
<p>1/7，余数是 1，<code>(1*10)%7=3</code>，<code>(3*10)%7=2</code>，<code>(2*10)%7=6</code>，<code>(6*10)%7=4</code>，<code>(4*10)%7=5``(5*10)%7=1</code>，又碰到一样的余数了，说明下一轮得到的商之前是已经求出来过的，所以已经找到循环节了；</p>
<h6 id="java-实现">Java 实现</h6>
<pre><code class="hljs language-java"><span class="hljs-comment">// resulet : k.(m1m2m3m4...mn)</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">getRepetend</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> {
    <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> a / b;
    a = a % b;
    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">msb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();
    msb.append(<span class="hljs-string">&quot;.&quot;</span>);
    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {
        <span class="hljs-type">int</span> <span class="hljs-variable">mi</span> <span class="hljs-operator">=</span> (a * <span class="hljs-number">10</span>) / b;
        a = (a * <span class="hljs-number">10</span>) % b;
        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> msb.indexOf(mi + <span class="hljs-string">&quot;&quot;</span>);
        <span class="hljs-keyword">if</span> (index != -<span class="hljs-number">1</span>) {
            msb.insert(index, <span class="hljs-string">&quot;(&quot;</span>);
            <span class="hljs-keyword">break</span>;
        }
        msb.append(mi);
        <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>) {
            <span class="hljs-keyword">break</span>;
        }
    }
    msb.insert(<span class="hljs-number">0</span>, k);
    <span class="hljs-keyword">if</span> (msb.indexOf(<span class="hljs-string">&quot;(&quot;</span>) != -<span class="hljs-number">1</span>) {
        msb.append(<span class="hljs-string">&quot;)&quot;</span>);
    }
    <span class="hljs-keyword">return</span> msb.toString();
}
</code></pre>
