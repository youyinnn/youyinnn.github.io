<h3 id="introduction">Introduction</h3>
<p>我们先分析 Leetcode 的 55 题，是从 45 题 Jump Game II 跳过来的，因为这题比 II 要简单一点，只需要判断序列是否能 jump 到终点就行，而 45 题是要找最小的 jump 次数；</p>
<p>为什么这题要拿出篇幅来分析？因为这题包含了很多东西：</p>
<ul>
<li><strong>纯回溯</strong></li>
<li><strong>纯回溯<code>---&gt;</code>回溯 Top-down DP</strong></li>
<li><strong>回溯 Top-Down DP<code>---&gt;</code>迭代 Bottom-up DP</strong></li>
<li><strong>迭代 Bottom-up DP<code>---&gt;</code>线性贪婪</strong></li>
</ul>
<p>分析完之后你会发现，原来算法可以这么美妙 😃</p>
<h3 id="jump-game">Jump Game</h3>
<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>
<p>Each element in the array represents your maximum jump length at that position.</p>
<p><strong>Determine if you are able to reach the last index.</strong></p>
<p><strong>Example 1:</strong></p>
<pre><code>Input: [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
</code></pre>
<p><strong>Example 2:</strong></p>
<pre><code>Input: [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum
             jump length is 0, which makes it impossible to reach the last index.:
</code></pre>
<h4 id="1-backtracking">1. Backtracking</h4>
<p>无论是 I 还是 II，我最开始只能想到的就是回溯法，而回溯法用于解这两题是会炸的，因为时间复杂度和递归栈太多了，单作为 DP 的第一步，我们还是先把回溯写出来</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canJump</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> {
    <span class="hljs-keyword">return</span> backtracking(nums, <span class="hljs-number">0</span>);
}

<span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">backtracking</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> now)</span> {
    <span class="hljs-keyword">if</span> (now == nums.length - <span class="hljs-number">1</span>) {
        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-comment">// 从允许的最大跳数开始跳</span>
        <span class="hljs-type">int</span> <span class="hljs-variable">maxStep</span> <span class="hljs-operator">=</span> nums[now];
        <span class="hljs-keyword">if</span> (now + maxStep &gt;= nums.length) {
            maxStep = nums.length - now - <span class="hljs-number">1</span>;
        }
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> maxStep; i &gt;= <span class="hljs-number">1</span>; i--) {
            <span class="hljs-keyword">if</span> (backtracking(nums, now + i)) {
                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
            }
        }
    }
    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
}
</code></pre>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time complexity : <strong>O(2^n)</strong>. There are <strong>2^n</strong> (upper bound) ways of jumping from the first position to the last, where <em>n</em> is the length of array <code>nums</code>. For a complete proof, please refer to Appendix A.</li>
<li>Space complexity : <strong>O(n)</strong>. Recursion requires additional memory for the stack frames.</li>
</ul>
<h4 id="2-memorization-dp-top-down">2. Memorization: DP Top-down</h4>
<p>也许你已经意识到了，我们仅仅是想知道每一个位置是否能跳到最后一格而已，但是某个位置可能会有从不同地方跳过来的，如果第一次跳过来的时候，这时候肯定不知道这个位置能不能到达，然后从这个位置继续往下跳的时候就能回溯出一个结果来，如果我们将这个结果记录下来的话，那么第二次有从其他地方跳过来的时候，我们就知道这个位置往下走到底是个什么结果，这样就不必再继续往下跳然后等回溯了；</p>
<p>于是我们将每个位置的回溯结果记忆化：能到终点代表**<em>GOOD</em><strong>、不能到终点代表</strong><em>BAD</em><strong>、没尝试过代表</strong><em>UNKNOWN</em>**</p>
<p>比如 Leetcode 上的例子：</p>
<p>An example of a memorization table for input array <code>nums = [2, 4, 2, 1, 0, 2, 0]</code> can be seen in the diagram below. We write <strong>G</strong> for a <em>GOOD</em> position and <strong>B</strong> for a <em>BAD</em> one. We can see that we cannot start from indices 2, 3 or 4 and eventually reach last index (6), but we can do that from indices 0, 1, 5 and (trivially) 6.</p>
<table>
<thead>
<tr>
<th>Index</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
</tr>
</thead>
<tbody><tr>
<td>nums</td>
<td>2</td>
<td>4</td>
<td>2</td>
<td>1</td>
<td>0</td>
<td>2</td>
<td>0</td>
</tr>
<tr>
<td>memo</td>
<td>G</td>
<td>G</td>
<td>B</td>
<td>B</td>
<td>B</td>
<td>G</td>
<td>G</td>
</tr>
</tbody></table>
<p><strong>Steps</strong></p>
<ol>
<li>Initially, all elements of the <code>memo</code> table are <strong><em>UNKNOWN</em></strong>, except for the last one, which is (trivially) <strong><em>GOOD</em></strong> (it can reach itself)</li>
<li>Modify the backtracking algorithm such that the recursive step first checks if the index is known (<strong><em>GOOD</em></strong>/ <strong><em>BAD</em></strong>)<ol>
<li>If it is known then return <em>True</em> / <em>False</em></li>
<li>Otherwise perform the backtracking steps as before</li>
</ol>
</li>
<li>Once we determine the value of the current index, we store it in the <code>memo</code> table</li>
</ol>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {
    <span class="hljs-keyword">enum</span> <span class="hljs-title class_">Index</span> {
        GOOD, BAD, UNKNOWN
    }
    Index[] memo;
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canJumpFromPosition</span><span class="hljs-params">(<span class="hljs-type">int</span> position, <span class="hljs-type">int</span>[] nums)</span> {
        <span class="hljs-keyword">if</span> (memo[position] == Index.BAD) {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (memo[position] == Index.GOOD) {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-type">int</span> <span class="hljs-variable">maxStep</span> <span class="hljs-operator">=</span> Math.min(nums[position], nums.length - position - <span class="hljs-number">1</span>);
            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> maxStep; i &gt; <span class="hljs-number">0</span>; i--) {
                <span class="hljs-keyword">if</span> (canJumpFromPosition(position + i, nums)) {
                    memo[position + maxStep] = Index.GOOD;
                    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
                }
            }
            memo[position] = Index.BAD;
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        }
    }

    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canJump</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> {
        memo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Index</span>[nums.length];
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) {
            memo[i] = Index.UNKNOWN;
        }
        memo[nums.length - <span class="hljs-number">1</span>] = Index.GOOD;
        <span class="hljs-keyword">return</span> canJumpFromPosition(<span class="hljs-number">0</span>, nums);
    }
}
</code></pre>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time complexity : <strong>O(n^2)</strong> For every element in the array, say <code>i</code>, we are looking at the next <code>nums[i]</code> elements to its right aiming to find a <em>GOOD</em> index. <code>nums[i]</code> can be at most <em>n</em>, where <em>n</em> is the length of array <code>nums</code>.</li>
<li>Space complexity : <strong>O(2n) =O(n)</strong>. First n originates from recursion. Second n comes from the usage of the memo table.</li>
</ul>
<p>送算减少了很多的回溯了，时间复杂度也从 2 的 n 次方降到 n 的 2 次方了，这回提交到 Leetcode，打了 11.11%</p>
<h4 id="3-memorization-dp-bottom-up">3. Memorization: DP Bottom-up</h4>
<p>上篇练习过挺多 DP 的，但是都没仔细研究过<strong>自顶向下</strong>和<strong>自底向上</strong>，正好借这题来分析分析</p>
<p>我们的问题，若是要从一头到另一头，比如这一题，需要从起点跳到终点，然后从终点回溯回来（也许是跳到了之前回溯好了的结果），这样才能知道结果，形式化的想象一下，我们主动地发送请求到服务端，然后服务端返回结果，这是一个过去/回来的过程；</p>
<p>如果我们能直接从服务端返回结果，那么就少花一半以上的 effort，也就是说，我们可以从终点直接往回走！</p>
<p>因为我们起点部分的点的结果，都是从终点附近的后半段点的结果递归回来的，我们这样做是提前从后半段算回结果</p>
<p>于是我们可以通过两个 for 循环，消除回溯调用栈</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Index</span> {
    GOOD, BAD, UNKNOWN
}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canJump</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> {
        Index[] memo = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Index</span>[nums.length];
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) {
            memo[i] = Index.UNKNOWN;
        }
        memo[nums.length - <span class="hljs-number">1</span>] = Index.GOOD;

        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) {
            <span class="hljs-type">int</span> <span class="hljs-variable">maxStep</span> <span class="hljs-operator">=</span> Math.min(nums[i], nums.length - i - <span class="hljs-number">1</span>);
            <span class="hljs-comment">// 从当前position的第一步开始</span>
            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt;= i + maxStep; j++) {
                <span class="hljs-keyword">if</span> (memo[j] == Index.GOOD) {
                    memo[i] = Index.GOOD;
                    <span class="hljs-keyword">break</span>;
                }
            }
        }

        <span class="hljs-keyword">return</span> memo[<span class="hljs-number">0</span>] == Index.GOOD;
    }
}
</code></pre>
<p><strong>Complexity Analysis</strong></p>
<ul>
<li>Time complexity : <strong>O(n^2)</strong>. For every element in the array, say <code>i</code>, we are looking at the next <code>nums[i]</code> elements to its right aiming to find a <em>GOOD</em> index. <code>nums[i]</code> can be at most <em>n</em>, where <em>n</em> is the length of array <code>nums</code>.</li>
<li>Space complexity : <strong>O(n)</strong>. This comes from the usage of the memo table.</li>
</ul>
<p>我们又优化了一下 DP，这次打了 30.77%，似乎还不错，再看看能不能再有什么优化的地方</p>
<h4 id="4-refine-the-dp">4. Refine The DP</h4>
<p>如果我们减负去很多题目以外的概念的话，我们将会得到一个很简单的 Memo 模型：和自底向上一样，只不过我们不需要考虑什么**<em>UNKNOWN</em>**</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canJump</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> {
    <span class="hljs-type">boolean</span>[] can = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[nums.length];
    can[nums.length - <span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) {
        <span class="hljs-type">int</span> <span class="hljs-variable">steps</span> <span class="hljs-operator">=</span> nums[i];
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; nums.length &amp;&amp; j &lt;= i + steps; j++) {
            <span class="hljs-keyword">if</span>  (can[j]) {
                can[i] = <span class="hljs-literal">true</span>;
                <span class="hljs-keyword">break</span>;
            }
        }
    }
    <span class="hljs-keyword">return</span> can[<span class="hljs-number">0</span>];
}
</code></pre>
<p>这次打了 34.76%，别看和上面的没提升多少，相比之下这已经减少了 1 倍以上的耗时了，我们似乎已经达到了这道题 DP 的极限了，再靠 DP 的思维已经无法再进行优化了，这时候我告诉你，差一步你就能将这个 DP 转为线性解法，你可能会崩溃</p>
<h4 id="5-greedy">5. Greedy</h4>
<p>从上面的 DP 我们可以发现，每当我们的到达一个新的位置（i）的时候，它就会往后找，找到一个 GOOD 就 break 掉，于是我们就认为这个新位置也是 GOOD，而这个被找到的 GOOD，就是当前新位置能 reach 到的第一个 GOOD，因为一旦 reach 到这个 GOOD，那么其他 case 就不比再考虑了，所以我们才 break；</p>
<table>
<thead>
<tr>
<th>Index</th>
<th>0</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>4</th>
<th>5</th>
<th>6</th>
</tr>
</thead>
<tbody><tr>
<td>nums</td>
<td>9</td>
<td>4</td>
<td>2</td>
<td>1</td>
<td>0</td>
<td>2</td>
<td>0</td>
</tr>
<tr>
<td>memo</td>
<td>U</td>
<td>G</td>
<td>B</td>
<td>B</td>
<td>B</td>
<td>G</td>
<td>G</td>
</tr>
</tbody></table>
<p>那么如果说，我们每次都记录最后的 GOOD 的位置，于是我们仅仅需要计算，<strong>当前位置能不能 reach 到这个 GOOD</strong>就行了，而这一步甚至不需要迭代，只要当前位置能跳的距离大于等于这个 GOOD 的位置就好了，于是我们可以从后往前线性地得到题解：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canJump</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> {
    <span class="hljs-type">int</span> <span class="hljs-variable">lastPos</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) {
        <span class="hljs-keyword">if</span> (i + nums[i] &gt;= lastPos) {
            lastPos = i;
        }
    }
    <span class="hljs-keyword">return</span> lastPos == <span class="hljs-number">0</span>;
}
</code></pre>
<h3 id="jump-game-ii">Jump Game II</h3>
<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>
<p>Each element in the array represents your maximum jump length at that position.</p>
<p>Your goal is to reach the last index in the minimum number of jumps.</p>
<p><strong>Example:</strong></p>
<pre><code>Input: [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2.
    Jump 1 step from index 0 to 1, then 3 steps to the last index.
</code></pre>
<h4 id="1-backtracking---o2n">1. Backtracking - O(2^n)</h4>
<p>不多 BB</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">jump</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> {
    <span class="hljs-keyword">return</span> dfs(nums, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, Integer.MAX_VALUE);
}

<span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> now, <span class="hljs-type">int</span> jump, <span class="hljs-type">int</span> minJump)</span> {
    <span class="hljs-keyword">if</span> (jump &gt;= minJump) {
        <span class="hljs-keyword">return</span> minJump;
    }
    <span class="hljs-keyword">if</span> (now == nums.length - <span class="hljs-number">1</span>) {
        <span class="hljs-keyword">return</span> Math.min(jump, minJump);
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-type">int</span> <span class="hljs-variable">subJump</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= nums[now] &amp;&amp; now + i &lt; nums.length; i++) {
            subJump = Math.min(dfs(nums, now + i, jump + <span class="hljs-number">1</span>, minJump), subJump);
        }
        <span class="hljs-keyword">return</span> Math.min(subJump, minJump);
    }
}
</code></pre>
<p>不用多想，时间复杂度爆掉了</p>
<h4 id="2-dp-bottom-up---o-n2">2. DP Bottom-up - O (n^2)</h4>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">jump</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> {
    <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) {
        <span class="hljs-comment">// one jump to the end</span>
        <span class="hljs-keyword">if</span> (i + nums[i] &gt;= nums.length) {
            dp[i] = <span class="hljs-number">1</span>;
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-comment">// jump max step if it can reach the end</span>
            <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;
            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt;= i + nums[i]; j++) {
                <span class="hljs-keyword">if</span> (dp[j] != Integer.MAX_VALUE) {
                    tmp = Math.min(tmp, dp[j] + <span class="hljs-number">1</span>);
                }
            }
            dp[i] = tmp;
        }
    }
    <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>];
}
</code></pre>
<h4 id="3-bfs---o-n">3. BFS - O (n)</h4>
<p>参考自：<a href="https://leetcode.com/problems/jump-game-ii/discuss/18019/10-lines-C%252B%252B-(16ms)-Python-BFS-Solutions-with-Explanations">10-lines C++ (16ms) / Python BFS Solutions with Explanations</a></p>
<p>如果我们仅观察步数的增长的话，我们其实能够把数组视为一棵以跳数来分层的数结构，这也是这道题能够用广度优先搜索来思考的关键点</p>
<p>比如<code>nums = [2, 3, 1, 1, 4]</code>，第一层是我们的起点<code>2</code>，它能够到达的下一层数字有<code>3,1</code>，而<code>3,1</code>的下一跳能够到达的是<code>1,4</code>如此一来我们仅需要跳 2 层就能够到达终点了；</p>
<p>再比如<code>nums = [2, 6, 5, 2, 3, 7, 4, 9, 8, 2, 1, 1]</code>，第一层<code>2</code>，第二层<code>6, 5</code>，第三层<code>2,3,7,4,9</code>，因为最多能从<code>i = 1, nums[1] = 6</code>跳到<code>nums[1 + 6] = nums[7] = 9</code>，然后第三层的第一个数必定是第二层结尾的下一个数，以此类推第四层<code>2, 1, 1</code></p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">jump</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> {
    <span class="hljs-type">int</span> <span class="hljs-variable">jump</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
    <span class="hljs-type">int</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, end = <span class="hljs-number">0</span>;
    <span class="hljs-comment">// when end reach the final index</span>
    <span class="hljs-comment">// that means we finish the jump</span>
    <span class="hljs-keyword">while</span> (end &lt; nums.length - <span class="hljs-number">1</span>) {
        <span class="hljs-comment">// jump first</span>
        jump++;
        <span class="hljs-comment">// at least one position on next floor</span>
        <span class="hljs-type">int</span> <span class="hljs-variable">tmpEnd</span> <span class="hljs-operator">=</span> end + <span class="hljs-number">1</span>;
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt;= end; i++) {
            <span class="hljs-comment">// hit the final straight</span>
            <span class="hljs-keyword">if</span> (i + nums[i] &gt; nums.length) {
                <span class="hljs-keyword">return</span> jump;
            }
            tmpEnd = Math.max(tmpEnd, i + nums[i]);
        }
        <span class="hljs-comment">// visit next floor</span>
        start = end + <span class="hljs-number">1</span>;
        end = tmpEnd;
    }
    <span class="hljs-keyword">return</span> jump;
}
</code></pre>
<h3 id="edit-distance">Edit Distance</h3>
<p>Given two words <em>word1</em> and <em>word2</em>, find the minimum number of operations required to convert <em>word1</em> to <em>word2</em>.</p>
<p>You have the following 3 operations permitted on a word:</p>
<ol>
<li>Insert a character</li>
<li>Delete a character</li>
<li>Replace a character</li>
</ol>
<p><strong>Example 1:</strong></p>
<pre><code>Input: word1 = &quot;horse&quot;, word2 = &quot;ros&quot;
Output: 3
Explanation:
horse -&gt; rorse (replace &#x27;h&#x27; with &#x27;r&#x27;)
rorse -&gt; rose (remove &#x27;r&#x27;)
rose -&gt; ros (remove &#x27;e&#x27;)
</code></pre>
<p><strong>Example 2:</strong></p>
<pre><code>Input: word1 = &quot;intention&quot;, word2 = &quot;execution&quot;
Output: 5
Explanation:
intention -&gt; inention (remove &#x27;t&#x27;)
inention -&gt; enention (replace &#x27;i&#x27; with &#x27;e&#x27;)
enention -&gt; exention (replace &#x27;n&#x27; with &#x27;x&#x27;)
exention -&gt; exection (replace &#x27;n&#x27; with &#x27;c&#x27;)
exection -&gt; execution (insert &#x27;u&#x27;)
</code></pre>
<h4 id="dp-top-down-for-edit-distance">DP Top-down For Edit Distance</h4>
<p>这题，乍一看一脸懵逼，咋还有 3 种情况！咋还随便什么位置都能有这三种情况！怎么玩！用什么思路！</p>
<p>思考几分钟后无果，果断去讨论区找思路，然后看到高评 DP 解，醍醐灌顶- -</p>
<p>简单来说，虽然对比到有不同有<strong>3</strong>种情况，但是我们还是可以按照顺序来给两个 word 做一个矩阵，于是熟悉的操作就来了，</p>
<pre><code class="hljs language-java">a = ac, b = <span class="hljs-type">ae</span>

     <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> <span class="hljs-number">1</span>
         a <span class="hljs-type">e</span>
<span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> a  <span class="hljs-number">0</span> <span class="hljs-number">1</span>
    <span class="hljs-number">1</span> c  <span class="hljs-number">1</span> <span class="hljs-number">1</span>

我们看到，当我们走到i = <span class="hljs-number">1</span>，j = <span class="hljs-number">1</span>的时候，我们有<span class="hljs-number">3</span>种选择：
<span class="hljs-number">1.</span> 直接替换，于是操作数在a -&gt; a的基础上+<span class="hljs-number">1</span>；
<span class="hljs-number">2.</span> 删除c，我们在ac -&gt; a完成之后的基础上，继续进行a -&gt; ae；
<span class="hljs-number">3.</span> 插入e，我们在ac -&gt; aec完成之后的基础上，继续进行aec -&gt; ae；

（上面这一套是巨难理解的地方）

于是在这<span class="hljs-number">3</span>个选择中选最小值
</code></pre>
<p>矩阵都来了，dp 就完事了，于是我们可以想象一下状态转移公式：</p>
<pre><code class="hljs language-java">String a,b

<span class="hljs-title function_">F</span><span class="hljs-params">(i, j)</span> = {
    <span class="hljs-keyword">if</span> a.charAt(i) == b.charAt(j)
        dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];
    <span class="hljs-keyword">else</span>
        dp[i][j] = min of {
            dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>],	<span class="hljs-comment">// replace</span>
            dp[i][j - <span class="hljs-number">1</span>],		<span class="hljs-comment">// insert</span>
            dp[i - <span class="hljs-number">1</span>][j]		<span class="hljs-comment">// delete</span>
        } + <span class="hljs-number">1</span>
}

base <span class="hljs-keyword">case</span>：
    dp[i][<span class="hljs-number">0</span>] = i;
    dp[<span class="hljs-number">0</span>][j] = j;
</code></pre>
<p>于是代码为：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minDistance</span><span class="hljs-params">(String word1, String word2)</span> {
    <span class="hljs-type">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[word1.length() + <span class="hljs-number">1</span>][word2.length() + <span class="hljs-number">1</span>];
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt;= word1.length(); i++) {
        dp[i][<span class="hljs-number">0</span>] = i;
    }
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt;= word2.length(); j++) {
        dp[<span class="hljs-number">0</span>][j] = j;
    }
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= word1.length(); i++) {
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt;= word2.length(); j++) {
            <span class="hljs-keyword">if</span> (word1.charAt(i - <span class="hljs-number">1</span>) == word2.charAt(j - <span class="hljs-number">1</span>)) {
                <span class="hljs-comment">// same as before</span>
                dp[i][j] = dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];
            } <span class="hljs-keyword">else</span> {
                dp[i][j] = <span class="hljs-number">1</span>
                        + Math.min(
                                <span class="hljs-comment">// replace</span>
                                dp[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>],
                        Math.min(
                                <span class="hljs-comment">// delete</span>
                                dp[i - <span class="hljs-number">1</span>][j],
                                <span class="hljs-comment">// insert</span>
                                dp[i][j - <span class="hljs-number">1</span>]));
            }
        }
    }
    <span class="hljs-keyword">return</span> dp[word1.length()][word2.length()];
}
</code></pre>
<h4 id="dp-bottom-up--backtracking">DP Bottom-up + Backtracking</h4>
<p>我们还可以用回溯的形式去计算 dp，也就是说以自底向上的思路去求解</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minDistance</span><span class="hljs-params">(String a, String b)</span> {
    <span class="hljs-type">int</span>[][] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[a.length() + <span class="hljs-number">1</span>][b.length() + <span class="hljs-number">1</span>];
    <span class="hljs-keyword">return</span> dfs(a, b, a.length() - <span class="hljs-number">1</span>, b.length() - <span class="hljs-number">1</span>, dp);
}

<span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(String a, String b, <span class="hljs-type">int</span> i, <span class="hljs-type">int</span> j, <span class="hljs-type">int</span>[][] dp)</span> {
    <span class="hljs-keyword">if</span> (i == -<span class="hljs-number">1</span>) {
        <span class="hljs-keyword">return</span> j + <span class="hljs-number">1</span>;
    }
    <span class="hljs-keyword">if</span> (j == -<span class="hljs-number">1</span>) {
        <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span>;
    }
    <span class="hljs-keyword">if</span> (dp[i][j] == <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">if</span> (a.charAt(i) == b.charAt(j)) {
            dp[i][j] = dfs(a, b, i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>, dp);
        } <span class="hljs-keyword">else</span> {
            dp[i][j] = <span class="hljs-number">1</span>
                    + Math.min(
                            dfs(a, b, i - <span class="hljs-number">1</span>, j - <span class="hljs-number">1</span>, dp),
                    Math.min(
                            dfs(a, b, i - <span class="hljs-number">1</span>, j, dp),
                            dfs(a, b, i, j - <span class="hljs-number">1</span>, dp)));
        }
    }
    <span class="hljs-keyword">return</span> dp[i][j];
}
</code></pre>
<h3 id="new-21-game">New 21 Game</h3>
<p>Alice plays the following game, loosely based on the card game &quot;21&quot;.</p>
<p>Alice starts with 0 points, and draws numbers while she has less than K points. During each draw, she gains an integer number of points randomly from the range [1, W], where W is an integer. Each draw is independent and the outcomes have equal probabilities.</p>
<p>Alice stops drawing numbers when she gets K or more points. What is the probability that she has N or less points?</p>
<p>Example 1:</p>
<blockquote>
<p>Input: N = 10, K = 1, W = 10
Output: 1.00000
Explanation: Alice gets a single card, then stops.</p>
</blockquote>
<p>Example 2:</p>
<blockquote>
<p>Input: N = 6, K = 1, W = 10
Output: 0.60000
Explanation: Alice gets a single card, then stops.
In 6 out of W = 10 possibilities, she is at or below N = 6 points.</p>
</blockquote>
<p>Example 3:</p>
<blockquote>
<p>Input: N = 21, K = 17, W = 10
Output: 0.73278
Note:</p>
<p>0 &lt;= K &lt;= N &lt;= 10000
1 &lt;= W &lt;= 10000
Answers will be accepted as correct if they are within 10^-5 of the correct answer.
The judging time limit has been reduced for this question.</p>
</blockquote>
<h4 id="dp-top-down-for-21-game">DP Top-down For 21 Game</h4>
<p>这题刚上手确实过于难，看了官方题解后才能有比较清晰的了解。</p>
<p>首先我们需要理解题中的 3 个值：</p>
<ul>
<li>N 值：获胜目标分，想要获胜的话，我们的积分就必须低于等于 N；</li>
<li>K 值：停抽分，一旦我们最后一手牌抽到再累积积分超过 K 值，就停止抽牌，否则必须再抽一张；</li>
<li>W 值：牌面最大分值，我们抽牌能够获取【0~W】值的积分；</li>
<li>起始积分：0 分；</li>
</ul>
<p>然后我们再来分析例子：</p>
<ol>
<li>K 为 1，意味着我们最多只能抽一次牌，最多的积分只能为 1~10 分，总积分低于等于 N 值（10）的概率为 100%；</li>
<li>K 为 1，意味着我们最多只能抽一次牌，最多的积分只能为 1~10 分，总积分低于等于 N 值（6）的概率为 60%；</li>
</ol>
<p>再来分析例 3，K 为 17 时，我们看最后只能抽一手牌的情况，也就是积分为 16 的时候，这时候我们最好一手抽出的积分情况为：</p>
<pre><code class="hljs language-graph">┌-----┐┌-----┐┌-----┐┌-----┐┌-----┐┌-----┐┌-----┐┌-----┐┌-----┐┌-----┐┌-----┐┌-----┐
| ... ||  16 ||  17 ||  18 ||  19 ||  20 ||  21 ||  22 ||  23 ||  24 ||  25 ||  26 | &lt;--- 总积分
└-----┘└-----┘└-----┘└-----┘└-----┘└-----┘└-----┘└-----┘└-----┘└-----┘└-----┘└-----┘
                 1      1      1      1      1      0      0      0      0      0    &lt;--- 是否获胜
</code></pre>
<p>于是我们可以知道在积分等于 16 的时候，获胜的概率：</p>
<p>我们设*f(x)*，为积分为 x 的时候，获胜的概率，于是有</p>
<div class="katex-display katexp" katex-exp="CgBcAGIAZQBnAGkAbgB7AGEAbABpAGcAbgBlAGQAfQAKAGYAKAAxADYAKQAgACYAPQAgAFwAZgByAGEAYwAgAHsAMQB9ACAAewAxADAAfQAgAFwAYwBkAG8AdABwACAAKAAxACAAKwAgADEAKwAgADEAKwAgADEAKwAgADEAIAArACAAMAAgACsAIAAwACAAKwAgADAAIAArACAAMAAgACsAIAAwACkAIABcAG4AZQB3AGwAaQBuAGUACgAmAD0AIABcAGYAcgBhAGMAIAB7ADUAfQAgAHsAMQAwAH0AIAA9ACAAMAAuADUACgBcAGUAbgBkAHsAYQBsAGkAZwBuAGUAZAB9AAoA"><span class="katex-display"><span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.6149em;vertical-align:-2.0574em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5574em;"><span style="top:-4.5574em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">16</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0574em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5574em;"><span style="top:-4.5574em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">10</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">0</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">10</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord">0.5</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0574em;"><span></span></span></span></span></span></span></span></span></span></span></span></div>

<p>并且：</p>
<div class="katex-display katexp" katex-exp="CgBmACgAMQA3ACkAIAA9ACAAZgAoADEAOAApACAAPQAgAGYAKAAxADkAKQAgACAAPQAgAGYAKAAyADAAKQAgACAAPQAgAGYAKAAyADEAKQAgACAAPQAgADEAIABcAFwAIAAgAGYAKAAyADIAKQAgAD0AIABmACgAMgAzACkAIAA9ACAAZgAoADIANAApACAAIAA9ACAAZgAoADIANQApACAAIAA9ACAAZgAoADIANgApACAAIAA9ACAAMAAKAA=="><span class="katex-display"><span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">17</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">18</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">19</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">20</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">21</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">22</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">23</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">24</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">25</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">26</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span></div>

<p>于是我们可以得到初步的状态转移方程：</p>
<div class="katex-display katexp" katex-exp="CgBcAGIAZQBnAGkAbgB7AGEAbABpAGcAbgBlAGQAfQAgAGYAKAB4ACkAIAAmAD0AIABcAGYAcgBhAGMAIAB7ADEAfQAgAHsAVwB9ACAAXABjAGQAbwB0AHAAIAAoAGYAKAB4ACAAKwAgADEAKQAgACsAIABmACgAeAAgACsAIAAyACkAIAArACAAXABkAG8AdABzAGIAIAArACAAZgAoAHgAIAArACAAVwApACkAIABcAFwAIAAgAGYAKAB4ACAALQAgADEAKQAgACYAPQAgAFwAZgByAGEAYwAgAHsAMQB9ACAAewBXAH0AIABcAGMAZABvAHQAcAAgACgAZgAoAHgAKQAgACsAIABmACgAeAAgACsAIAAxACkAIAArACAAXABkAG8AdABzAGIAIAArACAAZgAoAHgAIAArACAAVwAgAC0AIAAxACkAKQAgAFwAXAAgAFwAdgBkAG8AdABzACAAXABcACAAZgAoADAAKQAgACYAPQAgAFwAZgByAGEAYwAgAHsAMQB9ACAAewBXAH0AIABcAGMAZABvAHQAcAAgACgAZgAoADEAKQAgACsAIABmACgAMgApACAAKwAgAFwAZABvAHQAcwBiACAAKwAgAGYAKABXACkAKQAgAFwAZQBuAGQAewBhAGwAaQBnAG4AZQBkAH0ACgA="><span class="katex-display"><span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:9.0823em;vertical-align:-4.2912em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.7912em;"><span style="top:-7.1572em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span><span style="top:-4.8498em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-2.3638em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord"><span class="mord">⋮</span><span class="mord rule" style="border-right-width:0em;border-top-width:1.5em;bottom:0em;"></span></span></span></span><span style="top:-0.3823em;"><span class="pstrut" style="height:3.6875em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">0</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.2912em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:4.7912em;"><span style="top:-6.7912em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mclose">))</span></span></span><span style="top:-4.4837em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">))</span></span></span><span style="top:-0.0163em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mclose">))</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:4.2912em;"><span></span></span></span></span></span></span></span></span></span></span></span></div>

<p>到这里为止，其实我们已经能够写出题解了，但是我们要是以高中生的眼光来看上面的公式，我们不难发现，后一项和前一项的公式中其实有部分个结果是有重复的部分，*f(x)<em>和</em>f(x - 1)<em>中有重叠的</em>f(x + 1) + ... + f(x + W - 1))*，于是我们可以两式相减来简化一下：</p>
<div class="katex-display katexp" katex-exp="CgBcAGIAZQBnAGkAbgB7AGEAbABpAGcAbgBlAGQAfQAgAGYAKAB4ACkAIAAtACAAZgAoAHgAIAAtACAAMQApACAAJgA9ACAAXABmAHIAYQBjACAAewAxAH0AIAB7AFcAfQAgAFwAYwBkAG8AdABwACAAKABcAGIAYwBhAG4AYwBlAGwAewBmACgAeAAgACsAIAAxACkAfQAgACsAIABcAGIAYwBhAG4AYwBlAGwAewBmACgAeAAgACsAIAAyACkAfQAgACsAIABcAGIAYwBhAG4AYwBlAGwAewBcAGQAbwB0AHMAYgB9ACAAKwAgAGYAKAB4ACAAKwAgAFcAKQApACAAXABcACAAJgBcAHEAdQBhAGQALQAgAFwAZgByAGEAYwAgAHsAMQB9ACAAewBXAH0AIABcAGMAZABvAHQAcAAgACgAZgAoAHgAKQAgACsAIABcAGIAYwBhAG4AYwBlAGwAewBmACgAeAAgACsAIAAxACkAfQAgACsAIABcAGIAYwBhAG4AYwBlAGwAewBcAGQAbwB0AHMAYgB9ACAAKwAgAFwAYgBjAGEAbgBjAGUAbAB7AGYAKAB4ACAAKwAgAFcAIAAtACAAMQApAH0AKQAgAFwAXAAgACYAPQAgAFwAZgByAGEAYwAgAHsAMQB9ACAAewBXAH0AIABcAGMAZABvAHQAcAAgACgAZgAoAHgAIAArACAAVwApACAALQAgAGYAKAB4ACkAKQAgAFwAZQBuAGQAewBhAGwAaQBnAG4AZQBkAH0ACgA="><span class="katex-display"><span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.9223em;vertical-align:-3.2112em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.7112em;"><span style="top:-5.7112em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-3.4037em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"></span></span><span style="top:-1.0963em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.2112em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.7112em;"><span style="top:-5.7112em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord cancel-lap"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.75em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord cancel-pad"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span class="svg-align" style="top:-2.75em;"><span class="pstrut" style="height:3em;"></span><span style="height:1em;"><svg xmlns="http://www.w3.org/2000/svg" width='100%' height='1em'><line x1='0' y1='0' x2='100%' y2='100%' stroke-width='0.046em'></line></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord cancel-lap"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.75em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord cancel-pad"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">2</span><span class="mclose">)</span></span></span><span class="svg-align" style="top:-2.75em;"><span class="pstrut" style="height:3em;"></span><span style="height:1em;"><svg xmlns="http://www.w3.org/2000/svg" width='100%' height='1em'><line x1='0' y1='0' x2='100%' y2='100%' stroke-width='0.046em'></line></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.513em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span class="svg-align" style="top:-2.8em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.713em;"><svg xmlns="http://www.w3.org/2000/svg" width='100%' height='0.713em'><line x1='0' y1='0' x2='100%' y2='100%' stroke-width='0.046em'></line></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mclose">))</span></span></span><span style="top:-3.4037em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:1em;"></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord cancel-lap"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.75em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord cancel-pad"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span class="svg-align" style="top:-2.75em;"><span class="pstrut" style="height:3em;"></span><span style="height:1em;"><svg xmlns="http://www.w3.org/2000/svg" width='100%' height='1em'><line x1='0' y1='0' x2='100%' y2='100%' stroke-width='0.046em'></line></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.513em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="minner">⋯</span></span></span><span class="svg-align" style="top:-2.8em;"><span class="pstrut" style="height:3em;"></span><span style="height:0.713em;"><svg xmlns="http://www.w3.org/2000/svg" width='100%' height='0.713em'><line x1='0' y1='0' x2='100%' y2='100%' stroke-width='0.046em'></line></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2em;"><span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord cancel-lap"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.75em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord cancel-pad"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span class="svg-align" style="top:-2.75em;"><span class="pstrut" style="height:3em;"></span><span style="height:1em;"><svg xmlns="http://www.w3.org/2000/svg" width='100%' height='1em'><line x1='0' y1='0' x2='100%' y2='100%' stroke-width='0.046em'></line></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.25em;"><span></span></span></span></span></span><span class="mclose">)</span></span></span><span style="top:-1.0963em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:3.2112em;"><span></span></span></span></span></span></span></span></span></span></span></span></div>

<p>于是有：</p>
<div class="katex-display katexp" katex-exp="CgBmACgAeAApACAAIAAtACAAZgAoAHgAIAAtACAAMQApACAAIAA9ACAAXABmAHIAYQBjACAAewAxAH0AIAB7AFcAfQAgAFwAYwBkAG8AdABwACAAKABmACgAeAAgACsAIABXACkAIAAtACAAZgAoAHgAKQApAAoA"><span class="katex-display"><span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span></span></span></span></span></div>

<p>到这里有两个化简选择：</p>
<ol>
<li><p>如果*f(x - 1)*右移：</p>
<p><span class="" katex-exp="ZgAoAHgAKQAgAD0AIABcAGYAcgBhAGMAIAB7ADEAfQAgAHsAVwB9ACAAXABjAGQAbwB0AHAAIAAoAGYAKAB4ACAAKwAgAFcAKQAgAC0AIABmACgAeAApACkAIAAgAC0AIABmACgAeAAgAC0AIAAxACkA"><span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.1901em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8451em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">W</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span></span></span></p>
<p>这样无法求解，因为我们是从后往前推到的转移公式，最终是要推导道*f(0)*，我们希望的是要有：</p>
<p><span class="" katex-exp="ZgAoAHgAKQAgAD0AIABDACAAXABjAGQAbwB0ACAAZgAoAHgAIAArACAAMQApACAAKwAgAGsA"><span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span></span></span></span></span></p>
<p>这样的公式，这样我们才能倒序循环，从后一项推出前一项的值，观察上面的化简式可以发现，式中有 3 个高一项的值，一个矮一项的值，我们把高的都放右边，矮的单独放左边，于是有第二种化简</p>
</li>
<li><p>*f(x - 1)*右移后，原式右边左移，最后左右翻转一下：</p>
</li>
</ol>
<div class="katex-display katexp" katex-exp="CgBcAGIAZQBnAGkAbgB7AGEAbABpAGcAbgBlAGQAfQAgAGYAKAB4ACAALQAgADEAKQAgACYAPQAgAGYAKAB4ACkAIAAtACAAIABcAGYAcgBhAGMAIAB7ADEAfQAgAHsAVwB9ACAAXABjAGQAbwB0AHAAIAAoAGYAKAB4ACAAKwAgAFcAKQAgAC0AIABmACgAeAApACkAIABcAFwAIABmACgAeAApACAAJgA9ACAAZgAoAHgAIAArACAAMQApACAALQAgACAAXABmAHIAYQBjACAAewAxAH0AIAB7AFcAfQAgAFwAYwBkAG8AdABwACAAKABmACgAeAAgACsAIAAxACAAKwAgAFcAKQAgAC0AIABmACgAeAAgACsAIAAxACkAKQAgAFwAZQBuAGQAewBhAGwAaQBnAG4AZQBkAH0ACgA="><span class="katex-display"><span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.6149em;vertical-align:-2.0574em;"></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5574em;"><span style="top:-4.5574em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0574em;"><span></span></span></span></span></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.5574em;"><span style="top:-4.5574em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mclose">))</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.3214em;"></span><span class="mord"><span class="mord"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mpunct">⋅</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal">x</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord">1</span><span class="mclose">))</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.0574em;"><span></span></span></span></span></span></span></span></span></span></span></span></div>

<p>上式就是我们最终得出的简化的通项公式，然后我们兴高采烈地写出题解：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">new21Game</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> w)</span> {
    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span>;
    <span class="hljs-type">double</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[k + w + <span class="hljs-number">1</span>];
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> k; i &lt;= k + w - <span class="hljs-number">1</span> &amp;&amp; i &lt;= n; i++) {
        dp[i] = <span class="hljs-number">1.0</span>;
    }
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> k - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) {
        dp[i] = dp[i + <span class="hljs-number">1</span>] - (dp[i + w + <span class="hljs-number">1</span>] - dp[i + <span class="hljs-number">1</span>]) / w;
    }
    <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>];
}
</code></pre>
<p>结果爆炸，这到底是为什么呢？演算一下，我们发现*dp[16]<em>居然算出 1.1000000，显然和事实的 0.5 不符，我们假设化简后通项公式不适用于</em>dp[K-1]<em>，那么我们需要先计算好这个值，再从</em>dp[K-2]<em>，开始去尝试，那么</em>dp[K-1]*等于多少呢？</p>
<p>我们在得到 16 分的时候，距离 21 分还有 10 张牌里有 5 种赢的可能，那就是 21-16+1，也就是<em>N-K+1</em>，而如果说这时候 W 等于 3，那么就最多只有 3 张牌里有 3 种赢的机会，所以我们可以得出公式：</p>
<div class="katex-display katexp" katex-exp="CgBmACgASwAgAC0AIAAxACkAIAA9ACAAXABmAHIAYQBjACAAewAxAH0AIAB7AFcAfQAgAFwAYwBkAG8AdAAgAG0AaQBuACgATgAtAEsAKwAxACwAIABXACkACgA="><span class="katex-display"><span class="katex"><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:2.0074em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.3214em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.13889em;">W</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">min</span><span class="mopen">(</span><span class="mord mathnormal" style="margin-right:0.10903em;">N</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7667em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.07153em;">K</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">W</span><span class="mclose">)</span></span></span></span></span></div>

<p>于是我们最终的代码为：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">new21Game</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k, <span class="hljs-type">int</span> w)</span> {
    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1.0</span>;
    <span class="hljs-type">double</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[k + w + <span class="hljs-number">1</span>];
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> k; i &lt;= k + w - <span class="hljs-number">1</span> &amp;&amp; i &lt;= n; i++) {
        dp[i] = <span class="hljs-number">1.0</span>;
    }
    dp[k - <span class="hljs-number">1</span>] = <span class="hljs-number">1.0</span> * Math.min(n - k + <span class="hljs-number">1</span>, w) / w;
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> k - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) {
        dp[i] = dp[i + <span class="hljs-number">1</span>] - (dp[i + w + <span class="hljs-number">1</span>] - dp[i + <span class="hljs-number">1</span>]) / w;
    }
    <span class="hljs-keyword">return</span> dp[<span class="hljs-number">0</span>];
}
</code></pre>
