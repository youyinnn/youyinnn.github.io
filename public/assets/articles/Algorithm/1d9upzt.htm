<h3 id="introduction">Introduction</h3>
<p>二维坐标中有一堆点集，记为 P，假设 P 中至少有 2 个点，那么求出 P 中距离最近的两个点；</p>
<p>首先为了问题准备好点和求两点距离的方法，其中如果两点距离的输入只有一个点，那么它的距离代表无穷大，它表示没有解</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Point</span> {
    <span class="hljs-type">double</span> x;
    <span class="hljs-type">double</span> y;

    Point(<span class="hljs-type">double</span> x, <span class="hljs-type">double</span> y) {
        <span class="hljs-built_in">this</span>.x = x;
        <span class="hljs-built_in">this</span>.y = y;
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Point{&quot;</span> +
                <span class="hljs-string">&quot;x=&quot;</span> + x +
                <span class="hljs-string">&quot;, y=&quot;</span> + y +
                <span class="hljs-string">&#x27;}&#x27;</span>;
    }
}

<span class="hljs-keyword">private</span> <span class="hljs-type">double</span> <span class="hljs-title function_">distanceOfTwoPoint</span><span class="hljs-params">(Point a, Point b)</span> {
    <span class="hljs-keyword">if</span> (a == <span class="hljs-literal">null</span> || b == <span class="hljs-literal">null</span>) {
        <span class="hljs-keyword">return</span> Double.MAX_VALUE;
    }
    <span class="hljs-keyword">return</span> Math.sqrt(Math.pow(a.x - b.x, <span class="hljs-number">2</span>) + Math.pow(a.y - b.y, <span class="hljs-number">2</span>));
}
</code></pre>
<h4 id="brute-force---on2">Brute Force - O(n^2)</h4>
<p>枚举，没什么说的</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> Point[] shortestDistance(Point[] set) {
    Point[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>[<span class="hljs-number">2</span>];
    <span class="hljs-type">double</span> <span class="hljs-variable">get</span> <span class="hljs-operator">=</span> Double.MAX_VALUE;
    <span class="hljs-keyword">for</span> (Point a : set) {
        <span class="hljs-keyword">for</span> (Point b : set) {
            <span class="hljs-type">double</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> distanceOfTwoPoint(a, b);
            <span class="hljs-keyword">if</span> (tmp &lt; get &amp;&amp; a != b) {
                get = tmp;
                ans[<span class="hljs-number">0</span>] = a;
                ans[<span class="hljs-number">1</span>] = b;
            }
        }
    }
    <span class="hljs-keyword">return</span> ans;
}
</code></pre>
<h4 id="divide-and-conque---onlogn">Divide And Conque - O(nlogn)</h4>
<p>利用分治法的思想，我们将点集分为三种情况：</p>
<ol>
<li><p>点数小于等于二时：直接计算，求该两点之间的距离。</p>
</li>
<li><p>集合中有三个点：两两比较，求三个点中的最近的两个点距离。</p>
</li>
<li><p>点数大于三时：首先<strong>划分</strong>集合 S 为 SL 和 SR，使得 SL 中的每一个点位于 SR 中每一个点的左边，并且 SL 和 SR 中点数相同。分别在 SL 和 SR 中解决最近点对问题，得到 DL 和 DR，分别表示 SL 和 SR 中的最近点对的距离。令 d=min(DL,DR)。如果 S 中的最近点对(P1,P2)。P1、P2 两点一个在 SL 和一个在 SR 中，那么 P1 和 P2 一定在以 L 为中心的间隙内，以 L-d 和 L+d 为界。</p>
<p><img src="../../img/20211210131802.webp" alt></p>
</li>
</ol>
<p>针对这个基本思想，我们肯定是得有一个前提的，那就是怎么<strong>划分</strong>？如果说集合<strong>P</strong>是按照 x 坐标或者 y 坐标升降任意去排序的，那么我们就可以取集合中间下标的位置为<strong>MID</strong>，那么<strong>MID</strong>左右两边的点就是以 x 坐标或者 y 坐标值均匀分为两个子集，记为<strong>P1，P2</strong>；</p>
<p><strong>于是我们要求 P 必须是可划分的，也就是按照 x 或者 y 值去有序排列好的，否则得先对 P 进行排序，然后再划分</strong></p>
<p>然后就可以通过递归求解各自<strong>n/2</strong>的问题规模的解，各自的解记为<strong>d1，d2</strong>，定义<code>d = min{d1, d2}</code></p>
<p>这时候，<strong>dis</strong>不一定是问题的解，因为解有可能跨两个子集，所以我们还得检查<strong>MID 附近</strong>可能的点集的解，最后再和<strong>dis</strong>比较，求出真正的解</p>
<p>假如说<strong>P</strong>以 x 坐标值为排序了，那么<strong>MID 的附近</strong>的点一定存在**范围关系：| MID.x - pi.x | &lt; dis **，只有在这个范围内的点，才有可能存在解</p>
<p><strong>并且有以下事实：</strong>如果有<strong>跨 MID</strong>的解的话，设解左边的点为<strong>pl</strong>，那么在上式范围内，右边的点存在的可能性不超过 6 个，于是说我们在范围关系内，左范围中的每一个点顶多再往后考虑 6 次右边范围内的点就行了，这样这个子过程时间就由线性缩为常量</p>
<p>于是我们整理一下逻辑：</p>
<ol>
<li>首先要求点集有序；</li>
<li>如果点集只有一个点，则返回无穷大，表明这个点集绝对没有解；</li>
<li>如果点集只有两个点，则直接返回两点距离，表明这个点集只有一个解；</li>
<li>如果点集有三个点，则直接暴力解；</li>
<li>如果三个点以上：<ol>
<li>根据中点<strong>MID</strong>划分；</li>
<li>递归传入左右子集；</li>
<li>得到左右子集的解之后，取最小值为<strong>dis</strong>；</li>
<li>考虑<strong>跨 MID</strong>情况：<ol>
<li>在当前递归集合范围中，以 <strong>i = P.startIndex</strong> 开始遍历<strong>MID</strong>左边的点，且只取符合 <strong>pi.x &gt;= MID.x - dis <strong>的点作为</strong>pl</strong></li>
<li>在当前递归集合范围中，针对<strong>pl</strong>，以 <strong>j = MID</strong> 开始遍历，且只取符合 <strong>pj.x &lt;= MID.x + dis</strong> 的点作为<strong>pr</strong>，且最多只找 6 次</li>
<li>若 pl 和 pr 的距离小于 dis，则讲 pl 和 pr 作为备选解，继续往后</li>
</ol>
</li>
<li>考虑完<strong>跨 MID</strong>情况后，选最小的一个情况为解；</li>
</ol>
</li>
</ol>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> Point[] shortestDistance2(Point[] set, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end) {
    Point[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>[<span class="hljs-number">2</span>];
    <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> end - start + <span class="hljs-number">1</span>;
    <span class="hljs-keyword">if</span> (length == <span class="hljs-number">1</span>) {
        ans[<span class="hljs-number">0</span>] = set[start];
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (length == <span class="hljs-number">2</span>) {
        ans[<span class="hljs-number">0</span>] = set[start];
        ans[<span class="hljs-number">1</span>] = set[end];
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (length == <span class="hljs-number">3</span>) {
        <span class="hljs-comment">// brute force</span>
        <span class="hljs-keyword">return</span> shortestInThree(set);
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (length / <span class="hljs-number">2</span>) + start;
        Point[] leftAns = shortestDistance2(set, start, mid);
        Point[] rightAns = shortestDistance2(set, mid + <span class="hljs-number">1</span>, end);
        <span class="hljs-type">double</span> <span class="hljs-variable">ld</span> <span class="hljs-operator">=</span> Double.MAX_VALUE, rd = Double.MAX_VALUE;
        <span class="hljs-keyword">if</span> (leftAns.length == <span class="hljs-number">2</span>) {
            ld = distanceOfTwoPoint(leftAns[<span class="hljs-number">0</span>], leftAns[<span class="hljs-number">1</span>]);
        }
        <span class="hljs-keyword">if</span> (rightAns.length == <span class="hljs-number">2</span>) {
            rd = distanceOfTwoPoint(rightAns[<span class="hljs-number">0</span>], rightAns[<span class="hljs-number">1</span>]);
        }
        <span class="hljs-type">double</span> <span class="hljs-variable">dis</span> <span class="hljs-operator">=</span> Math.min(ld, rd);
        <span class="hljs-type">Point</span> <span class="hljs-variable">midP</span> <span class="hljs-operator">=</span> set[mid];
        <span class="hljs-type">double</span> <span class="hljs-variable">midAnsD</span> <span class="hljs-operator">=</span> Double.MAX_VALUE;
        <span class="hljs-comment">// process 5.4.1</span>
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start; i &lt;= end &amp;&amp; set[i].x &lt;= midP.x; i++) {
            <span class="hljs-type">Point</span> <span class="hljs-variable">pl</span> <span class="hljs-operator">=</span> set[i];
            <span class="hljs-keyword">if</span> (pl.x &gt;= midP.x - dis) {
                <span class="hljs-comment">// process 5.4.2</span>
                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> mid, count = <span class="hljs-number">0</span>;
                     j &lt;= end &amp;&amp; count &lt; <span class="hljs-number">6</span> &amp;&amp; set[j].x &lt;= midP.x + dis;
                     j++, count++) {
                    <span class="hljs-type">Point</span> <span class="hljs-variable">pr</span> <span class="hljs-operator">=</span> set[j];
                    <span class="hljs-type">double</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> distanceOfTwoPoint(pl, pr);
                    <span class="hljs-comment">// process 5.4.3</span>
                    <span class="hljs-keyword">if</span> (tmp &lt; dis &amp;&amp; tmp != <span class="hljs-number">0</span>) {
                        ans[<span class="hljs-number">0</span>] = pl;
                        ans[<span class="hljs-number">1</span>] = pr;
                        midAnsD = tmp;
                    }
                }
            }
        }
        <span class="hljs-keyword">if</span> (midAnsD &lt;= dis) {
            <span class="hljs-keyword">return</span> ans;
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ld &lt;= rd) {
            <span class="hljs-keyword">return</span> leftAns;
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">return</span> rightAns;
        }
    }
    <span class="hljs-keyword">return</span> ans;
}
</code></pre>
<h4 id="conclution">Conclution</h4>
<p>解法如果不知道<strong>那个事实</strong>的话，一般人是想不到的，而且还有更优化的理论，能把 6 个点缩为 4 个点，具体的引用可以<a href="https://blog.csdn.net/sinat_35678407/article/details/82874216">参考</a></p>
<p>反正在解法中，无论是规模减半还是合并子问题，算法都只需要线性的时间，而对 P 的排序我们可以选择一个**O(nlogn)**的算法，那么整体的算法效率也将是这个值，这也是该问题的最优效率</p>
<p>这也是这个问题很 tricky 的地方，关于排序，我自己选择是经过我自己优化的短几行的堆排序，它的效率正好是**O(nlogn)**：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> Point[] sortByX(Point[] set) {
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; set.length - <span class="hljs-number">1</span>; i++) {
        <span class="hljs-type">int</span> <span class="hljs-variable">heapLength</span> <span class="hljs-operator">=</span> set.length - i;
        <span class="hljs-type">int</span> <span class="hljs-variable">lastParentIndex</span> <span class="hljs-operator">=</span> (heapLength - <span class="hljs-number">2</span>) / <span class="hljs-number">2</span>;
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> lastParentIndex; j &gt;= <span class="hljs-number">0</span>; j--) {
            <span class="hljs-type">int</span> <span class="hljs-variable">leftChildIndex</span> <span class="hljs-operator">=</span> j * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>;
            <span class="hljs-type">int</span> <span class="hljs-variable">rightChildIndex</span> <span class="hljs-operator">=</span> leftChildIndex + <span class="hljs-number">1</span>;
            <span class="hljs-type">int</span> <span class="hljs-variable">bigIndex</span> <span class="hljs-operator">=</span> leftChildIndex;
            <span class="hljs-keyword">if</span> (rightChildIndex &lt; heapLength
                    &amp;&amp; set[rightChildIndex].x &gt; set[leftChildIndex].x) {
                bigIndex = rightChildIndex;
            }
            <span class="hljs-keyword">if</span> (set[bigIndex].x &gt; set[j].x) {
                swap(set, bigIndex, j);
            }
        }
        swap(set, <span class="hljs-number">0</span>, heapLength - <span class="hljs-number">1</span>);
    }
    <span class="hljs-keyword">return</span> set;
}
</code></pre>
<h4 id="test-case">Test Case</h4>
<pre><code class="hljs language-java"><span class="hljs-keyword">private</span> Point[] set = {
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>),
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">0.5</span>, <span class="hljs-number">2</span>),
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>),
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>),
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>),
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(<span class="hljs-number">1</span>, <span class="hljs-number">7</span>),
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(-<span class="hljs-number">0.5</span>, <span class="hljs-number">2</span>),
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(-<span class="hljs-number">1</span>, <span class="hljs-number">1</span>),
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>),
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(-<span class="hljs-number">1</span>, <span class="hljs-number">5</span>),
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Point</span>(-<span class="hljs-number">1</span>, <span class="hljs-number">7</span>),
};
<span class="hljs-meta">@Test</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSolution2</span><span class="hljs-params">()</span>{
    Point[] points = sortByX(set);
    System.out.println(Arrays.toString(points));
    System.out.println(Arrays.toString(shortestDistance2(points, <span class="hljs-number">0</span>, set.length - <span class="hljs-number">1</span>)));
}
</code></pre>
