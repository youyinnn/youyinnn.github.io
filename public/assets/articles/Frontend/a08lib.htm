<p></p><div class="saying mb-4"><div class="saying-quote saying-left-quote">“</div><div class="saying-quote saying-right-quote">”</div>
<p>惊！仅用前端技术就可以打造跨平台桌面应用！</p>
<p></p></div>
<h3 id="快速入门">快速入门</h3>
<hr>
<p>简单介绍一下什么是 Electron：</p>
<blockquote>
<p>如果你只会前端技术，如果你想打造一个桌面应用，如果你不想学 C#、Swing 之类的技术，那么 Electron 绝对是你的不二之选。</p>
<p>它的本质就是提供一个轻巧的 chrome 内核（其实也有 131M），把你的项目包在里面运行，等于是你项目的专属浏览器！</p>
<p>为什么想要使用这门技术，首先非常有趣，其次我只是个半吊子的前端选手，写项目完全不存在浏览器兼容性考虑这回事（我觉得兼容考虑就是前端开发届的一大毒瘤之一），我写的项目全部基于 Chrome 的 V8，IE 什么的傻逼浏览器我是不会去管的。因此你如果想要使用我的项目，要么使用 Chrome，要么使用我项目打包成的桌面应用咯- -</p>
</blockquote>
<p>然后这篇基本就算官网<a href="https://electronjs.org/docs/tutorial/quick-start">快速入门</a>的照搬</p>
<p>我开始上的是中文网，它的快速入门文档我觉得还是有点对菜鸟不友好，整个文档，居然没教怎么安装！</p>
<p>它只说是 npm 安装，但是没说具体安装哪一个！！这太不友好了！</p>
<p>关键 Electron 中文网并没有原官网的<code>博客</code>模块！！百度一下之后找到<a href="https://electronjs.org/blog/npm-install-electron">此文</a>，里面提到怎么安装 electron。</p>
<p>在这里提醒一下：</p>
<p><strong>千万不要</strong>使用 Electron 中文网：<a href="https://electron.org.cn/">https://electron.org.cn/</a></p>
<p><strong>千万要</strong>使用原官网：<a href="https://electronjs.org/">https://electronjs.org/</a></p>
<p>原官网也支持中文！中文网的内容有缺失！</p>
<p>所以我们可以正式开始了！</p>
<h3 id="安装">安装</h3>
<hr>
<p>贴一个 Electron 的 github 项目地址：<a href="https://github.com/electron/electron">https://github.com/electron/electron</a> ，里面有安装说明。</p>
<p>我觉得玩什么东西，安装才是第一步！</p>
<blockquote>
<p>环境准备：node.js 以及 npm 是必须的，git 就不用说了。</p>
</blockquote>
<p>然后以下命令进行全局安装（就全局，不要怂）：</p>
<pre><code class="hljs language-shell">npm install electron --save-dev -g
</code></pre>
<p>如果安装的时候卡住了的话，可能是因为 electron 的源被墙了的原因，解决：</p>
<p>修改~/.npmrc 文件，加入如下代码：</p>
<pre><code class="hljs language-cpp">registry=https:<span class="hljs-comment">//registry.npm.taobao.org</span>
electron_mirror=<span class="hljs-string">&quot;https://npm.taobao.org/mirrors/electron/&quot;</span>
</code></pre>
<h3 id="基本概念">基本概念</h3>
<hr>
<h4 id="主进程">主进程</h4>
<blockquote>
<p>在 <code>Electron</code> 里，运行 <code>package.json</code> 里 <code>main</code> 脚本的进程被称为主进程。在主进程运行的脚本可以以创建 web 页面的形式展示 GUI。</p>
</blockquote>
<h4 id="渲染进程">渲染进程</h4>
<blockquote>
<p>由于 <code>Electron</code> 使用 <code>Chromium</code> 来展示页面，所以 <code>Chromium</code> 的多进程结构也被充分利用。每个 <code>Electron</code> 的页面都在运行着自己的进程，这样的进程我们称之为渲染进程。</p>
<p>在一般浏览器中，网页通常会在沙盒环境下运行，并且不允许访问原生资源。然而，<code>Electron</code> 用户拥有在网页中调用 <code>Node.js</code> 的 <code>APIs</code> 的能力，可以与底层操作系统直接交互。</p>
</blockquote>
<h4 id="主进程与渲染进程的区别">主进程与渲染进程的区别</h4>
<blockquote>
<p>主进程使用 <code>BrowserWindow</code> 实例创建页面。每个 <code>BrowserWindow</code> 实例都在自己的渲染进程里运行页面。当一个 <code>BrowserWindow</code> 实例被销毁后，相应的渲染进程也会被终止。</p>
<p>主进程管理所有页面和与之对应的渲染进程。每个渲染进程都是相互独立的，并且只关心他们自己的页面。</p>
<p>由于在页面里管理原生 <code>GUI</code> 资源是非常危险而且容易造成资源泄露，所以在页面调用 <code>GUI</code> 相关的 <code>APIs</code> 是不被允许的。如果你想在网页里使用 <code>GUI</code> 操作，其对应的渲染进程必须与主进程进行通讯，请求主进程进行相关的 <code>GUI</code> 操作。</p>
<p>在 <code>Electron</code>，我们提供几种方法用于主进程和渲染进程之间的通讯。像 <code>ipcRenderer</code> 和 <code>ipcMain</code> 模块用于发送消息， <code>remote</code> 模块用于 <code>RPC</code> 方式通讯。这些内容都可以在一个 FAQ 中查看 <a href="https://electron.org.cn/doc/faq.html#how-to-share-data-between-web-pages">how to share data between web pages</a>。</p>
</blockquote>
<h3 id="helloworld">HelloWorld</h3>
<hr>
<p>大体上，一个<code>Electron</code>应用的目录结构如下：</p>
<pre><code>your-app/
├── package.json
├── main.js
└── index.html
</code></pre>
<p><code>package.json</code>的格式和 Node 完全一致，而且被 main 字段声明的脚本文件是你的应用的启动脚本，它运行在主进程上。你应用里的<code>package.json</code>看起来应该：</p>
<pre><code class="hljs language-json"><span class="hljs-punctuation">{</span>
  <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;your-app&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.1.0&quot;</span><span class="hljs-punctuation">,</span>
  <span class="hljs-attr">&quot;main&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;main.js&quot;</span>
<span class="hljs-punctuation">}</span>
</code></pre>
<p><strong>注意：如果 main 字段没有在 package.json 声明，Electron 会优先加载 index.js。</strong></p>
<p><code>main.js</code> 应该用于创建窗口和处理系统事件，一个典型的例子如下：</p>
<pre><code class="hljs language-JavaScript"><span class="hljs-keyword">const</span> {app, <span class="hljs-title class_">BrowserWindow</span>} = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;electron&#x27;</span>)
<span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;path&#x27;</span>)
<span class="hljs-keyword">const</span> url = <span class="hljs-built_in">require</span>(<span class="hljs-string">&#x27;url&#x27;</span>)

<span class="hljs-comment">// 保持一个对于 window 对象的全局引用，如果你不这样做，</span>
<span class="hljs-comment">// 当 JavaScript 对象被垃圾回收， window 会被自动地关闭</span>
<span class="hljs-keyword">let</span> win

<span class="hljs-keyword">function</span> <span class="hljs-title function_">createWindow</span> () {
  <span class="hljs-comment">// 创建浏览器窗口。</span>
  win = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BrowserWindow</span>({<span class="hljs-attr">width</span>: <span class="hljs-number">800</span>, <span class="hljs-attr">height</span>: <span class="hljs-number">600</span>})

  <span class="hljs-comment">// 加载应用的 index.html。</span>
  win.<span class="hljs-title function_">loadURL</span>(url.<span class="hljs-title function_">format</span>({
    <span class="hljs-attr">pathname</span>: path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&#x27;index.html&#x27;</span>),
    <span class="hljs-attr">protocol</span>: <span class="hljs-string">&#x27;file:&#x27;</span>,
    <span class="hljs-attr">slashes</span>: <span class="hljs-literal">true</span>
  }))

  <span class="hljs-comment">// 打开开发者工具。</span>
  win.<span class="hljs-property">webContents</span>.<span class="hljs-title function_">openDevTools</span>()

  <span class="hljs-comment">// 当 window 被关闭，这个事件会被触发。</span>
  win.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;closed&#x27;</span>, <span class="hljs-function">() =&gt;</span> {
    <span class="hljs-comment">// 取消引用 window 对象，如果你的应用支持多窗口的话，</span>
    <span class="hljs-comment">// 通常会把多个 window 对象存放在一个数组里面，</span>
    <span class="hljs-comment">// 与此同时，你应该删除相应的元素。</span>
    win = <span class="hljs-literal">null</span>
  })
}

<span class="hljs-comment">// Electron 会在初始化后并准备</span>
<span class="hljs-comment">// 创建浏览器窗口时，调用这个函数。</span>
<span class="hljs-comment">// 部分 API 在 ready 事件触发后才能使用。</span>
app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;ready&#x27;</span>, createWindow)

<span class="hljs-comment">// 当全部窗口关闭时退出。</span>
app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;window-all-closed&#x27;</span>, <span class="hljs-function">() =&gt;</span> {
  <span class="hljs-comment">// 在 macOS 上，除非用户用 Cmd + Q 确定地退出，</span>
  <span class="hljs-comment">// 否则绝大部分应用及其菜单栏会保持激活。</span>
  <span class="hljs-keyword">if</span> (process.<span class="hljs-property">platform</span> !== <span class="hljs-string">&#x27;darwin&#x27;</span>) {
    app.<span class="hljs-title function_">quit</span>()
  }
})

app.<span class="hljs-title function_">on</span>(<span class="hljs-string">&#x27;activate&#x27;</span>, <span class="hljs-function">() =&gt;</span> {
  <span class="hljs-comment">// 在这文件，你可以续写应用剩下主进程代码。</span>
  <span class="hljs-comment">// 也可以拆分成几个文件，然后用 require 导入。</span>
  <span class="hljs-keyword">if</span> (win === <span class="hljs-literal">null</span>) {
    <span class="hljs-title function_">createWindow</span>()
  }
})

<span class="hljs-comment">// 在这文件，你可以续写应用剩下主进程代码。</span>
<span class="hljs-comment">// 也可以拆分成几个文件，然后用 require 导入。</span>
</code></pre>
<p>最后，你想展示的 <code>index.html</code>：</p>
<pre><code class="hljs language-html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello World!<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span>
    We are using node
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">
      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(process.<span class="hljs-property">versions</span>.<span class="hljs-property">node</span>);
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
    , Chrome
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">
      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(process.<span class="hljs-property">versions</span>.<span class="hljs-property">chrome</span>);
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
    , and Electron
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">
      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">write</span>(process.<span class="hljs-property">versions</span>.<span class="hljs-property">electron</span>);
    </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
    .
  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
</code></pre>
<h3 id="run-helloworld">Run HelloWorld</h3>
<hr>
<p>一旦你创建了最初的 <code>main.js</code>， <code>index.html</code> 和<code> package.json</code> 这几个文件，你可能会想尝试在本地运行并测试，看看是不是和期望的那样正常运行。</p>
<p>安装文档说明，运行 electron 应用的方式有两种：</p>
<ul>
<li>npm 安装 electron 模块 使用模块运行</li>
<li>直接使用二进制文件运行</li>
</ul>
<p>如果你没有 nodejs 环境，你可以考虑使用二进制文件运行应用。</p>
<p>使用模块去运行 electron 应用的命令是这样的：</p>
<p><em>electron 是一个 npm 模块，包含所使用的 Electron 预编译版本。 如果你已经用 npm 全局安装了它，你只需要按照如下方式直接运行你的应用：</em></p>
<pre><code class="hljs language-shell">electron .
</code></pre>
<p>下面是我自己的演示：</p>
<ul>
<li><p>目录结构：
<img src="../../img/302c77ea7393fa19e487b69fc98ec917.webp" alt="electron1"></p>
</li>
<li><p>运行：
<img src="../../img/e003ac2bb2e4383b892641cba60ba100.webp" alt="electron2"></p>
</li>
<li><p>界面：
<img src="../../img/7617fb5337cfd6d0e19a74b1a7968cc9.webp" alt="electron3"></p>
</li>
</ul>
<hr>
<p>然后官网里还给了一个 quickstar 项目，那个项目没必要跑了，内容基本和上面的 HelloWorld 是一样的。</p>
<p>这样 Electron 的 HelloWorld 的体验已经完成了！前端变桌面应用的感觉巨奇妙！超级期待后面的学习！</p>
