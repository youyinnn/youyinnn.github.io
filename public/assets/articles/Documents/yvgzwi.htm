<p></p><div class="saying mb-4"><div class="saying-quote saying-left-quote">“</div><div class="saying-quote saying-right-quote">”</div>
<p>Layout：定制你的输出模式</p>
<p></p></div>


<p><a href="https://logging.apache.org/log4j/2.x/manual/layouts.html">Layouts</a>里提到了许多种 Layout 方式，我最常用的是 PatternLayout。</p>
<h3 id="pattern-layout-模式输出">Pattern Layout 模式输出</h3>
<p>是一种通过 pattern 字符串来配置的灵活的输出方式。</p>
<p>属性：</p>
<ul>
<li>charset：string：所使用的字符集</li>
<li>pattern：string：定制你的输出模式</li>
<li>header：string：这是一个可选项，它会包含在每个 log 文件的开头</li>
<li>footer：string：这是一个可选项....</li>
</ul>
<h4 id="patterns">Patterns</h4>
<h5 id="logger-name-模式">Logger Name 模式</h5>
<p><code>c{precision}</code>
<code>logger{precision}</code></p>
<p>用例：</p>
<p><img src="../../img/0c7bcdb7e018e47007e1f94164a2b626.webp" alt="class pattern"></p>
<h4 id="class-模式">Class 模式</h4>
<p><code>C{precision}</code>
<code>class{precision}</code></p>
<h5 id="date-模式">Date 模式</h5>
<p><code>d{pattern} &amp; date{pattern}</code></p>
<p>用例：</p>
<p><img src="../../img/782b42701d03650c07a92766558d225f.webp" alt="date pattern"></p>
<h4 id="line-模式">Line 模式</h4>
<p><code>%L</code>：输出报出 issue 的 logger 的行数
<code>%l</code>：输出更详细的行数信息</p>
<h4 id="message-信息模式">Message 信息模式</h4>
<p><code>%msg</code>：输出 logger 的信息</p>
<h4 id="method-模式">Method 模式</h4>
<p><code>%M</code>：输出 logger 所在的方法</p>
<h4 id="n-模式">n 模式</h4>
<p><code>%n</code>：输出系统支持的行分隔符，比如<code>\n</code>或者<code>\r\n</code></p>
<h4 id="n-模式-1">N 模式</h4>
<p><code>%N</code>：输出调用 Log 事件时的:<code>System.nanoTime()</code></p>
<h4 id="pid-模式">pid 模式</h4>
<p><code>%pid</code>：输出程序的 pid</p>
<h4 id="level-模式">level 模式</h4>
<p><code>p|level{level=label, level=label, ...}</code>：指定每个级别的别名
<code>p|level{lowerCase=true|false}</code>：指定级别是否小写</p>
<h4 id="thread-模式">Thread 模式</h4>
<p><code>%t</code>: 输出调用 Log 事件时所处的线程名
<code>%tid</code>: 输出调用 Log 事件时所处的线程 id</p>
<h4 id="context-模式">Context 模式</h4>
<p><code>%X{key[,key2...]}</code>: 输出存在 ThreadContext 里的键所对应的值</p>
