<h3 id="前提">前提</h3>
<p>当年玩上博客的时候，整过很多活儿，什么 Hexo，WP 甚至 Jekyll 都来了，还搭到服务器上用 nginx，然后各种域名、备案、CNAME 各种乱搞</p>
<p>后面累了，不想折腾了，直接挂 github pages，然后就还是用 hexo</p>
<p>后面要学前端的时候直接想着，自己写一个博客页面，正好修炼一下，于是就又开始折腾了</p>
<p>最终定下方案：</p>
<ol>
<li>md 文件自己一个<strong>仓库</strong></li>
<li>博客自己一个<strong>仓库</strong>，博文放 issues 中，然后前端调用<strong>github api</strong>去获取博文内容，然后客户端调用**<a href="https://github.com/pandao/editor.md">editor.md</a>**实时渲染</li>
<li>评论也是放 issues 下面，调用<strong>github api</strong></li>
<li>后期因为手动两头更新很麻烦，自己在服务器上搞了个 Jenkins，两个仓库都挂钩子，这边更新 issues，那边创建 md 文档然后 push；或者这边本地写好 md 文档，那边开新的 issues；这个过程都由 Jenkins 接到钩子请求然后执行一个自己写的<strong>处理程序</strong>；</li>
</ol>
<p>其中过程实在是无比繁杂，而且表现非常烂，整个博客非常依赖<strong>github</strong>和<strong>github api</strong>，然后还<strong>依赖域名服务器</strong>，有段事件备案挂了，直接钩子停工。</p>
<p>然后一咬牙，改！基本需求如下：</p>
<h4 id="现在是什么样">现在是什么样</h4>
<ol>
<li>基于 issues</li>
<li>本地浏览器，用 token 调用 api</li>
<li>md 浏览器实时渲染</li>
<li>原稿和 issues 分两个仓库，虽然两头都可以更新，但是依赖 Jenkins，依赖服务器和域名</li>
<li>无分类、标签管理</li>
<li>七牛云图床，依赖域名</li>
<li>目录树需要在浏览器手动更新</li>
<li>搜索依赖第三方</li>
</ol>
<h4 id="想变成什么样">想变成什么样</h4>
<ol>
<li>尽量去 token</li>
<li>免渲染</li>
<li>去掉图床依赖</li>
<li>一个仓库，免 Jenkins 依赖，免后台依赖，免手动更新目录树</li>
<li>一个客户端<ol>
<li>文章管理</li>
<li>图片管理</li>
<li>分类、标签管理</li>
<li>基于 git、electron</li>
<li>发布 script 和 todo</li>
<li>友链管理</li>
</ol>
</li>
</ol>
<h3 id="博客内容的处理">博客内容的处理</h3>
<h4 id="静态化">静态化</h4>
<p>现有的博客内容有：</p>
<ol>
<li>所有的博文；</li>
<li>about、scripts、todos、resume 等内容；</li>
<li>一些额外的数据，比如友链；</li>
</ol>
<p>除了友链之外，其他都是 md 文档，我就干脆直接：</p>
<ol>
<li>本地用<a href="https://github.com/markedjs/marked">marked</a>转换 md 文档为 html</li>
<li>然后转换出的 html 再拼接到我的主体 HTML 文件中，单独生成一个 HTML 文件</li>
<li>转换的过程中，生成一些博客页面需要的元数据，比如博客的前面内容的截取、博客的字数、博客的 title 等，封装成一个 cache.js，注入到所有的 HTML 页面中</li>
<li>友链也是读取内容然后生成 js 文件，又 HTML 去注入</li>
</ol>
<p>这样，博客目前除了评论之外的所有数据都是<strong>静态化</strong>的，由本地生成，然后推上去部署就行了。</p>
<h4 id="动态资源的生成以及导入的处理">动态资源的生成以及导入的处理</h4>
<p>因为一个博文生成一个 HTML，上百篇博文上百个 HTML，所以 HTML 的主体内容和资源，应该尽量静态，比如 JS 资源、CSS 资源，原来的资源导入方式都是写<code>&lt;link&gt;</code>标签和<code>&lt;script&gt;</code>标签去导入，现在不行了，更新一个资源要更新上百个 HTML，于是做了资源统一的入口，CSS 资源就很简单，统一到一个<code>style.css</code>然后在这里导入就行了：</p>
<pre><code class="hljs language-css"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;./default.css&quot;</span>;
<span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;./main.css&quot;</span>;
<span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;./media.css&quot;</span>;

<span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/youyinnn/youyinnn.github.io@master/css/bootstrap.min.css&quot;</span>;
<span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/youyinnn/youyinnn.github.io@master/css/editormd.preview.min.css&quot;</span>;
<span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/highlightjs/highlight.js@9-18-stable/src/styles/github-gist.css&quot;</span>;
<span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;https://cdn.jsdelivr.net/gh/daneden/animate.css@master/animate.min.css&quot;</span>;
<span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.css&quot;</span>;
</code></pre>
<p>JS 资源有点麻烦，因为有的资源是要在<code>&lt;head&gt;</code>标签里导入，有的是要在<code>&lt;/body&gt;</code>之前导入，于是找到了一个<a href="https://github.com/eldargab/load-script">load-script</a>, 统一成一个<code>scriptlist.js</code>然后分别导入就行了：</p>
<pre><code class="hljs language-javascript"><span class="hljs-comment">// &lt;head&gt;里要导入的资源</span>
<span class="hljs-keyword">var</span> before = [
    ...
]
<span class="hljs-comment">// 博客的额外资源，比如友链和元数据 但是元数据资源可能会生成一个很大的js，所以用cdn去导入</span>
<span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; resourcesList.<span class="hljs-property">length</span>; i++) {
    <span class="hljs-keyword">if</span> (location.<span class="hljs-property">hostname</span> !== <span class="hljs-string">&#x27;youyinnn.github.io&#x27;</span>) {
        resourcesList[i] = <span class="hljs-string">&#x27;/resources/&#x27;</span> + resourcesList[i]
    } <span class="hljs-keyword">else</span> {
        resourcesList[i] = <span class="hljs-string">&#x27;cdn&#x27;</span> + resourcesList[i]
    }
}
<span class="hljs-comment">// &lt;/body&gt; 之前导入的资源 比如jquery等 以及自己的js资源</span>
<span class="hljs-keyword">var</span> after = [
    ...
]
after = resourcesList.<span class="hljs-title function_">concat</span>(after)
<span class="hljs-keyword">function</span> <span class="hljs-title function_">importJsBeforeLoad</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">for</span> (path <span class="hljs-keyword">of</span> before) {
        <span class="hljs-title function_">load</span>(path, {
            <span class="hljs-attr">async</span>: <span class="hljs-literal">false</span>
        })
    }
}
<span class="hljs-comment">// 直接执行</span>
importJsBeforeLoad()

<span class="hljs-keyword">function</span> <span class="hljs-title function_">importJsAfterLoad</span>(<span class="hljs-params"></span>) {
    <span class="hljs-keyword">let</span> map = {}
    map.<span class="hljs-property">defer</span> = <span class="hljs-literal">true</span>
    <span class="hljs-keyword">for</span> (path <span class="hljs-keyword">of</span> after) {
        <span class="hljs-title function_">load</span>(path, {
            <span class="hljs-attr">async</span>: <span class="hljs-literal">false</span>,
            <span class="hljs-attr">attrs</span>: map
        },<span class="hljs-keyword">function</span> (<span class="hljs-params">err, script</span>) {
            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">debug</span>(script.<span class="hljs-property">src</span>)
        })
    }
    <span class="hljs-comment">// 一些需要特殊标签参数的资源单独导入</span>
    map.<span class="hljs-property">integrity</span> = <span class="hljs-string">&#x27;sha---&#x27;</span>
    map.<span class="hljs-property">crossorigin</span> = <span class="hljs-string">&#x27;anonymous&#x27;</span>
    <span class="hljs-title function_">load</span>(<span class="hljs-string">&#x27;katex.min.js&#x27;</span>, {
        <span class="hljs-attr">async</span>: <span class="hljs-literal">false</span>,
        <span class="hljs-attr">attrs</span>: map
    })
    map.<span class="hljs-property">integrity</span> = <span class="hljs-string">&#x27;sha---&#x27;</span>
    <span class="hljs-title function_">load</span>(<span class="hljs-string">&#x27;auto-render.min.js&#x27;</span>, {
        <span class="hljs-attr">async</span>: <span class="hljs-literal">false</span>,
        <span class="hljs-attr">attrs</span>: map
    }, <span class="hljs-function">() =&gt;</span> {
        <span class="hljs-keyword">for</span> (el <span class="hljs-keyword">of</span> <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(<span class="hljs-string">&#x27;markdown-body&#x27;</span>)) {
            <span class="hljs-title function_">renderMathInElement</span>(el)
        }
    })
}
<span class="hljs-comment">// 等DOMContentLoaded之后导入</span>
<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;DOMContentLoaded&#x27;</span>, <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
    importJsAfterLoad()
})
</code></pre>
<h3 id="去掉的东西">去掉的东西</h3>
<ul>
<li><a href="https://github.com/pandao/editor.md">editor.md</a>没有博客端选软 md 的需求了；</li>
<li><a href="https://github.com/afeld/emoji-css">emoji.css</a>这玩意要用推特的图片资源，非常慢；</li>
<li><a href="https://github.com/adrai/flowchart.js">flowchart.js</a> 这玩意的 cdn 非常慢（cdn.clouldflare.com 真菜，还是 jsdelivr 牛皮），而且很多博客没什么必要使用 md 语法去写流程图，直接画图然后上传图片多好，而且还是实时渲染的；</li>
<li>github api，速度是真的慢，静态化就没必要用它了</li>
</ul>
<h3 id="新操作">新操作</h3>
<h4 id="动态插入script标签">动态插入&lt;script&gt;标签</h4>
<p>这个之前提到过，如果写死<code>&lt;script&gt;</code>标签去加载 JS 资源，那么主体 HTML 一变，上百个根据主体 HTML 生成的文章 HTML 就得跟着变，所以主体留一个 js，这个 js 负责用代码动态插入 JS 资源，这样整个主体 HTML 就只剩：</p>
<pre><code class="hljs language-html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>blog | youyinnn<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>

    // 动态加载JS资源的函数定义
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/myjs/loadscripts.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/myjs/jump-1.2.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;/mycss/style.css&quot;</span> /&gt;</span>

    // 就在这里调用scriptlist.js
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/resources/resources.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/myjs/scriptlist.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    <span class="hljs-comment">&lt;!--&gt; 主体内容 &lt;--&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
</code></pre>
<p>要更新 JS 资源的话 就更改<code>scriptlist.js</code>的内容就行了</p>
<h4 id="固定唯一-id-生成crc-技术">固定唯一 ID 生成——CRC 技术</h4>
<h5 id="什么是crc？">什么是<a href="https://baike.baidu.com/item/CRC/1453359?fr=aladdin">CRC</a>？</h5>
<blockquote>
<p>循环冗余校验（Cyclic Redundancy Check， CRC）是一种根据网络数据包或计算机文件等数据产生简短固定位数校验码的一种<a href="https://baike.baidu.com/item/%E4%BF%A1%E9%81%93%E7%BC%96%E7%A0%81%E6%8A%80%E6%9C%AF/2366288">信道编码技术</a>，主要用来检测或校验数据传输或者保存后可能出现的错误。它是利用除法及余数的原理来作错误侦测的。</p>
</blockquote>
<p>感觉和 MD5、SHA 算法差不多，都是生成唯一串做数据校验，但是 CRC 的计算方式不一样、安全性比前两者小、计算效率高，而且 CRC 值比前两者的 Hash 值要简短很多，<a href="https://yq.aliyun.com/articles/233027">参考</a>。</p>
<h5 id="为什么要生成唯一-id？">为什么要生成唯一 ID？</h5>
<p>用途有 2 个：</p>
<ol>
<li><p>文章是中文名，这个做浏览器 URL 路径处理的时候挺麻烦的，转码之后各种%，还挺长的，特别不美观，这方面参考了 hexo 的插件<a href="https://github.com/Rozbo/hexo-abbrlink">abbrlink</a>的做法使用了 CRC</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">for</span> (pname <span class="hljs-keyword">of</span> postsrs) {
  <span class="hljs-keyword">let</span> abbrlink = <span class="hljs-title function_">crc32</span>(pname).<span class="hljs-title function_">toString</span>(<span class="hljs-number">36</span>);
  <span class="hljs-title function_">md2html</span>(
    path.<span class="hljs-title function_">join</span>(postsPath, pname),
    path.<span class="hljs-title function_">join</span>(__dirname, <span class="hljs-string">&quot;..&quot;</span>, <span class="hljs-string">&quot;article&quot;</span>, abbrlink + <span class="hljs-string">&quot;.html&quot;</span>),
    <span class="hljs-keyword">function</span> (<span class="hljs-params">sourceMdStr</span>) {
      <span class="hljs-comment">// md处理</span>
    }
  );
}
</code></pre>
</li>
<li><p>由于 cache 文件很大，所以要用 cdn，但是每次 cache 文件在每次本地静态渲染之后，内容都会发生改变，所以每次都要生成不同文件名的 cache 文件才能保证 cdn 能用上最新的 cache 文件</p>
</li>
</ol>
<h4 id="ip-检测跳转-gitee">IP 检测跳转 Gitee</h4>
<h5 id="寻找免费公共接口">寻找免费公共接口</h5>
<ul>
<li><p>国内：</p>
<ul>
<li><p>搜狐</p>
<ul>
<li><a href="https://link.jianshu.com?t=http://pv.sohu.com/cityjson">http://pv.sohu.com/cityjson</a></li>
<li><a href="https://link.jianshu.com?t=http://pv.sohu.com/cityjson?ie=utf-8">http://pv.sohu.com/cityjson?ie=utf-8</a></li>
<li><a href="https://link.jianshu.com?t=http://txt.go.sohu.com/ip/soip">http://txt.go.sohu.com/ip/soip</a></li>
</ul>
<p>其中有一个支持 https，但是有跨域问题，如果使用<code>&lt;script&gt;</code>标签解决跨域的话，它的代码是直接注入的，而不是返回的 callback，而且因为没有正式的开放信息，只是搜出来的，不知道什么时候就下线了</p>
</li>
<li><p>某大佬个人维护的免费开放接口平台：<a href="https://github.com/MZCretin/RollToolsApi%EF%BC%8C%E6%9C%89https%EF%BC%8C%E6%9C%89%E8%B7%A8%E5%9F%9F%EF%BC%8C%E4%BD%86%E6%98%AF%E5%9B%A0%E4%B8%BA%E6%98%AF%E4%B8%AA%E4%BA%BA%E7%BB%B4%E6%8A%A4%EF%BC%8C%E8%BF%98%E6%98%AF%E6%80%95%E4%B8%8D%E7%A8%B3%E5%AE%9A%EF%BC%8C%E8%99%BD%E7%84%B6%E6%9C%89%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%91%E6%8E%A7%EF%BC%9B%E4%B9%9F%E6%98%AF%E7%AC%AC%E4%B8%80%E7%89%88%E8%B7%B3%E8%BD%ACipcheck">https://github.com/MZCretin/RollToolsApi，有https，有跨域，但是因为是个人维护，还是怕不稳定，虽然有小程序监控；也是第一版跳转ipcheck</a></p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">var</span> xmlhttp2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();
xmlhttp2.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) {
  <span class="hljs-keyword">if</span> (xmlhttp2.<span class="hljs-property">readyState</span> == <span class="hljs-number">4</span> &amp;&amp; xmlhttp2.<span class="hljs-property">status</span> == <span class="hljs-number">200</span>) {
    <span class="hljs-keyword">let</span> rsjson = <span class="hljs-title class_">JSON</span>.<span class="hljs-title function_">parse</span>(xmlhttp2.<span class="hljs-property">responseText</span>);
    <span class="hljs-keyword">if</span> (rsjson.<span class="hljs-property">data</span>.<span class="hljs-property">provinceId</span> !== <span class="hljs-number">999999</span>) {
      <span class="hljs-comment">// chinese visitor</span>
      <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;__ischinese&quot;</span>, <span class="hljs-string">&quot;yes&quot;</span>);
    } <span class="hljs-keyword">else</span> {
      <span class="hljs-comment">// foreign visitor</span>
      <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;__isforeigner&quot;</span>, <span class="hljs-string">&quot;yes&quot;</span>);
    }
  }
};
xmlhttp2.<span class="hljs-title function_">open</span>(
  <span class="hljs-string">&quot;GET&quot;</span>,
  <span class="hljs-string">&quot;https://www.mxnzp.com/ip/self?app_id=123&amp;app_secret=456&quot;</span>,
  <span class="hljs-literal">true</span>
);
xmlhttp2.<span class="hljs-title function_">send</span>();
</code></pre>
</li>
<li><p>百度地图开放 API：<a href="http://lbs.baidu.com/index.php?title=webapi/ip-api">http://lbs.baidu.com/index.php?title=webapi/ip-api</a></p>
<p>虽然跨域，但是好在有 callback，不用怕注入，而且平台是正式开放的；虽然文档里没有 callback 的说明，我还是搜出来了，确实接口支持 callback，这也是我现在使用的跳转 ipcheck</p>
<pre><code class="hljs language-javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">cb</span>(<span class="hljs-params">rs</span>) {
  <span class="hljs-keyword">if</span> (rs.<span class="hljs-property">status</span> === <span class="hljs-number">0</span>) {
    <span class="hljs-comment">// chinese visitor</span>
    <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;__ischinese&quot;</span>, <span class="hljs-string">&quot;yes&quot;</span>);
  } <span class="hljs-keyword">else</span> {
    <span class="hljs-comment">// foreign visitor</span>
    <span class="hljs-variable language_">sessionStorage</span>.<span class="hljs-title function_">setItem</span>(<span class="hljs-string">&quot;__isforeigner&quot;</span>, <span class="hljs-string">&quot;yes&quot;</span>);
  }
}

<span class="hljs-comment">// loadscript.js</span>
<span class="hljs-title function_">load</span>(<span class="hljs-string">&quot;https://api.map.baidu.com/location/ip?ak=12345&amp;callback=cb&quot;</span>, {
  <span class="hljs-attr">async</span>: <span class="hljs-literal">true</span>,
});
</code></pre>
</li>
</ul>
</li>
<li><p>国外：</p>
<ul>
<li><a href="https://ip-api.com/">ip-api</a> https 要会员</li>
<li><a href="https://freegeoip.app/">freegeoip</a> 还行 免费 https 每小时 1 万 5 的请求 比下面的快</li>
<li><a href="https://ipinfo.io/developers#https-ssl">ipinfo</a> https 免费 速度慢点</li>
</ul>
</li>
</ul>
<h5 id="github-pages-build-的坑">Github Pages Build 的坑</h5>
<p>因为会有页面跳转的逻辑，所以 Github Pages Build 肯定会失败，导致网站无法上线。可以通过在根目录下创建<code>.nojekyll</code>文件来 passby Jekyll Build 的过程，直接上线。</p>
<blockquote>
<p><a href="https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages/">https://github.blog/2009-12-29-bypassing-jekyll-on-github-pages/</a></p>
<p>It is now possible to completely bypass Jekyll processing on <a href="http://pages.github.com/">GitHub Pages</a> by creating a file named <code>.nojekyll</code> in the root of your pages repo and pushing it to GitHub. This should only be necessary if your site uses files or directories that start with underscores since Jekyll considers these to be special resources and does not copy them to the final site.</p>
</blockquote>
<blockquote>
<p><a href="https://stackoverflow.com/questions/25262183/github-page-build-failure">https://stackoverflow.com/questions/25262183/github-page-build-failure</a></p>
<p>By default in a github repository, the <strong>gh-pages</strong> branch is build with <strong>Jekyll</strong>.</p>
<p>If you have underscored folders (eg: _myfolder) Jekyll tries to build. If they are not real Jekyll folders, this breaks the build.</p>
<p>If you don&#39;t want to process you html/js code, add a <strong>.nojekyll</strong> file at the root of your code. Github will then not try to build, it will just serve your pages as is.</p>
<p>More info in <a href="https://help.github.com/articles/using-jekyll-with-pages#turning-jekyll-off">Github pages doc</a></p>
</blockquote>
