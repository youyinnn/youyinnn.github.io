<h3 id="163sumclosestmedium">16.3SumClosest(Medium)</h3>
<p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>
<p><strong>Example:</strong></p>
<pre><code>Given array nums = [-1, 2, 1, -4], and target = 1.

The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).
</code></pre>
<p>和上一题一样，只不过这一题并不用废心思处理重复</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">threeSumClosest2</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> {
    Arrays.sort(nums);
    <span class="hljs-type">int</span> <span class="hljs-variable">closest</span> <span class="hljs-operator">=</span> nums[<span class="hljs-number">0</span>] + nums[<span class="hljs-number">1</span>] + nums[nums.length - <span class="hljs-number">1</span>];
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length - <span class="hljs-number">2</span>; i++) {
        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>, r = nums.length - <span class="hljs-number">1</span>;
        <span class="hljs-keyword">while</span> (l &lt; r) {
            <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> nums[i] + nums[l] + nums[r];
            <span class="hljs-keyword">if</span> (sum == target) {
                <span class="hljs-keyword">return</span> sum;
            }
            <span class="hljs-keyword">if</span> (Math.abs(sum - target) &lt; Math.abs(closest - target)) {
                closest = sum;
            }
            <span class="hljs-keyword">if</span> (sum &gt; target) {
                r--;
            } <span class="hljs-keyword">else</span> {
                l++;
            }
        }
    }
    <span class="hljs-keyword">return</span> closest;
}
</code></pre>
<h3 id="17-letter-combinations-of-a-phone-numbermedium">17. Letter Combinations of a Phone Number(Medium)</h3>
<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent.</p>
<p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>
<p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/73/Telephone-keypad2.svg/200px-Telephone-keypad2.svg.png" alt="img"></p>
<p><strong>Example:</strong></p>
<pre><code>Input: &quot;23&quot;
Output: [&quot;ad&quot;, &quot;ae&quot;, &quot;af&quot;, &quot;bd&quot;, &quot;be&quot;, &quot;bf&quot;, &quot;cd&quot;, &quot;ce&quot;, &quot;cf&quot;].
</code></pre>
<p><strong>Note:</strong></p>
<p>Although the above answer is in lexicographical order, your answer could be in any order you want.</p>
<p>这题怎么说，一看就是 DP，最终解法有点像最近点对，然后也有点像<strong>Merge Kth Sorted List</strong></p>
<p>上一个公式：<code>Get(&quot;234&quot;)=Get(&quot;2&quot;) X Get(&quot;34&quot;)</code>；<code>Get(&quot;34&quot;)=Get(&quot;3&quot;) X Get(&quot;4&quot;)</code>；</p>
<p>于是我们将多个问题始终简化为只处理 2 个符号的问题，最后暴力求 2 个符号的问题即可</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span>[][] map = {
        {}, <span class="hljs-comment">// 0</span>
        {}, <span class="hljs-comment">// 1</span>
        {<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>},  <span class="hljs-comment">// 2</span>
        {<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>},  <span class="hljs-comment">// 3</span>
        {<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>},  <span class="hljs-comment">// 4</span>
        {<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>},  <span class="hljs-comment">// 5</span>
        {<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>},  <span class="hljs-comment">// 6</span>
        {<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-string">&#x27;q&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>}, <span class="hljs-comment">// 7</span>
        {<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;v&#x27;</span>},  <span class="hljs-comment">// 8</span>
        {<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;z&#x27;</span>}, <span class="hljs-comment">// 9</span>
};

<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">char</span>[] mapping(<span class="hljs-type">char</span> digitalChar) {
    <span class="hljs-keyword">return</span> map[digitalChar - <span class="hljs-string">&#x27;0&#x27;</span>];
}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">letterCombinations</span><span class="hljs-params">(String digits)</span> {
    <span class="hljs-keyword">if</span> (digits.isEmpty()) {
        <span class="hljs-keyword">return</span> Collections.emptyList();
    }
    <span class="hljs-type">char</span>[] chars = digits.toCharArray();
    <span class="hljs-keyword">return</span> get(chars, <span class="hljs-number">0</span>, chars.length - <span class="hljs-number">1</span>);
}

<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> List&lt;String&gt; <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">char</span>[] set, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end)</span> {
    LinkedList&lt;String&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();
    <span class="hljs-keyword">if</span> (start == end) {
        <span class="hljs-type">char</span>[] mapping = mapping(set[start]);
        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : mapping) {
            ans.add(String.valueOf(c));
        }
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (end - start == <span class="hljs-number">1</span>) {
        <span class="hljs-type">char</span>[] sm = mapping(set[start]);
        <span class="hljs-type">char</span>[] em = mapping(set[end]);
        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> aSm : sm) {
            <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> anEm : em) {
                ans.add(aSm + String.valueOf(anEm));
            }
        }
    } <span class="hljs-keyword">else</span> {
        List&lt;String&gt; a = get(set, start, start + <span class="hljs-number">1</span>);
        List&lt;String&gt; b = get(set, start + <span class="hljs-number">2</span>, end);
        <span class="hljs-keyword">for</span> (String as : a) {
            <span class="hljs-keyword">for</span> (String bs : b) {
                ans.add(as + bs);
            }
        }
    }
    <span class="hljs-keyword">return</span> ans;
}
</code></pre>
<h3 id="18-4summedium">18. 4Sum(Medium)</h3>
<p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, are there elements <em>a</em>, <em>b</em>, <em>c</em>, and <em>d</em> in <code>nums</code> such that <em>a</em> + <em>b</em> + <em>c</em> + <em>d</em> = <code>target</code>? Find all unique quadruplets in the array which gives the sum of <code>target</code>.</p>
<p><strong>Note:</strong></p>
<p>The solution set must not contain duplicate quadruplets.</p>
<p><strong>Example:</strong></p>
<pre><code>Given array nums = [1, 0, -1, 0, -2, 2], and target = 0.

A solution set is:
[
  [-1,  0, 0, 1],
  [-2, -1, 1, 2],
  [-2,  0, 0, 2]
]
</code></pre>
<p>有了 3sum 的经验，4sum 迎刃而解</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">fourSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> {
    LinkedList&lt;List&lt;Integer&gt;&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();
    Arrays.sort(nums);
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) {
        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>]) {
            <span class="hljs-keyword">continue</span>;
        }
        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> nums[i];
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; nums.length; j++) {
            <span class="hljs-keyword">if</span> (j &gt; i + <span class="hljs-number">1</span> &amp;&amp; nums[j] == nums[j - <span class="hljs-number">1</span>]) {
                <span class="hljs-keyword">continue</span>;
            }
            <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> nums[j];
            <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> j + <span class="hljs-number">1</span>, r = nums.length - <span class="hljs-number">1</span>;
            <span class="hljs-keyword">while</span> (l &lt; r) {
                <span class="hljs-keyword">if</span> (a + b + nums[l] + nums[r] == target) {
                    <span class="hljs-comment">// l++ r-- here</span>
                    ans.add(Arrays.asList(a, b, nums[l++], nums[r--]));
                    <span class="hljs-comment">// skip same result when low is the same value</span>
                    <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; nums[l - <span class="hljs-number">1</span>] == nums[l]) {
                        l++;
                    }
                    <span class="hljs-comment">// skip same result when high is the same value</span>
                    <span class="hljs-keyword">while</span> (l &lt; r &amp;&amp; nums[r] == nums[r + <span class="hljs-number">1</span>]) {
                        r--;
                    }
                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a + b + nums[l] + nums[r] &gt; target) {
                    r--;
                } <span class="hljs-keyword">else</span> {
                    l++;
                }
            }
        }
    }
    <span class="hljs-keyword">return</span> ans;
}
</code></pre>
<h3 id="19-remove-nth-node-from-end-of-listmedium">19. Remove Nth Node From End Of List(Medium)</h3>
<p>Given a linked list, remove the <em>n</em>-th node from the end of list and return its head.</p>
<p><strong>Example:</strong></p>
<pre><code>Given linked list: 1-&gt;2-&gt;3-&gt;4-&gt;5, and n = 2.

After removing the second node from the end, the linked list becomes 1-&gt;2-&gt;3-&gt;5.
</code></pre>
<p><strong>Note:</strong></p>
<p>Given <em>n</em> will always be valid.</p>
<p><strong>Follow up:</strong></p>
<p>Could you do this in one pass?</p>
<h4 id="two-pass-solution">Two Pass Solution</h4>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeNthFromEnd</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span> {
    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> head;
    <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;
    <span class="hljs-keyword">while</span> (pre.next != <span class="hljs-literal">null</span>) {
        pre = pre.next;
        size++;
    }
    <span class="hljs-type">int</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> size - n;
    <span class="hljs-keyword">if</span> (f == <span class="hljs-number">0</span>) {
        head = head.next;
    } <span class="hljs-keyword">else</span> {
        pre = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);
        pre.next = head;
        <span class="hljs-keyword">while</span> (f &gt; <span class="hljs-number">0</span>) {
            pre = pre.next;
            f--;
        }
        <span class="hljs-type">ListNode</span> <span class="hljs-variable">remove</span> <span class="hljs-operator">=</span> pre.next;
        pre.next = remove.next;
    }
    <span class="hljs-keyword">return</span> head;
}
</code></pre>
<p>没什么说的，one pass 获得长度，two pass 直接定位删除</p>
<h4 id="one-pass-solution">One Pass Solution</h4>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeNthFromEnd2</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span> {
    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>), now = head, check;
    pre.next = head;
    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) {
        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
    }
    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {
        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
        check = now;
        <span class="hljs-keyword">while</span> (count &lt; n) {
            <span class="hljs-keyword">if</span> (check == <span class="hljs-literal">null</span>) {
                <span class="hljs-keyword">return</span> head.next;
            }
            check = check.next;
            count++;
        }
        <span class="hljs-keyword">if</span> (check != <span class="hljs-literal">null</span>) {
            pre = pre.next;
            now = now.next;
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">if</span> (pre.next == head) {
                <span class="hljs-keyword">return</span> head.next;
            }
            pre.next = pre.next.next;
            <span class="hljs-keyword">break</span>;
        }
    }
    <span class="hljs-keyword">return</span> head;
}
</code></pre>
<p>遍历链，对每个结点都往后找 n+1 个结点记为<strong>CHECK</strong>，如果<strong>CHECK</strong>为 NULL，则说明当前的 now 就是要删掉的结点，我觉得这种方法还不如遍历两遍</p>
<h4 id="one-pass-solution---tow-pointers">One Pass Solution - Tow pointers</h4>
<p>从剑指 Offer 上面看到的思路，对应面试题 22，思想是设立两个指针，指针 1 先走 n 步，然后这时候指针 2 开始走，在这个过程种指针 1 和 2 始终有 n 步的距离差，所以当指针 1 走到 null 位置时，指针 2 自然就走到倒数第 n 个节点的位置了。</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">removeNthFromEnd3</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> n)</span> {
    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span> || head.next == <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
    <span class="hljs-type">ListNode</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> head, p2 = head, pre = head;
    <span class="hljs-keyword">while</span> (p1 != <span class="hljs-literal">null</span>) {
        <span class="hljs-keyword">if</span> (n != <span class="hljs-number">0</span>) {
            n--;
        } <span class="hljs-keyword">else</span> {
            pre = p2;
            p2 = p2.next;
        }
        p1 = p1.next;
    }
    <span class="hljs-comment">// 当长度为n的链表要求删除倒数第n个节点时，p2始终呆在头节点，所以直接返回头节点的next</span>
    <span class="hljs-keyword">if</span> (p2 == head) {
        <span class="hljs-keyword">return</span> head.next;
    }
    pre.next = p2.next;
    <span class="hljs-keyword">return</span> head;
}
</code></pre>
<h3 id="20-valid-parentheses">20. Valid Parentheses</h3>
<p>Given a string containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;{&#39;</code>, <code>&#39;}&#39;</code>, <code>&#39;[&#39;</code> and <code>&#39;]&#39;</code>, determine if the input string is valid.</p>
<p>An input string is valid if:</p>
<ol>
<li>Open brackets must be closed by the same type of brackets.</li>
<li>Open brackets must be closed in the correct order.</li>
</ol>
<p>Note that an empty string is also considered valid.</p>
<p><strong>Example 1:</strong></p>
<pre><code>Input: &quot;()&quot;
Output: true
</code></pre>
<p><strong>Example 2:</strong></p>
<pre><code>Input: &quot;()[]{}&quot;
Output: true
</code></pre>
<p><strong>Example 3:</strong></p>
<pre><code>Input: &quot;(]&quot;
Output: false
</code></pre>
<p><strong>Example 4:</strong></p>
<pre><code>Input: &quot;([)]&quot;
Output: false
</code></pre>
<p><strong>Example 5:</strong></p>
<pre><code>Input: &quot;{[]}&quot;
Output: true
</code></pre>
<h4 id="stack">Stack</h4>
<p>没什么说的，和数据结构书上的表达式求值是一样的，比书上的简单</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isValid</span><span class="hljs-params">(String s)</span> {
    <span class="hljs-keyword">if</span> (s.isEmpty()) {
        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
    }
    Stack&lt;Character&gt; stack = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;&gt;();
    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray()) {
        <span class="hljs-keyword">if</span> (isBegin(c)) {
            stack.push(c);
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">if</span> (stack.isEmpty()) {
                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
            }
            <span class="hljs-type">Character</span> <span class="hljs-variable">begin</span> <span class="hljs-operator">=</span> stack.pop();
            <span class="hljs-keyword">if</span> (!isPair(begin, c)) {
                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
            }
        }
    }
    <span class="hljs-keyword">return</span> stack.empty();
}

<span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isBegin</span><span class="hljs-params">(<span class="hljs-type">char</span> a)</span> {
    <span class="hljs-keyword">return</span> a == <span class="hljs-string">&#x27;(&#x27;</span> || a == <span class="hljs-string">&#x27;[&#x27;</span> || a == <span class="hljs-string">&#x27;{&#x27;</span>;
}

<span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isPair</span><span class="hljs-params">(<span class="hljs-type">char</span> begin, <span class="hljs-type">char</span> end)</span> {
    <span class="hljs-keyword">if</span> (begin == <span class="hljs-string">&#x27;(&#x27;</span>) {
        <span class="hljs-keyword">return</span> end == <span class="hljs-string">&#x27;)&#x27;</span>;
    } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (begin == <span class="hljs-string">&#x27;[&#x27;</span>) {
        <span class="hljs-keyword">return</span> end == <span class="hljs-string">&#x27;]&#x27;</span>;
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">return</span> end == <span class="hljs-string">&#x27;}&#x27;</span>;
    }
}
</code></pre>
