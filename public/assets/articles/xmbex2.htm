<h3 id="51-n-queenshard">51. N-Queens(Hard)</h3>
<p>The <em>n</em>-queens puzzle is the problem of placing <em>n</em> queens on an <em>n</em>×<em>n</em> chessboard such that no two queens attack each other.</p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/12/8-queens.png" alt="img"></p>
<p>Given an integer <em>n</em>, return all distinct solutions to the <em>n</em>-queens puzzle.</p>
<p>Each solution contains a distinct board configuration of the <em>n</em>-queens&#39; placement, where <code>&#39;Q&#39;</code> and <code>&#39;.&#39;</code> both indicate a queen and an empty space respectively.</p>
<p><strong>Example:</strong></p>
<pre><code>Input: 4
Output: [
 [&quot;.Q..&quot;,  // Solution 1
  &quot;...Q&quot;,
  &quot;Q...&quot;,
  &quot;..Q.&quot;],

 [&quot;..Q.&quot;,  // Solution 2
  &quot;Q...&quot;,
  &quot;...Q&quot;,
  &quot;.Q..&quot;]
]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above.
</code></pre>
<h4 id="rough-backtracking">Rough Backtracking</h4>
<p>要打这题，首先得做好下棋的一步关键的那一步：判断该位置是否能下，于是对于<strong>一张完整的棋盘</strong>来说，我们每下一步之前，就需要判断：</p>
<ol>
<li>同行同列是否有棋子；</li>
<li>对角线是否有棋子；</li>
</ol>
<p>于是为了做到这一步，大概会花 n * n 的时间</p>
<p>然后用回溯去做每一颗棋子的下棋判断，直观+回溯的考虑的话，确实是这样的，但是这题我们可以用一种更聪明的方式去解决；</p>
<h4 id="smart-backtracking">Smart Backtracking</h4>
<p>首先我们的判断步骤，不需要遍历整张<code>n*n</code>的棋盘，我们也不需要事先准备好整张棋盘，如果我们把每一步棋当成一行去填补棋盘，第一行是一个棋子，第二行是第二个棋子，于是</p>
<ul>
<li>当我们下第<code>i</code>个棋子的时候，只需要判断前面的<code>0~i-1</code>行棋盘就好了；</li>
<li>关于对角线，我们也不必遍历整行，因为对角线的位置可以根据行差算出来，比如要插入第<code>i</code>行第<code>j</code>列的时候，需要判断上面<code>i-1</code>行的对角线的话，比如第 2 行在该行的对角线理论上为<code>j + i - 2</code>或者<code>j - (i - 2)</code>；</li>
</ul>
<p>于是我们的判断方法为：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">valid</span><span class="hljs-params">(List&lt;String&gt; cb, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> {
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">rowIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; rowIndex &lt; x; rowIndex++) {
        <span class="hljs-type">char</span>[] row = cb.get(rowIndex).toCharArray();
        <span class="hljs-keyword">if</span> (row[y] == <span class="hljs-string">&#x27;Q&#x27;</span>) {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        }
        <span class="hljs-type">int</span> <span class="hljs-variable">gap</span> <span class="hljs-operator">=</span> x - rowIndex;
        <span class="hljs-keyword">if</span> (y + gap &lt; row.length &amp;&amp; row[y + gap] == <span class="hljs-string">&#x27;Q&#x27;</span>) {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        }
        <span class="hljs-keyword">if</span> (y - gap &gt;= <span class="hljs-number">0</span> &amp;&amp; row[y - gap] == <span class="hljs-string">&#x27;Q&#x27;</span>) {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        }
    }
    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
}
</code></pre>
<p>这样来说会将判断方法的效率基本提到线性，于是加上回溯：</p>
<pre><code class="hljs language-java"><span class="hljs-type">char</span>[] css;

<span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">solveNQueens</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> {
    css = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[n];
    List&lt;List&lt;String&gt;&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();
    backtracking(ans, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(), n, <span class="hljs-number">0</span>);
    <span class="hljs-keyword">return</span> ans;
}

<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtracking</span><span class="hljs-params">(List&lt;List&lt;String&gt;&gt; ans, List&lt;String&gt; cb, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> row)</span> {
    <span class="hljs-keyword">if</span> (row == n) {
        ans.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(cb));
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) {
            <span class="hljs-keyword">if</span> (valid(cb, row, i)) {
                Arrays.fill(css, <span class="hljs-string">&#x27;.&#x27;</span>);
                css[i] = <span class="hljs-string">&#x27;Q&#x27;</span>;
                cb.add(String.valueOf(css));
                backtracking(ans, cb, n, row + <span class="hljs-number">1</span>);
                cb.remove(cb.size() - <span class="hljs-number">1</span>);
            }
        }
    }
}
</code></pre>
<h4 id="elegant-backtracking">Elegant Backtracking</h4>
<p>很遗憾的是，我们上面再聪明再接近线性的判断效率，其实还是抵不过常数级的，所以我们上面的优化过后的 code 也仅是打到 43.6%，我们再来整理一下我们的<strong>valid</strong>函数：</p>
<ul>
<li>同列不能下；</li>
<li>左右对角线不能下；</li>
</ul>
<p>同列的话，我们可以用一个 n 长度数组去记录，这个数组可以所有行共用；</p>
<p>对角线的话，我们前面做<a href="./11z93zc.html?hash=22be3288"><strong>MultiplyString</strong></a>，有想出来过一个对角线的技巧，于是这里我们也可以将所有的对角线压缩成一行：</p>
<pre><code>对于一个4*4的棋盘：

对于135°的右向对角线，我们可以将2维的压缩成
                                 0
   j = 0  1  2  3               1 1
i = 0  0  1  2  3              2 2 2
    1  1  2  3  4     --&gt;     3 3 3 3  --&gt;  drSet：0 1 2 3 4 5 6
    2  2  3  4  5              4 4 4
    3  3  4  5  6               5 5
                                 6
行列关系和压缩数组的关系可以是：
    dri = col + row

同理对于45°的左向对角线：
                                   3
   j =  0   1   2   3            2  2
i = 0   0   1   2   3          1  1  1
    1  -1   0   1   2  --&gt;   0  0  0  0  --&gt; dlSet: -3 -2 -1 0 1 2 3
    2  -2  -1   0   1         -1 -1 -1
    3  -3  -2  -1   0           -2 -2
                                  -3
行列关系和压缩数组的关系可以是：
    dli = col - row

然后为了数组下标好处理，我们可以加上一个n
    dli = col - row + n      --&gt; dlSet: 1 2 3 4 5 6 7
</code></pre>
<p>于是这两行就能在代表整个棋盘的左右对角线，<strong>通过规律可以发现，对角线压缩数组的长度不会超过 2n</strong>，于是我们的程序可以在线性的时间内判断对角线和列的棋位是否合法了：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">solveNQueens</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> {
    List&lt;List&lt;String&gt;&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();
    backtracking(ans, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n], <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n * <span class="hljs-number">2</span>], <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n * <span class="hljs-number">2</span>], n, <span class="hljs-number">0</span>);
    <span class="hljs-keyword">return</span> ans;
}

<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtracking</span><span class="hljs-params">(List&lt;List&lt;String&gt;&gt; ans, List&lt;String&gt; cb,
                           <span class="hljs-type">boolean</span>[] colSet, <span class="hljs-type">boolean</span>[] dlSet, <span class="hljs-type">boolean</span>[] drSet, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> row)</span> {
    <span class="hljs-keyword">if</span> (row == n) {
        ans.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(cb));
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; col &lt; n; col++) {
            <span class="hljs-type">int</span> <span class="hljs-variable">dli</span> <span class="hljs-operator">=</span> col - row + n;
            <span class="hljs-type">int</span> <span class="hljs-variable">dri</span> <span class="hljs-operator">=</span> col + row;
            <span class="hljs-keyword">if</span> (colSet[col] || dlSet[dli] || drSet[dri]) {
                <span class="hljs-keyword">continue</span>;
            }
            colSet[col] = dlSet[dli] = drSet[dri] =  <span class="hljs-literal">true</span>;
            <span class="hljs-type">char</span>[] css = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[n];
            Arrays.fill(css, <span class="hljs-string">&#x27;.&#x27;</span>);
            css[col] = <span class="hljs-string">&#x27;Q&#x27;</span>;
            cb.add(String.valueOf(css));
            backtracking(ans, cb, colSet, dlSet, drSet, n, row + <span class="hljs-number">1</span>);
            cb.remove(cb.size() - <span class="hljs-number">1</span>);
            colSet[col] = dlSet[dli] = drSet[dri] =  <span class="hljs-literal">false</span>;
        }
    }
}
</code></pre>
<h3 id="52n-queensiihard">52.N-QueensII(Hard)</h3>
<p>The <em>n</em>-queens puzzle is the problem of placing <em>n</em> queens on an <em>n</em>×<em>n</em> chessboard such that no two queens attack each other.</p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/12/8-queens.png" alt="img"></p>
<p>Given an integer <em>n</em>, return the number of distinct solutions to the <em>n</em>-queens puzzle.</p>
<p><strong>Example:</strong></p>
<pre><code>Input: 4
Output: 2
Explanation: There are two distinct solutions to the 4-queens puzzle as shown below.
[
 [&quot;.Q..&quot;,  // Solution 1
  &quot;...Q&quot;,
  &quot;Q...&quot;,
  &quot;..Q.&quot;],

 [&quot;..Q.&quot;,  // Solution 2
  &quot;Q...&quot;,
  &quot;...Q&quot;,
  &quot;.Q..&quot;]
]
</code></pre>
<h4 id="solution-i">Solution I</h4>
<p>没什么，就改一改上一题而已</p>
<pre><code class="hljs language-java"><span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;

<span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">totalNQueens</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> {
    backtracking(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(), n, <span class="hljs-number">0</span>);
    <span class="hljs-keyword">return</span> ans;
}

<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtracking</span><span class="hljs-params">(List&lt;String&gt; cb, <span class="hljs-type">int</span> n, <span class="hljs-type">int</span> row)</span> {
    <span class="hljs-keyword">if</span> (row == n) {
        ans++;
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) {
            <span class="hljs-keyword">if</span> (valid(cb, row, i)) {
                <span class="hljs-type">char</span>[] css = <span class="hljs-keyword">new</span> <span class="hljs-title class_">char</span>[n];
                Arrays.fill(css, <span class="hljs-string">&#x27;.&#x27;</span>);
                css[i] = <span class="hljs-string">&#x27;Q&#x27;</span>;
                cb.add(String.valueOf(css));
                backtracking(cb, n, row + <span class="hljs-number">1</span>);
                cb.remove(cb.size() - <span class="hljs-number">1</span>);
            }
        }
    }
}

<span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">valid</span><span class="hljs-params">(List&lt;String&gt; cb, <span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> {
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">rowIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; rowIndex &lt; x; rowIndex++) {
        <span class="hljs-type">char</span>[] row = cb.get(rowIndex).toCharArray();
        <span class="hljs-keyword">if</span> (row[y] == <span class="hljs-string">&#x27;Q&#x27;</span>) {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        }
        <span class="hljs-type">int</span> <span class="hljs-variable">gap</span> <span class="hljs-operator">=</span> x - rowIndex;
        <span class="hljs-keyword">if</span> (y + gap &lt; row.length &amp;&amp; row[y + gap] == <span class="hljs-string">&#x27;Q&#x27;</span>) {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        }
        <span class="hljs-keyword">if</span> (y - gap &gt;= <span class="hljs-number">0</span> &amp;&amp; row[y - gap] == <span class="hljs-string">&#x27;Q&#x27;</span>) {
            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;
        }
    }
    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;
}
</code></pre>
<h4 id="solution-ii">Solution II</h4>
<pre><code class="hljs language-java"><span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
<span class="hljs-type">boolean</span>[] colSet, drSet, dlSet;

<span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">totalNQueens</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> {
    colSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n];
    drSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n * <span class="hljs-number">2</span>];
    dlSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[n * <span class="hljs-number">2</span>];
    backtracking(n, <span class="hljs-number">0</span>);
    <span class="hljs-keyword">return</span> ans;
}

<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtracking</span><span class="hljs-params">(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> row)</span> {
    <span class="hljs-keyword">if</span> (row == n) {
        ans++;
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">col</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; col &lt; n; col++) {
            <span class="hljs-type">int</span> <span class="hljs-variable">dli</span> <span class="hljs-operator">=</span> col - row + n;
            <span class="hljs-type">int</span> <span class="hljs-variable">dri</span> <span class="hljs-operator">=</span> col + row;
            <span class="hljs-keyword">if</span> (colSet[col] || drSet[dri] || dlSet[dli]) {
                <span class="hljs-keyword">continue</span>;
            }
            colSet[col] = drSet[dri] = dlSet[dli] = <span class="hljs-literal">true</span>;
            backtracking(n, row + <span class="hljs-number">1</span>);
            colSet[col] = drSet[dri] = dlSet[dli] = <span class="hljs-literal">false</span>;
        }
    }
}
</code></pre>
<h3 id="53-maximun-subarrayeasy">53. Maximun SubArray(Easy)</h3>
<p>Given an integer array <code>nums</code>, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>
<p><strong>Example:</strong></p>
<pre><code>Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
</code></pre>
<p><strong>Follow up:</strong></p>
<p>If you have figured out the O(<em>n</em>) solution, try coding another solution using the divide and conquer approach, which is more subtle.</p>
<h4 id="dp">DP</h4>
<p>不多说，在<a href="./188zp6j.html">地痞</a>有分析过的</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">maxSubArray</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> {
    <span class="hljs-type">int</span> <span class="hljs-variable">rMax</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, max = Integer.MIN_VALUE;
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> current: nums) {
        rMax = Math.max(current, current + rMax);
        max = Math.max(max, rMax);
    }
    <span class="hljs-keyword">return</span> max;
}
</code></pre>
<h3 id="54-spiral-matrixmedium">54. Spiral Matrix(Medium)</h3>
<p>Given a matrix of <em>m</em> x <em>n</em> elements (<em>m</em> rows, <em>n</em> columns), return all elements of the matrix in spiral order.</p>
<p><strong>Example 1:</strong></p>
<pre><code>Input:
[
 [ 1, 2, 3 ],
 [ 4, 5, 6 ],
 [ 7, 8, 9 ]
]
Output: [1,2,3,6,9,8,7,4,5]
</code></pre>
<p><strong>Example 2:</strong></p>
<pre><code>Input:
[
  [1, 2, 3, 4],
  [5, 6, 7, 8],
  [9,10,11,12]
]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]
</code></pre>
<h4 id="brute-force">Brute Force</h4>
<p>hmmmmm，强打就完事了，怎么强打呢？四个关键点：</p>
<ol>
<li><p>起点</p>
<blockquote>
<p>我们假设每次我们都从当前圈的左上角为起点</p>
</blockquote>
</li>
<li><p>方向</p>
<blockquote>
<p>我们假设每次从起点开始的话，转一圈经过的方向恒为：右-下-左-上</p>
</blockquote>
<pre><code>比如一个3X4的矩阵，从起点0,0开始的话：
    → → → →
    1 2 3 4          1 2 3 4 ↓        1 2 3 4            1  2  3  4
                ==&gt;        5 ↓  ==&gt;         5    ==&gt;  ↑ 10        5
                           6 ↓        9 8 7 6            9  8  7  6
                                      ← ← ← ←
于是第一圈就完成了，四个方向均只执行到边界了
</code></pre>
</li>
<li><p>边界</p>
<blockquote>
<p>0 我们设每个方向都会有边界，每经过一个方向，边界就上涨或者下调；</p>
<p>比如一个 3X4 的矩阵，第一圈的时候，按照下标和方向顺序的话，边界值是：3-2-0-1</p>
<p>关于上涨和下调，接着看下一点</p>
</blockquote>
</li>
<li><p>单向行进</p>
<blockquote>
<p>我们有了起点、方向、边界了之后，就可以开始单向行进了，开始由 0,0 为起点，朝右行进，边界值为 3，于是我们从起点开始遍历列下标</p>
</blockquote>
<pre><code>模拟第一圈的情况：
1. 0,0 - 0,1 - 0,2 - 0,3；到达边右界；于是右边界减少到2；轮到下一个方向；
2. 0,3 - 1,3 - 2,3；到达下边界；于是下边界增加到1；轮到下一个方向；
3. 2,3 - 2,2 - 2,1 - 2,0；到达左边界；于是左边界增加到1；轮到下一个方向；
4. 2,0 - 1,0；到达上边界；于是上边界减少到2；轮到下一个方向；
</code></pre>
</li>
</ol>
<p>于是代码为：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">spiralOrder</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix)</span> {
    LinkedList&lt;Integer&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();
    <span class="hljs-keyword">if</span> (matrix.length == <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">return</span> ans;
    }
    <span class="hljs-type">int</span>[] range = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]{matrix[<span class="hljs-number">0</span>].length - <span class="hljs-number">1</span>, matrix.length - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>};
    <span class="hljs-type">int</span>[] point = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]{<span class="hljs-number">0</span>, <span class="hljs-number">0</span>};
    <span class="hljs-type">int</span> <span class="hljs-variable">rangeIndex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
    ans.add(matrix[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);
    <span class="hljs-keyword">while</span> (ans.size() &lt; matrix.length * matrix[<span class="hljs-number">0</span>].length) {
        <span class="hljs-type">int</span> <span class="hljs-variable">nowRange</span> <span class="hljs-operator">=</span> range[rangeIndex];
        <span class="hljs-keyword">if</span> (rangeIndex == <span class="hljs-number">0</span>) {
            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> point[<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>; i &lt;= nowRange; i++) {
                ans.add(matrix[point[<span class="hljs-number">0</span>]][i]);
            }
            point[<span class="hljs-number">1</span>] = nowRange;
            range[rangeIndex] -= <span class="hljs-number">1</span>;
        }
        <span class="hljs-keyword">if</span> (rangeIndex == <span class="hljs-number">1</span>){
            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> point[<span class="hljs-number">0</span>] + <span class="hljs-number">1</span>; i &lt;= nowRange; i++) {
                ans.add(matrix[i][point[<span class="hljs-number">1</span>]]);
            }
            point[<span class="hljs-number">0</span>] = nowRange;
            range[rangeIndex] -= <span class="hljs-number">1</span>;
        }
        <span class="hljs-keyword">if</span> (rangeIndex == <span class="hljs-number">2</span>) {
            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> point[<span class="hljs-number">1</span>] - <span class="hljs-number">1</span>; i &gt;= nowRange; i--) {
                ans.add(matrix[point[<span class="hljs-number">0</span>]][i]);
            }
            point[<span class="hljs-number">1</span>] = nowRange;
            range[rangeIndex] += <span class="hljs-number">1</span>;
        }
        <span class="hljs-keyword">if</span> (rangeIndex == <span class="hljs-number">3</span>) {
            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> point[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>; i &gt;= nowRange; i--) {
                ans.add(matrix[i][point[<span class="hljs-number">1</span>]]);
            }
            point[<span class="hljs-number">0</span>] = nowRange;
            range[rangeIndex] += <span class="hljs-number">1</span>;
        }
        rangeIndex = nextRange(rangeIndex);
    }
    <span class="hljs-keyword">return</span> ans;
}

<span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">nextRange</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> {
    <span class="hljs-keyword">return</span> i + <span class="hljs-number">1</span> &lt; <span class="hljs-number">4</span> ? i + <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;
}
</code></pre>
<h3 id="55jump-gamemedium">55.Jump Game(Medium)</h3>
<p>Given an array of non-negative integers, you are initially positioned at the first index of the array.</p>
<p>Each element in the array represents your maximum jump length at that position.</p>
<p>Determine if you are able to reach the last index.</p>
<p><strong>Example 1:</strong></p>
<pre><code>Input: [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.
</code></pre>
<p><strong>Example 2:</strong></p>
<pre><code>Input: [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum
             jump length is 0, which makes it impossible to reach the last index.
</code></pre>
<p>这题就不多解释了，在<a href="./1flo1c0.html">DP Again</a>中有详细解读过，但是在再一次做到这题的时候，还是写出了一种更优的 DP，因为一时间忘了贪婪解法怎么写出来了- -</p>
<h4 id="dp-1">DP</h4>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canJump</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> {
    <span class="hljs-type">boolean</span>[] can = <span class="hljs-keyword">new</span> <span class="hljs-title class_">boolean</span>[nums.length];
    can[nums.length - <span class="hljs-number">1</span>] = <span class="hljs-literal">true</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) {
        <span class="hljs-type">int</span> <span class="hljs-variable">steps</span> <span class="hljs-operator">=</span> nums[i];
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; nums.length &amp;&amp; j &lt;= i + steps; j++) {
            <span class="hljs-keyword">if</span>  (can[j]) {
                can[i] = <span class="hljs-literal">true</span>;
                <span class="hljs-keyword">break</span>;
            }
        }
    }
    <span class="hljs-keyword">return</span> can[<span class="hljs-number">0</span>];
}
</code></pre>
<h4 id="greedy">Greedy</h4>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">canJump</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> {
    <span class="hljs-type">int</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i--) {
        <span class="hljs-keyword">if</span> (i + nums[i] &gt;= last) {
            last = i;
        }
    }
    <span class="hljs-keyword">return</span> last == <span class="hljs-number">0</span>;
}
</code></pre>
