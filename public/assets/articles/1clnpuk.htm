<h3 id="前言">前言</h3>
<p>前一篇基本说了线程的基本概念和如何创建一个线程，以及非常基本的几个线程方法，接下来我们说说线程的前几个控制相关的方法，包括和暂停一个线程（PAUSE）、让暂停的线程恢复（RESUME）、让线程终止（STOP）</p>
<p>这篇我们但是这几个方法不能直接去用，因为这些方法都<strong>过期了</strong>！下面就着 Java 官方的文档解释，说说为什么过期这几个方法，以及贴出官方给的模板方法去实现这几个过期方法，具体的实现会在后面有例子</p>
<hr>
<h4 id="中断线程">中断线程</h4>
<p>我们现在已经可以跑起来一个线程了，但是对于线程的控制力度还不够，我们希望在处理线程子任务的时候，碰到需要暂停任务的情况的时候，我们有能力马上就退出</p>
<p>但是停止线程的任务并不简单，总的来说，停止线程的方式有这么三种：</p>
<ul>
<li><strong>让 run 方法执行完</strong>，线程就停了</li>
<li><strong>使用 stop 方法</strong>，但是这个方法<strong>绝对不能够使用</strong>，因为不安全而被列为<strong>过期方法</strong></li>
<li><strong>使用 interrupt 方法去中断线程</strong></li>
</ul>
<p>这么看来，如果要在线程任务中间去停止线程，只能使用<strong>interrupt 方法</strong>，但是这个方法也<strong>不是说停就停</strong>的</p>
<h5 id="interrupt">interrupt()</h5>
<p>我们来看看方法的源码介绍，方法注释就不解释了，注释里主要说的是一些异常信息，其实这个方法的本质<strong>只是在当前线程中打了一个中断标志，并不是真正地停止线程！</strong>我们看看源码：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">interrupt</span><span class="hljs-params">()</span> {
    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span> != Thread.currentThread())
        checkAccess();

    <span class="hljs-keyword">synchronized</span> (blockerLock) {
        <span class="hljs-type">Interruptible</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> blocker;
        <span class="hljs-keyword">if</span> (b != <span class="hljs-literal">null</span>) {
            interrupt0();           <span class="hljs-comment">// Just to set the interrupt flag</span>
            b.interrupt(<span class="hljs-built_in">this</span>);
            <span class="hljs-keyword">return</span>;
        }
    }
    interrupt0();
}
</code></pre>
<h5 id="判断线程中断">判断线程中断</h5>
<p><strong>Thread 类</strong>中有两个方法可以用于判断线程是否中断，分别是：</p>
<ol>
<li><strong>Thread.interrupted()：测试当前线程是否已经中断</strong></li>
<li><strong>this.isInterrupted()：测试线程是否已经中断</strong></li>
</ol>
<p>很明显，这两个方法是有区别的，区别就在于<strong>“当前线程”</strong>是谁了，当前线程指的是运行**Thread.interrupted()**方法的代码段所在的线程</p>
<p>我们看源码：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">interrupted</span><span class="hljs-params">()</span> {
    <span class="hljs-keyword">return</span> currentThread().isInterrupted(<span class="hljs-literal">true</span>);
}
<span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isInterrupted</span><span class="hljs-params">()</span> {
    <span class="hljs-keyword">return</span> isInterrupted(<span class="hljs-literal">false</span>);
}
<span class="hljs-keyword">private</span> <span class="hljs-keyword">native</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isInterrupted</span><span class="hljs-params">(<span class="hljs-type">boolean</span> ClearInterrupted)</span>;
</code></pre>
<p>可以看到，<strong>interrupted()<strong>其实也是调用的</strong>本地方法 isInterrupted(boolean clearInterrupted)<strong>，而且是</strong>当前线程（currendThread）去调用</strong>，所以这个方法是静态方法，而**isInterrupted()<strong>同样也是调用</strong>本地方法 isInterrupted(boolean clearInterrupted)**，只是这个调用是通过 this 去调用的</p>
<p>还需要注意的是，<strong>interrupted()会清楚中断标识，而 isInterrupted()不会</strong></p>
<h5 id="有效中断的方法">有效中断的方法</h5>
<p>前面我们说了，**interrupted()**方法只是设置中断 flag，到底怎么真正停止线程呢？</p>
<p><strong>方法 1：</strong></p>
<p>我们就可以使用上面的<strong>判断中断方法+程序流程设计</strong>去实行有效地中断</p>
<pre><code class="hljs language-java"><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;

<span class="hljs-meta">@Test</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testEffectedInterrupt</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> InterruptedException {
    <span class="hljs-type">Runnable</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> () -&gt; {
        System.out.println(Thread.currentThread().getName());
        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {
            <span class="hljs-keyword">if</span> (Thread.currentThread().isInterrupted()) {
                System.out.println(<span class="hljs-string">&quot;interrupted!&quot;</span>);
                <span class="hljs-keyword">break</span>;
            }
            System.out.println(Thread.currentThread().isInterrupted());
            System.out.println(i++);
        }
    };
    <span class="hljs-type">Thread</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(run, <span class="hljs-string">&quot;runThread&quot;</span>);
    t.start();
    Thread.sleep(<span class="hljs-number">10</span>);
    t.interrupt();
}
</code></pre>
<p><strong>runThread</strong>一直在跑，只不过在跑之前会判断一下自身线程的<strong>中断标志</strong>，如果被设置了<strong>中断标志</strong>，那 while 就 break，也就是说方法已经执行完毕了，<strong>线程自然死亡</strong></p>
<p>当然这里是在 main 线程里面调用<strong>runThread</strong>的中断方法，<strong>runThread</strong>内部也可以不依靠中断方法去 break 语句，这里只是示例外部中断</p>
<p><strong>方法 2：</strong></p>
<p>也许你可以使用<strong>interrupt()方法+return 语句</strong>，和上面的 break 差不多骚，都是为了到达 run 方法的底部</p>
<blockquote>
<p>2018 年 7 月 9 日 13 点 12 分 补充如下：</p>
<p>我在 Servlet 中尝试使用 interrupt()设置中断标识的方法去中断线程，但是很遗憾的是失败了，但是单独写在 Main 数中，或者在 Android 代码中去验证却是可以，不太清楚是不是 Servlet 对线程有什么影响，所以中断线程可以用官方给的模型去中断，即用一个 volatile 布尔变量去设置<code>run(){while()}</code>的 run 方法的 while 循环退出条件</p>
<p>搞懂为什么失败了，我在线程 run 方法中有<strong>Thread.sleep()<strong>方法，虽然我 while 循环最开始就有 isInterrupt()方法做判断，但是大部分时间线程是在 sleep()方法中的<code>TIMED_WAITING</code>状态下，在这个状态下使用 interrupt()方法去中断线程会在 sleep 方法被调用处抛出<code>InterruptedException</code>异常，如果在 catch 语句中没有跳出循环的语句的话，下次 while 循环中的 isInterrupt()仍然是 false，因为一旦抛出<code>InterruptedException</code>异常就会</strong>清除线程的中断标志</strong></p>
<p>我们看看 sleep 的源码说明：</p>
<pre><code class="hljs language-java">    <span class="hljs-comment">/**
     * Causes the currently executing thread to sleep (temporarily cease
     * execution) for the specified number of milliseconds, subject to
     * the precision and accuracy of system timers and schedulers. The thread
     * does not lose ownership of any monitors.
     *
     * <span class="hljs-doctag">@param</span>  millis
     *         the length of time to sleep in milliseconds
     *
     * <span class="hljs-doctag">@throws</span>  IllegalArgumentException
     *          if the value of {<span class="hljs-doctag">@code</span> millis} is negative
     *
     * <span class="hljs-doctag">@throws</span>  InterruptedException
     *          if any thread has interrupted the current thread. The
     *          &lt;i&gt;interrupted status&lt;/i&gt; of the current thread is
     *          cleared when this exception is thrown.
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">native</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">(<span class="hljs-type">long</span> millis)</span> <span class="hljs-keyword">throws</span> InterruptedException;
</code></pre>
<p>之前实验的时候，使用到了 sleep，使用 interrupt 怎么都测不到 isInterrupted()为 true，然后 catch 语句块里也没有做任何处理，所以线程始终无法停止，搞得我以为哪里出错了</p>
<p>关于怎么写 stop、suspend、resume 方法的代码贴在后面</p>
</blockquote>
<h5 id="关于-stop强制停止">关于 stop()强制停止</h5>
<p>关于这个作废的方法，我们还是要说一下为什么这方法被作废了，当然最权威的介绍还是官方解释了*<a href="https://docs.oracle.com/javase/8/docs/technotes/guides/concurrency/threadPrimitiveDeprecation.html">Why are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>*</p>
<p>官方给出的<strong>stop()过期解释</strong>：</p>
<blockquote>
<p>强制性地使用<strong>stop()<strong>方法会</strong>释放当前线程所持有的所有锁（监控器会因为 ThreadDeath 异常被抛到方法栈的最上层而解锁）</strong>，有的锁并不是我们期望释放掉的，所以这样会<strong>导致某些同步数据在并发且不完全锁上</strong>的情况下被修改，如果在这种<strong>状态</strong>不一致的情况下，事先有任何对象被这些监视器所保护着的话，其他的对象也会看到这些不一致的<strong>状态</strong>，我们可以认为，这些对象已经被<strong>破坏（damaged）</strong>了，再用这些对象去执行任务已经没有意义了</p>
<p>而且上述的影响很微妙，短时间内是无法检测出来的，因为不像其他<strong>非受检异常（unchecked exceptions）</strong>，<strong>ThreadDeath</strong>异常是一种<strong>静默异常</strong>，因此，如果程序因为这个异常而出错，用户通常是不会收到任何警告的，可能过个几个小时或者几天，程序才会因为最开始的<strong>强制停止</strong>所带来的长久影响而抛出某个业务中的异常</p>
</blockquote>
<p>官方解释中说明了，虽然从理论上，你可以抓取<strong>ThreadDeath</strong>异常去尝试修复被破坏的对象，<strong>但是这样的做法是不现实的：</strong>因为你需要非常严谨的逻辑去处理整个子任务，在这个严谨的过程中你还需要更严谨地去处理强制中断的破坏修复，这样的做法得不偿失，甚至代价超过任务本身，而且<strong>ThreadDeath</strong>这个异常在任何地方、任何时间都可以抛，你不确定这个异常是不是你想要的那个</p>
<p>最终官方给出了一个<strong>简单且有效</strong>的方法去实现线程停止：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> Thread blinker;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> {
    blinker = <span class="hljs-literal">null</span>;
}

<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> {
    <span class="hljs-type">Thread</span> <span class="hljs-variable">thisThread</span> <span class="hljs-operator">=</span> Thread.currentThread();
    <span class="hljs-keyword">while</span> (blinker == thisThread) {
        <span class="hljs-keyword">try</span> {
            Thread.sleep(interval);
        } <span class="hljs-keyword">catch</span> (InterruptedException e){
        }
        repaint();
    }
}
</code></pre>
<p>如代码里面所示，线程一旦开启，就进入到<strong>run()<strong>方法的</strong>while 循环</strong>里面，<strong>while 循环</strong>退出的点是<strong>blinker 等于当前线程</strong>的时候，我们只需要简单的<strong>在外部将这个同步变量置空</strong>，这样线程就会<strong>结束 while 循环——方法结束——退出线程</strong>，达到暂停线程的效果</p>
<p>但是这个方法还不够强，如果说，我们要让一个<strong>陷入长时间 wait 的线程（比方说在等待某个输入流）中断的话（陷入 wait 就意味着线程卡在某个代码段那不继续往下执行了，而是等着抢资源）</strong>这个时候你就别指望说线程会跑到<strong>line：9</strong>去判断了</p>
<p>所以这里就该是我们的<strong>interrupt()方法</strong>登场了~</p>
<p>官方称，<strong>interrupt()<strong>方法就是为了这一刻而诞生的，上述例子的</strong>blinker = null</strong>也是一种有效的<strong>“基于状态”的信号机制</strong>，**interrupt()**方法也差不多是这个概念，它甚至可以中断等待</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> {
    <span class="hljs-type">Thread</span> <span class="hljs-variable">moribund</span> <span class="hljs-operator">=</span> waiter;
    waiter = <span class="hljs-literal">null</span>;
    moribund.interrupt();
}
</code></pre>
<blockquote>
<p>这个机制，对于在任何<strong>捕获到中断异常并且还没有准备好马上重新处理该异常</strong>的方法来说很重要，我们常说<strong>宁可处理掉这个新的异常也不要往上层抛这个异常</strong>，这样做回带来额外的麻烦</p>
<p>如果一个方法捕获到了<strong>没有声明过的中断异常</strong>，你应该让这个线程<strong>再中断它自己一次</strong></p>
<pre><code class="hljs language-java">Thread.currentThread().interrupt();
</code></pre>
<p>以保证它尽可能及时地发出中断异常</p>
</blockquote>
<p>而在这节的最后，官方又提到了一个事情<em>“如果某个线程对<code>Thread.interrupt</code>没有反应怎么办？”</em></p>
<p>在某些情况下，你可能将程序设计得很独特。比如说一个线程正在等待一个已知的 socket 资源，这时候你可以关闭这个 socket 来让这个线程马上从等待中返回。非常不幸的是，目前（JDK 8）还没有能够解决这种情况的技术。而且一旦某个线程不响应<code>Thread.interrupt</code>，那么它们也绝对不会响应<code>Thread.stop</code>。</p>
<blockquote>
<p>Such cases include deliberate denial-of-service attacks, and I/O operations for which thread.stop and thread.interrupt do not work properly.</p>
</blockquote>
<h5 id="在-sleep里中断线程">在 sleep()里中断线程</h5>
<p>没什么说的，<strong>sleep()<strong>的调用需要捕获中断异常，如果在</strong>sleep()<strong>的过程中中断异常的话，就会抛出</strong>中断异常</strong>，在<strong>catch 语句块中处理中断的后续逻辑</strong>就好了，**<u>请一定要在 catch 块中做出中断处理！！！（原因见前一章的<a href="./bu9klx.html?hash=479c457a">sleep 的注意</a>）</u>**</p>
<h4 id="暂停恢复线程">暂停/恢复线程</h4>
<p>同样的，因为不安全，**suspend()和 resume()<strong>方法也都过期了，禁止使用，在和</strong>stop()**被过期的官方介绍中同样介绍了原因：</p>
<blockquote>
<p><strong>Thread.suspend</strong>方法有天生的死锁倾向</p>
<p>如果目标线程持有一个<strong>非常重要的系统资源的锁</strong>的时候，如果我们使用<strong>Thread.suspend</strong>去试图暂停这个线程的话，没有任何其它的线程可以访问到这个<strong>系统资源</strong>，除非再调用<strong>Thread.resume</strong>方法，线程执行完毕才有可能重新竞争这个资源</p>
<p>如果这个想要恢复已经暂停了的目标线程的线程<strong>试图要在监视器的锁内</strong>调用<strong>Thread.resume</strong>方法，这就是一个死锁，因为你把钥匙锁里面了</p>
<p>这种类型的死锁线程就是典型的<strong>“冻结”程序</strong></p>
</blockquote>
<p>官方也给出了安全实现暂停和恢复线程的示例：</p>
<p>比如说，你的应用程序中包含这个鼠标点击事件的事件处理器，这个处理器会触发一个叫<strong>blinker</strong>的线程</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> threadSuspended;

Public <span class="hljs-keyword">void</span> <span class="hljs-title function_">mousePressed</span><span class="hljs-params">(MouseEvent e)</span> {
    e.consume();

    <span class="hljs-keyword">if</span> (threadSuspended)
        blinker.resume();
    <span class="hljs-keyword">else</span>
        blinker.suspend();  <span class="hljs-comment">// DEADLOCK-PRONE!</span>

    threadSuspended = !threadSuspended;
}
</code></pre>
<p>上面这样的程序就会出现死锁倾向，<strong>自己暂停自己，自己又怎么能恢复自己呢？</strong>所以官方给出的解决代码是</p>
<h5 id="官方恢复代码">官方“恢复”代码</h5>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">mousePressed</span><span class="hljs-params">(MouseEvent e)</span> {
    e.consume();

    threadSuspended = !threadSuspended;

    <span class="hljs-keyword">if</span> (!threadSuspended)
        notify();
}
</code></pre>
<p>然后在线程的 run 循环里面加上：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) {
    <span class="hljs-keyword">while</span> (threadSuspended)
        wait();
}
</code></pre>
<p>因为<strong>wait()<strong>方法会抛出</strong>中断异常</strong>，所以得包在 try-catch 语句中，你不妨在这里顺便睡上一小段时间，给程序一些缓冲时间好让线程在<strong>“恢复”</strong>之后可以马上执行<strong>repaint()方法（这里的 repaint 方法代表恢复之后要做的事情）</strong></p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> {
    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {
        <span class="hljs-keyword">try</span> {
            Thread.sleep(interval);
            <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) {
                <span class="hljs-keyword">while</span> (threadSuspended)
                    wait();
            }
        } <span class="hljs-keyword">catch</span> (InterruptedException e){
        }
        repaint();
    }
}
</code></pre>
<p>特别注意到：<strong>notify()和 wait()<strong>方法都被包在</strong>同步块（synchronized block）</strong>中，这是 Java 语法要求这么做的，以保证这两个方法是<strong>绝对串行</strong>地工作，然而，保证同步的代价确实有点大，为了减小同步带来的代价，我们可以简单的用一些伎俩去优化上述的两段代码，这个伎俩也很简单，在进<strong>同步块</strong>之前，先判断一次<strong>threadSuspended</strong></p>
<pre><code class="hljs language-java"><span class="hljs-keyword">if</span> (threadSuspended) {
    <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) {
        <span class="hljs-keyword">while</span> (threadSuspended)
            wait();
    }
}
</code></pre>
<p>这样一来，我们得保证<strong>threadSuspended</strong>也得是<strong>线程安全</strong>的，我们可以用<strong>volatile</strong>关键字去修饰它</p>
<h5 id="官方暂停代码">官方”暂停“代码</h5>
<pre><code class="hljs language-java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> threadSuspended;

<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> {
    <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {
        <span class="hljs-keyword">try</span> {
            Thread.sleep(interval);

            <span class="hljs-keyword">if</span> (threadSuspended) {
                <span class="hljs-keyword">synchronized</span>(<span class="hljs-built_in">this</span>) {
                    <span class="hljs-keyword">while</span> (threadSuspended)
                        wait();
                }
            }
        } <span class="hljs-keyword">catch</span> (InterruptedException e){
        }
        repaint();
    }
}
</code></pre>
<h4 id="实例">实例</h4>
<p>为了有多线程效果，把例子装在了 servlet 中用网页请求去运行</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">package</span> mythread;

<span class="hljs-keyword">import</span> java.io.IOException;
<span class="hljs-keyword">import</span> javax.servlet.ServletException;
<span class="hljs-keyword">import</span> javax.servlet.annotation.WebServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;
<span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;

<span class="hljs-meta">@WebServlet(&quot;/xixi&quot;)</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AThreadTest</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> {

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Thread timer;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">stoped</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">suspended</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ServletException {
        timer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>() {
            <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;

            <span class="hljs-meta">@Override</span>
            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> {
                <span class="hljs-keyword">if</span> (!timer.getName().equals(<span class="hljs-string">&quot;Timer&quot;</span>)) {
                    timer.setName(<span class="hljs-string">&quot;Timer&quot;</span>);
                }
                System.out.println(Thread.currentThread() + <span class="hljs-string">&quot; started&quot;</span>);
                <span class="hljs-keyword">while</span> (!stoped) {
                    <span class="hljs-keyword">if</span> (timer.isInterrupted()) {
                        System.out.println(<span class="hljs-string">&quot;interrupted break&quot;</span>);
                        <span class="hljs-keyword">break</span>;
                    }
                    <span class="hljs-keyword">try</span> {
                        <span class="hljs-keyword">if</span> (!stoped &amp;&amp; !suspended) {
                            count += <span class="hljs-number">1</span>;
                            System.out.println(Thread.currentThread() +  <span class="hljs-string">&quot; &quot;</span> + count);
                            <span class="hljs-keyword">if</span> (suspended) {
                                <span class="hljs-keyword">synchronized</span> (timer) {
                                    <span class="hljs-keyword">while</span> (suspended) {
                                        timer.wait();
                                    }
                                }
                            }
                        }
                        Thread.sleep(<span class="hljs-number">1000</span>);
                    } <span class="hljs-keyword">catch</span> (Exception e) {
                        System.out.println(<span class="hljs-string">&quot;exception because the interrupt when thread was in sleeping&quot;</span>);
                        <span class="hljs-keyword">return</span>;
                    }
                }
            }
        };
    }

    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> ServletException, IOException {
        <span class="hljs-type">String</span> <span class="hljs-variable">act</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-string">&quot;act&quot;</span>);
        <span class="hljs-keyword">switch</span> (act) {
        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;start&quot;</span>:
            <span class="hljs-keyword">if</span> (timer == <span class="hljs-literal">null</span>) {
                init();
            }
            timer.start();
            <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;stop&quot;</span>:
            stop();
            <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;pause&quot;</span>:
            pause();
            <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;resume&quot;</span>:
            resume();
            <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;state&quot;</span>:
            state();
            <span class="hljs-keyword">break</span>;
        <span class="hljs-keyword">default</span>:
            <span class="hljs-keyword">break</span>;
        }
        response.sendRedirect(<span class="hljs-string">&quot;/Learning_zoom&quot;</span>);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> {
        timer.interrupt();
<span class="hljs-comment">//		stoped = true;</span>
        System.out.println(<span class="hljs-string">&quot;stop&quot;</span>);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">pause</span><span class="hljs-params">()</span> {
        suspended = <span class="hljs-literal">true</span>;
        System.out.println(<span class="hljs-string">&quot;pause&quot;</span>);
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">resume</span><span class="hljs-params">()</span> {
        suspended = <span class="hljs-literal">false</span>;
        <span class="hljs-keyword">if</span> (!suspended) {
            <span class="hljs-keyword">synchronized</span> (timer) {
                timer.notify();
                System.out.println(<span class="hljs-string">&quot;resume&quot;</span>);
            }
        }
    }

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">state</span><span class="hljs-params">()</span> {
        System.out.print(<span class="hljs-string">&quot;status: &quot;</span>);
        <span class="hljs-keyword">if</span> (timer == <span class="hljs-literal">null</span>) {
            System.out.println(<span class="hljs-string">&quot;null&quot;</span>);
        } <span class="hljs-keyword">else</span> {
            System.out.println(timer.getState());
        }
    }

}
</code></pre>
<p>网页如下，线程过程中顺便还可以监控线程的状态</p>
<pre><code class="hljs language-html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span> <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span> <span class="hljs-string">&quot;http://www.w3.org/TR/html4/loose.dtd&quot;</span>&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;Content-Type&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;text/html; charset=UTF-8&quot;</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Insert title here<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>
    HelloWorld!

    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span>
    Timer Test<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8080/Learning_zoom/xixi?act=start&quot;</span>&gt;</span>Start<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8080/Learning_zoom/xixi?act=stop&quot;</span>&gt;</span>Stop<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8080/Learning_zoom/xixi?act=pause&quot;</span>&gt;</span>Pause<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8080/Learning_zoom/xixi?act=resume&quot;</span>&gt;</span>Resume&lt;/a
    &gt;<span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;http://localhost:8080/Learning_zoom/xixi?act=state&quot;</span>&gt;</span>State<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span>

    <span class="hljs-tag">&lt;<span class="hljs-name">hr</span> /&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span>
</code></pre>
<p>上面的例子中对于暂停的做法有三个处理，因为有 45 行的 sleep 代码，所以线程大多数时候都是处于 sleep 状态，这时候你想要用中断标志去停止线程是有点不太可能，所以我们需要在 catch 块中对 sleep 中断错误的处理进行停止的逻辑，比如可以直接 return</p>
<p>如果想要看中断标志去停止线程的效果，可以把 45 行的 sleep 注掉，然后就可以看到用 29-32 行的那种中断标志+break 的方式去中断了，当然你可能还会注意到还有一个 volatile 变量：stoped</p>
<p>你可以把 84 行的注释打开，这样可以用和暂停一样的思想去做中断，效果也是一样的</p>
<hr>
<p>好了<strong>第二坎</strong>就到这啦，神兵利器已经准备好啦！开始修炼内功！</p>
