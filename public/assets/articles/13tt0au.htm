<h3 id="introduction">Introduction</h3>
<p>本篇主要内容：</p>
<ol>
<li>Java 到底是值传递还是引用传递</li>
<li>Java 中的引用类型详解以其应用场景</li>
</ol>
<h3 id="pass-by-value-or-pass-by-reference-">Pass-By-Value Or Pass-By-Reference ?</h3>
<p>Java 中的所有传递都是值传递，并不存在所谓的引用传递</p>
<p>要理解这个问题的关键在于：</p>
<pre><code class="hljs language-java">Dog myDog;
</code></pre>
<p>其中的<code>myDog</code>并不是真正的 Dog 对象，而是一个<em>pointer</em>，这个指针可以指向一个 Dog 对象</p>
<p>意思是说：</p>
<pre><code class="hljs language-java"><span class="hljs-type">Dog</span> <span class="hljs-variable">myDog</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;Rover&quot;</span>);
foo(myDog);
</code></pre>
<p>本质上来说，这仅仅只是将这个被创建的 Dog 对象的地址传递给了<code>foo</code>方法</p>
<p>假如说<code>myDog</code> 这个<em>pointer</em>的地址是<strong>0x19</strong>，而它指向的这个<code>Dog</code>对象的地址是<strong>0x42</strong>，那么我们其实是把<strong>0x42</strong>这个值，传递给了方法，而不是将<strong>0x19</strong>传递给了方法</p>
<p>如果说方法里面的逻辑是这样的：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">foo</span><span class="hljs-params">(Dog someDog)</span> {
    someDog.setName(<span class="hljs-string">&quot;Max&quot;</span>);     <span class="hljs-comment">// 1</span>
    someDog = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;Fifi&quot;</span>);  <span class="hljs-comment">// 2</span>
    someDog.setName(<span class="hljs-string">&quot;Rowlf&quot;</span>);   <span class="hljs-comment">// 3</span>
}
</code></pre>
<p>我们来分析一下这个方法里发生了什么事：</p>
<ul>
<li>参数<code>someDog</code>指向<strong>0x42</strong></li>
<li>在<code>//1</code><ul>
<li><code>someDog</code> 指向的<strong>0x42</strong>被 setName 成<strong>Max</strong>了</li>
</ul>
</li>
<li>在<code>//2</code><ul>
<li>一个名称为<strong>Fifi</strong>的新<code>Dog</code>对象（<strong>0x97</strong>）被<code>someDog</code>指向了</li>
</ul>
</li>
<li>在<code>//3</code><ul>
<li><code>someDog</code>指向的<strong>0x97</strong>被 setName 成<strong>Rowlf</strong>了</li>
</ul>
</li>
<li>方法返回</li>
</ul>
<p>那么接下来是灵魂拷问：<em>方法外面的<code>myDog</code>这时候叫什么名字？</em></p>
<p>这里就是关键！</p>
<p>它叫<strong>Max</strong>，但是！</p>
<p>从始至终请记住，<code>myDog</code>是一个 pointer，它从始至终只指向了<strong>0x42</strong>，它还是原来那条一无是处的狗，只不过在<code>//1</code>的时候被人改了名字而已；</p>
<p>至于<code>someDog</code>，它只是一个容易变心的指针而已，所以方法内外的<code>myDog</code>和<code>someDog</code>，它们是两个世界的指针，谁也不会真正影响到谁变心；</p>
<h3 id="reference-type">Reference Type</h3>
<p>之前在 JVM 学习的时候学过几种引用的含义，这里再引用一些<a href="https://blog.csdn.net/xlinsist/article/details/57089288">参考</a>，深入了解一下</p>
<blockquote>
<p>作者：Xurtle
来源：CSDN
原文：<a href="https://blog.csdn.net/xlinsist/article/details/57089288">https://blog.csdn.net/xlinsist/article/details/57089288</a></p>
</blockquote>
<h4 id="strong-reference">Strong reference</h4>
<p>显式写出来的引用就是它，除非显式引用断开了否则就回收它，而这背后 JVM 正是直接通过可达性判断来回收的，每个强引用的对象都能通过可达性判断；</p>
<pre><code class="hljs language-java"><span class="hljs-type">String</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;xixi&quot;</span>);	<span class="hljs-comment">// ’xixi‘ is at 0x42</span>
<span class="hljs-comment">// some work</span>
a = <span class="hljs-literal">null</span>;	<span class="hljs-comment">// ‘xixi’ which means 0x42 is now available for GC</span>
</code></pre>
<h4 id="soft-reference">Soft reference</h4>
<p>它引用的对象只有在内存不足时<strong>且没有强引用同时引用这个对象的时候</strong>，才会被回收，也即是在下次 OOM 之前，JVM 一定会清理掉所有的<strong>soft reference</strong></p>
<p>虽然 GCor 们已经很努力地在工作了，但是我们作为 Java 开发，也不能为所欲为，不当的代码会造成冗余的对象，变成 GCor 们无法清理的垃圾，甚至造成内存泄漏问题</p>
<p>我们来看一段代码：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LeakyChecksum</span> {
    <span class="hljs-keyword">private</span> <span class="hljs-type">byte</span>[] byteArray;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getFileChecksum</span><span class="hljs-params">(String fileName)</span> {
        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> getFileSize(fileName);
        <span class="hljs-keyword">if</span> (byteArray == <span class="hljs-literal">null</span> || byteArray.length &lt; len)
            byteArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[len];
        readFileContents(fileName, byteArray);
        <span class="hljs-comment">// calculate checksum and return it</span>
    }
}
</code></pre>
<p>在没有对<code>byteArray</code>进行手动数据清理的时候，<code>byteArray</code>会不断重用数组，除非<code>LeakyChecksum</code>对象被 GC，否则它不会被 GC，它的大小会始终和它处理过的最大的文件一样大，这样会增加 GC 的频率；</p>
<p>而且因为方法后续没有手动清理，所以这个字节数组就一直存在内存中的垃圾，造成内存泄漏</p>
<p>于是我们可以使用软引用去描述这个字节数组，一旦内存紧张的时候，它就会被回收掉，从而释放多余的空间</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CachingChecksum</span> {
    <span class="hljs-keyword">private</span> SoftReference&lt;<span class="hljs-type">byte</span>[]&gt; bufferRef;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getFileChecksum</span><span class="hljs-params">(String fileName)</span> {
        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> getFileSize(fileName);
        <span class="hljs-type">byte</span>[] byteArray = bufferRef.get();
        <span class="hljs-keyword">if</span> (byteArray == <span class="hljs-literal">null</span> || byteArray.length &lt; len) {
            byteArray = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[len];
            bufferRef.set(byteArray);
        }
        readFileContents(fileName, byteArray);
        <span class="hljs-comment">// calculate checksum and return it</span>
    }
}
</code></pre>
<p>可以看到，我们每次都尝试获取软引用对象，如果它为 null，证明它是第一次访问或者被 GC 清理掉了</p>
<h4 id="weak-reference">Weak reference</h4>
<p>被声明为弱引用的对象，<strong>如果没有强引用同时引用这个对象</strong>，那么它只能存活到下一次 GC 之前</p>
<pre><code class="hljs language-java">WeakReference&lt;String&gt; sr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>&lt;String&gt;(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>));

System.out.println(sr.get()); <span class="hljs-comment">// hello</span>
System.gc();                  <span class="hljs-comment">// 通知JVM的gc进行垃圾回收</span>
System.out.println(sr.get()); <span class="hljs-comment">// might be null</span>
</code></pre>
<h4 id="phantom-reference">Phantom reference</h4>
<p><strong>Phantom References</strong>与上面的几个引用存在很大的不同，至少上面的<code>Reference</code> 对象通过它们的<code>get()</code> 方法可以获取到它们所引用的对象，但是，<code>PhantomReference</code> 的只会返回<code>null</code>，因为虚引用的意义不在于 get 到引用，而在于<strong>它能提醒我们哪些对象不应该继续存在了</strong></p>
<p><a href="https://blog.csdn.net/xlinsist/article/details/57089288">这篇里</a>说：<em>“Phantom reference 的唯一作用就是它可以监测到对象的死亡，即，当你的对象真正从内存中移除时，指向这个对象的<code>PhantomReference</code> 就会被加入到队列中”</em></p>
<p>这句话其实后半句有误，应该是<em>“这个被回收对象生前所引用的虚引用对象会被加入到<strong>引用队列</strong>中”</em>才对</p>
<p>关于<strong>引用队列</strong>，具体是什么，我们下节再细说，先来整理一下虚引用到底有什么神通</p>
<p>它首先会表现出来的行为是：当且仅当虚引用对象的<strong>参照对象（referent）</strong>被 GC 回收掉的时候，那么这个虚引对象用会被加入到<code>ReferenceQueue</code>中，<strong>这时候虚引用对象还没被回收</strong></p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PhantomReferenceDemo</span> {
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> ReferenceQueue&lt;Person&gt; rq = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceQueue</span>&lt;&gt;();
    <span class="hljs-keyword">static</span> Person p;
    <span class="hljs-keyword">static</span> Dog d;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>{
        p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;xixi&quot;</span>);
        d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(p, rq, <span class="hljs-string">&quot;haha&quot;</span>);
        printRQ();
        p = <span class="hljs-literal">null</span>;
        System.gc();
        waitMoment(<span class="hljs-number">2000</span>);	<span class="hljs-comment">// wait gc</span>
        printRQ();
    }

    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> {
        String name;Dog dog;
        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name)</span> {<span class="hljs-built_in">this</span>.name = name;}
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDog</span><span class="hljs-params">(Dog dog)</span> {<span class="hljs-built_in">this</span>.dog = dog;}
    }

    <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">PhantomReference</span>&lt;Person&gt; {
        String name;
        <span class="hljs-comment">// Person person;</span>
        <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(Person referent, ReferenceQueue&lt;? <span class="hljs-built_in">super</span> Person&gt; q, String name)</span> {
            <span class="hljs-built_in">super</span>(referent, q);
            <span class="hljs-comment">// this.person = referent;</span>
            <span class="hljs-built_in">this</span>.name = name;
        }
    }

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">waitMoment</span><span class="hljs-params">(<span class="hljs-type">long</span> time)</span> {
        <span class="hljs-keyword">try</span> {
            Thread.sleep(time);
        } <span class="hljs-keyword">catch</span> (InterruptedException e) {
            e.printStackTrace();
        }
    }

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printRQ</span><span class="hljs-params">()</span> {
        <span class="hljs-type">int</span> <span class="hljs-variable">size</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
        Object obj;
        <span class="hljs-keyword">while</span> ( ( obj = rq.poll() ) != <span class="hljs-literal">null</span> ) {
            System.out.println(<span class="hljs-string">&quot;reference: &quot;</span> + obj);
            size++;
        }
        System.out.println(<span class="hljs-string">&quot;size of rq： &quot;</span> + size);
    }
}

<span class="hljs-comment">// size of rq： 0</span>
<span class="hljs-comment">// reference: _reference.PhantomReferenceDemo$Dog@45ee12a7</span>
<span class="hljs-comment">// size of rq： 1</span>
</code></pre>
<p>虚引用的正确实现方式就是如<code>Dog</code>对象一样，继承<code>PhantomReference&lt;Person&gt;</code>，因为狗是跟随人的，如果人没有了，那么狗就没有存在的必要了（请不要带有感情地去读这句话，客观的看代码- -）所以说，狗对象的<strong>参照对象（referent）</strong>是人！</p>
<p>所以在<code>line:9</code>之后，当人对象变为<strong>不可达状态</strong>的时候，被 GC 处理掉了之后，因为两者之间的虚引用关系，狗对象被加入到了指定的引用队列中，表面需要对这个没有存在必要的狗对象也进行处理，我们可以重写虚引用对象的<code>clear()</code>方法，在方法里面去掉狗的强引用，去然后在处理引用队列的时候，调用虚引用对象的<code>clear()</code>方法</p>
<pre><code class="hljs language-java"><span class="hljs-comment">// Dog</span>
<span class="hljs-meta">@Override</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">clear</span><span class="hljs-params">()</span> {
    <span class="hljs-built_in">super</span>.clear();
    System.out.println(<span class="hljs-string">&quot;clear dog&quot;</span>);
    d = <span class="hljs-literal">null</span>;
}
<span class="hljs-comment">// printRQ</span>
<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printRQ</span><span class="hljs-params">()</span> {
    <span class="hljs-comment">// ...</span>
    <span class="hljs-keyword">while</span> ( ( obj = rq.poll() ) != <span class="hljs-literal">null</span> ) {
        <span class="hljs-comment">// ...</span>
        ((Reference) obj).clear();
    }
    <span class="hljs-comment">// ...</span>
}
</code></pre>
<p>那么上一句说到的不可达状态如何验证？狗对象的 Person 字段相关被注释掉了，如果解开注释之后，即使全局 q 对象已经设置为 null，但是人对象还有狗对象去引用，人对象还是处于可达状态的，所以第二次<code>printRQ</code>方法依旧是没有任何对象入队</p>
<h3 id="reference-abstract-class--referencequeue">Reference Abstract Class &amp; ReferenceQueue</h3>
<p>上面提到的 4 种引用类型中的后 3 种，在 Java 中其实都是<code>Reference</code>的子类实现，并且<code>Reference</code>和<code>ReferenceQueue</code>的关系很密切</p>
<p>其实我感觉虚引用的作用可以人为替代，比如上文的人和狗的关系，只要狗没有强引用，那么人没了狗也就没了</p>
<p>所以更多的时候，虚引用是用来监听虚引用的参照对象是否被 GC 掉了</p>
<p>上节已经说过虚引用和引用队列的关系了，它必须指定一个引用队列，软引用和弱引用可以选择性地和引用队列合作</p>
<p>以下参考自<a href="https://juejin.im/entry/5b28f605f265da59942344d4">java 源码系列 - 带你读懂 Reference 和 ReferenceQueue</a></p>
<h4 id="reference">Reference</h4>
<p>主要是负责内存的一个状态，当然它还和 java 虚拟机，垃圾回收器打交道。Reference 类首先把内存分为 4 种状态 Active，Pending，Enqueued，Inactive。</p>
<ul>
<li>Active，一般来说内存一开始被分配的状态都是 Active，</li>
<li>Pending 大概是指快要被放进队列的对象，也就是马上要回收的对象，</li>
<li>Enqueued 就是对象的内存已经被回收了，我们已经把这个对象放入到一个队列中，方便以后我们查询某个对象是否被回收，</li>
<li>Inactive 就是最终的状态，不能再变为其它状态。</li>
</ul>
<h4 id="referencequeue">ReferenceQueue</h4>
<p>引用队列，在检测到适当的<strong>可到达性更改</strong>后，垃圾回收器将已注册的引用对象添加到队列中，ReferenceQueue 实现了入队（enqueue）和出队（poll），还有 remove 操作，内部元素 head 就是泛型的 Reference。</p>
<h4 id="sample">Sample</h4>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException {
    <span class="hljs-type">ReferenceQueue</span> <span class="hljs-variable">queue</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReferenceQueue</span>();

    <span class="hljs-comment">// 创建弱引用，此时状态为Active，并且Reference.pending为空</span>
    <span class="hljs-comment">// 当前Reference.queue = 上面创建的queue，并且next=null</span>
    <span class="hljs-type">WeakReference</span> <span class="hljs-variable">reference</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeakReference</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>(), queue);
    System.out.println(reference);
    <span class="hljs-comment">// 当GC执行后，由于是虚引用，所以回收该object对象</span>
    <span class="hljs-comment">//并且置于pending上，此时reference的状态为PENDING</span>
    System.gc();

    <span class="hljs-comment">/* ReferenceHandler从pending中取下该元素，并且将该元素放入到queue中，
    此时Reference状态为ENQUEUED，Reference.queue = ReferenceENQUEUED */</span>

    <span class="hljs-comment">/* 当从queue里面取出该元素，则变为INACTIVE，Reference.queue = Reference.NULL */</span>
    <span class="hljs-type">Reference</span> <span class="hljs-variable">reference1</span> <span class="hljs-operator">=</span> queue.remove();
    System.out.println(reference1);
}
</code></pre>
<p>我们很容易就想到，<code>reference</code>和<code>reference1</code>是同一个对象，而且这段代码也揭示了一个事实：<strong>匿名对象都是虚引用</strong></p>
<h3 id="conclusion">Conclusion</h3>
<p>有效地利用 3 种引用类型，可以帮助我们提高 GC 效率，防止 OOM</p>
<p>在 Java 中也有许多应用实例，比如有<code>WeakHashMap</code>等等，他在<code>ThreadLocal</code>里就运用到了，以后有空再研究</p>
