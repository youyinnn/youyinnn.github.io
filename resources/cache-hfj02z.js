
sessionStorage.setItem('pseries', "- se: 《计算机网络》\n  ps:\n    - 计算机网络-谢希仁-2===1nz333d\n    - 计算机网络-谢希仁-1===1k7g0p3\n- se: JVM\n  ps:\n    - 关于JVM的运行时数据区上的GC===d5ykz8\n    - 关于JVM的运行时数据区===rikltc\n    - 关于JVM的对象创建与访问===18669ga\n    - 关于JVM的GC行为和内存分配===jhpq7e\n- se: 从头到尾读\n  ps:\n    - 把HashMap安排得明明白白===ofa68o\n    - 从头到尾读Iterable与Iterator===1kakozs\n    - 从头到尾读Collection===faxga5\n    - 从头到尾读ArrayList===rku8jh\n- se: 《Mastering Regular Expression(Third Edition)》\n  ps:\n    - RegExp_2_metacharacters===huiysg\n    - RegExp_1_overview===1k4djcz\n- se: Log4j2\n  ps:\n    - Log4j2_Lookups===3zxt7z\n    - Log4j2_Layouts===yvgzwi\n    - Log4j2_HelloWorld===en4hhw\n    - Log4j2_Filters===3fjm8j\n    - Log4j2_Appenders===nff3ic\n- se: leetcode\n  ps:\n    - Leetcode-71~75===i9becb\n    - Leetcode-6~10===t1f0vq\n    - Leetcode-66~70===z9pvg9\n    - Leetcode-61~65===1cu6q2d\n    - Leetcode-56~60===1kv61wq\n    - Leetcode-51~55===xmbex2\n    - Leetcode-46~50===jywoys\n    - Leetcode-41~45===11z93zc\n    - Leetcode-36~40===v6ei19\n    - Leetcode-31~35===dbne5d\n    - Leetcode-26~30===448jer\n    - Leetcode-21~25===1hrw4sv\n    - Leetcode-1~5===pn2ezr\n    - Leetcode-16~20===3yl2hx\n    - Leetcode-11~15===2gps3g\n- se: JettyDocument_ZH_CN_Translation\n  ps:\n    - JettyDocument_ZH_CN_Translation_README===n8gsoq\n    - JettyDocument_ZH_CN_Translation_Part4-23===1cei7aq\n    - JettyDocument_ZH_CN_Translation_Part4-21===18rke1\n    - JettyDocument_ZH_CN_Translation_Part3-13===cc3kmk\n    - JettyDocument_ZH_CN_Translation_Part1===17hjlts\n- se: jenkins\n  ps:\n    - Jenkins Introductions&Setup===1arzjog\n- se: 并发\n  ps:\n    - Java并发编程第四坎===db3vx3\n    - Java并发编程第六坎===139027a\n    - Java并发编程第八坎===1u7rv30\n    - Java并发编程第五坎===1xo3tpx\n    - Java并发编程第二坎===1clnpuk\n    - Java并发编程第三坎===1h1ww1y\n    - Java并发编程第七坎===7kdfk8\n    - Java并发编程第七坎-2===u4sgci\n    - Java并发编程第一坎===bu9klx\n- se: express\n  ps:\n    - Express Routing===1n8vn13\n    - Express Middleware===1tzsbbu\n- se: electron\n  ps:\n    - Electron_配置相关与对象===1y7ozg8\n    - Electron_打包你的HelloWorld为exe===1q1lo3l\n    - Electron_上手铺垫===11zuc81\n    - Electron_一个HelloWorld===a08lib\n    - Electron_UI===kimeni\n- se: docker\n  ps:\n    - Docker Volumes===1ae6lng\n    - Docker Swarm&ClusterSetup===1toixsk\n    - Docker Stack===u7sd0w\n    - Docker Service&Composefile===zkr55u\n    - Docker Persist Data Overview===lt42s8\n    - Docker Orientation&Setup===1ei198o\n    - Docker Containers&Dockerfile===uh480l\n    - Docker ConceptReview===rx7jt4\n- se: Cron4jDocument_ZH_CN_Translation\n  ps:\n    - Cron4jDocument_ZH_CN_Translation_README===19jo7o1\n    - Cron4jDocument_ZH_CN_Translation===1ngl1pm\n");
sessionStorage.setItem('pcbl', "- abbrlink: 1w60zyo\n  title: 字符编码笔记\n  categories:\n    - reprinted\n  tags:\n    - encoding\n  date: 2020-02-14T19:34:01.000Z\n  char_count: 21763\n  short_contant: >\n    <blockquote>\n\n    <p>转自：<a\n    href=\"https://yaoxuannn.com/2017/12/12/%E5%AD%97%E7%AC%A6%E7%BC%96%E7%A0%81%E7%AC%94%E8%AE%B0/\">yaoxuannn-字符编码笔记</a></p>\n\n    </blockquote>\n\n    <p>想来想去终于决定写一个关于计算机字符编码的笔记了( 应该说终于愿意去学了..(๑•ᴗ•๑)), 原本的目的只是搞清楚Unicode的,\n    考虑到字符编码问题是一个有趣, 在开发中经常会遇到并且稍微有点麻烦和棘手的问题, 但是在网络上却很难找到将这个说的比较细致和成体系的文章,\n    所以我决定倾尽精力去写这篇笔记, 我会尽量的去查资料和参考他人的文章和博客, 将关于计算机编码的问题捣鼓清楚.</p>\n\n    <p>在笔记的后半部分, 我也会针对Python3的Unicode做一些说明, 并且当说到Unicode的时候, 我会尝试说明一些关于UTF-8\n    with BOM在Linux/Unix内核中的一些矛盾.</p>\n\n    <p><strong>关于我搜寻和参考的资料, 都会贴在文章的最后.</strong></p>\n- abbrlink: kimeni\n  title: Electron_UI\n  categories:\n    - note\n    - electron\n  comments: true\n  tags:\n    - electron\n  series: electron\n  date: 2019-10-10T11:44:21.000Z\n  char_count: 6886\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-对话框\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                对话框\n              </h3><blockquote>\n    <p>显示用于打开和保存文件、警报等的本机系统对话框。</p>\n\n    </blockquote>\n\n    <p>线程：<a\n    href=\"https://electronjs.org/docs/glossary#main-process\">主线程</a></p>\n- abbrlink: 1y7ozg8\n  title: Electron_配置相关与对象\n  categories:\n    - note\n    - electron\n  comments: true\n  tags:\n    - electron\n  series: electron\n  date: 2019-10-10T09:03:21.000Z\n  char_count: 20338\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><p>有了一些铺垫之后，我们就能开始了解一下Electron的主体功能都提供了什么东西，具体的列表可以看：<a href=\"https://electronjs.org/docs/api\">https://electronjs.org/docs/api</a></p>\n    <ul>\n    <li>配置相关与对象<ul>\n    <li>app：整个应用程序生命周期相关的api和事件</li>\n    </ul>\n    </li>\n    </ul>\n- abbrlink: 11zuc81\n  title: Electron_上手铺垫\n  categories:\n    - note\n    - electron\n  comments: true\n  tags:\n    - electron\n  series: electron\n  date: 2019-10-03T22:35:21.000Z\n  char_count: 7548\n  short_contant: |2\n\n              <h2>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h2><p>官方指南不叫指南，叫document，于是乎开始无教程纯瞎子摸石头，于是想着把整个官方指南都看一遍，然后梳理梳理。</p>\n    <ul>\n    <li>关于electron的命名空间</li>\n    <li>主进程和渲染进程</li>\n    </ul>\n- abbrlink: 1tzsbbu\n  title: Express Middleware\n  categories:\n    - note\n    - nodejs\n  tags:\n    - express\n    - nodejs\n  series: express\n  date: 2019-10-03T16:31:00.000Z\n  char_count: 2462\n  short_contant: |\n    <p><div class=\"saying mb-4\"></p>\n    <p>翻译自官方文档</p>\n    <p></div></p>\n- abbrlink: 1n8vn13\n  title: Express Routing\n  categories:\n    - note\n    - nodejs\n  tags:\n    - express\n    - nodejs\n  series: express\n  date: 2019-10-03T13:38:00.000Z\n  char_count: 9044\n  short_contant: |\n    <p><div class=\"saying mb-4\"></p>\n    <p>翻译自官方文档</p>\n    <p></div></p>\n- abbrlink: 1w97yet\n  title: Understanding the nodejs' event loop\n  categories:\n    - reprinted\n  tags:\n    - nodejs\n  date: 2019-10-02T15:47:20.000Z\n  char_count: 6790\n  short_contant: >-\n    <blockquote>\n\n    <p>转载自：<a\n    href=\"http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/\">http://blog.mixu.net/2011/02/01/understanding-the-node-js-event-loop/</a></p>\n\n    </blockquote>\n\n              <h3>\n                <a name=\"_root-Understanding the nodejs&#39; event loop\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Understanding the nodejs&#39; event loop\n              </h3>\n- abbrlink: 1jvfs4t\n  title: GC Algorithm Implementation\n  categories:\n    - note\n    - thinking\n    - GC\n  tags:\n    - gc\n    - gc-algorithm\n  date: 2019-04-05T05:11:00.000Z\n  char_count: 16767\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><p>前面说了挺多关于GC的算法思路，接下来这篇说说在JVM里实际实现的GC算法，翻译、参考自<a href=\"https://plumbr.io/handbook/garbage-collection-algorithms-implementations\">plumbr.io</a></p>\n    <p>我们首先要清楚地认识到一个事情：除了G1回收器以外，垃圾回收算法分为<strong>“针对新生代”</strong>，<strong>“针对老年代”</strong>两种</p>\n- abbrlink: i9becb\n  title: Leetcode-71~75\n  categories:\n    - note\n    - algorithm\n    - leetcode\n  tags:\n    - leetcode\n    - mysqrt\n    - binary-question\n  date: 2019-04-04T07:35:00.000Z\n  series: leetcode\n  char_count: 9315\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-71. SimplifyPath(Medium)\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                71. SimplifyPath(Medium)\n              </h3><p>Given an <strong>absolute path</strong> for a file (Unix-style), simplify it. Or in other words, convert it to the <strong>canonical path</strong>.</p>\n    <p>In a UNIX-style file system, a period <code>.</code> refers to the\n    current directory. Furthermore, a double period <code>..</code> moves the\n    directory up a level. For more information, see: <a\n    href=\"https://www.linuxnix.com/abslute-path-vs-relative-path-in-linuxunix/\">Absolute\n    path vs relative path in Linux/Unix</a></p>\n- abbrlink: z9pvg9\n  title: Leetcode-66~70\n  categories:\n    - note\n    - algorithm\n    - leetcode\n  tags:\n    - leetcode\n    - mysqrt\n    - binary-question\n  date: 2019-04-02T14:40:00.000Z\n  series: leetcode\n  char_count: 9155\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-66.Plus One(Easy)\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                66.Plus One(Easy)\n              </h3><p>Given a <strong>non-empty</strong> array of digits representing a non-negative integer, plus one to the integer.</p>\n    <p>The digits are stored such that the most significant digit is at the head\n    of the list, and each element in the array contain a single digit.</p>\n- abbrlink: 1cu6q2d\n  title: Leetcode-61~65\n  categories:\n    - note\n    - algorithm\n    - leetcode\n  tags:\n    - leetcode\n  date: 2019-04-02T06:18:00.000Z\n  series: leetcode\n  char_count: 6088\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-61.Rotate List(Medium)\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                61.Rotate List(Medium)\n              </h3><p>Given a linked list, rotate the list to the right by <em>k</em> places, where <em>k</em> is non-negative.</p>\n    <p><strong>Example 1:</strong></p>\n- abbrlink: 1kv61wq\n  title: Leetcode-56~60\n  categories:\n    - note\n    - algorithm\n    - leetcode\n  tags:\n    - leetcode\n    - n-queens\n    - backtrack\n  date: 2019-03-30T13:16:00.000Z\n  series: leetcode\n  char_count: 7432\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-56.Merge Intervals(Medium)\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                56.Merge Intervals(Medium)\n              </h3><p>Given a collection of intervals, merge all overlapping intervals.</p>\n    <p><strong>Example 1:</strong></p>\n- abbrlink: xmbex2\n  title: Leetcode-51~55\n  categories:\n    - note\n    - algorithm\n    - leetcode\n  tags:\n    - leetcode\n    - n-queens\n    - backtrack\n  date: 2019-03-30T02:57:00.000Z\n  series: leetcode\n  char_count: 12505\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-51. N-Queens(Hard)\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                51. N-Queens(Hard)\n              </h3><p>The <em>n</em>-queens puzzle is the problem of placing <em>n</em> queens on an <em>n</em>×<em>n</em> chessboard such that no two queens attack each other.</p>\n- abbrlink: jywoys\n  title: Leetcode-46~50\n  categories:\n    - note\n    - algorithm\n    - leetcode\n  tags:\n    - leetcode\n    - permutation\n    - backtrack\n    - mypow\n  date: 2019-03-27T07:39:00.000Z\n  series: leetcode\n  char_count: 6755\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-46. Permutation(Medium)\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                46. Permutation(Medium)\n              </h3><p>Given a collection of <strong>distinct</strong> integers, return all possible permutations.</p>\n    <p><strong>Example:</strong></p>\n- abbrlink: 1x7azit\n  title: Some Backtracking Problem In Leetcode\n  categories:\n    - note\n    - leetcode\n  tags:\n    - leetcode\n    - backtracking\n  date: 2019-03-24T08:26:00.000Z\n  char_count: 11255\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><p>在Leetcode上做到某些题的时候，会发现这些题的解法大致都是差不多，将<strong>ans容器</strong>传递到某个方法中，这个方法一般有<code>dfs</code>，<code>backtracking</code>，<code>bfs</code>，等命名，然后方法中会有递归调用，然后到达某一个出口的时候，就会将当前的<strong>tmp答案</strong>放置到<strong>ans容器</strong>中，于是达到探索所有解的目的</p>\n    <p>这篇大概也是各个题的题解，只是在评论区里看到有人<a\n    href=\"https://leetcode.com/problems/permutations/discuss/18239/A-general-approach-to-backtracking-questions-in-Java-(Subsets-Permutations-Combination-Sum-Palindrome-Partioning)\">整理</a>了，我就一起整理下来分析分析</p>\n- abbrlink: 1flo1c0\n  title: DP Again\n  categories:\n    - note\n    - algorithm\n  tags:\n    - dp\n  date: 2019-03-22T06:14:00.000Z\n  char_count: 14213\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><p>我们先分析Leetcode的55题，是从45题Jump Game II 跳过来的，因为这题比II要简单一点，只需要判断序列是否能jump到终点就行，而45题是要找最小的jump次数；</p>\n    <p>为什么这题要拿出篇幅来分析？因为这题包含了很多东西： </p>\n- abbrlink: 11z93zc\n  title: Leetcode-41~45\n  categories:\n    - note\n    - algorithm\n    - leetcode\n  tags:\n    - leetcode\n  date: 2019-03-20T20:03:00.000Z\n  series: leetcode\n  char_count: 11222\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-41. First Missing Postive(Hard)\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                41. First Missing Postive(Hard)\n              </h3><p>Given an unsorted integer array, find the smallest missing positive integer.</p>\n    <p><strong>Example 1:</strong></p>\n- abbrlink: v6ei19\n  title: Leetcode-36~40\n  categories:\n    - note\n    - algorithm\n    - leetcode\n  tags:\n    - leetcode\n    - sudoku\n    - combination-sum\n  date: 2019-03-20T19:46:00.000Z\n  series: leetcode\n  char_count: 8384\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-36. Valid Sudoku(Medium)\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                36. Valid Sudoku(Medium)\n              </h3><p>Determine if a 9x9 Sudoku board is valid. Only the filled cells need to be validated <strong>according to the following rules</strong>:</p>\n    <ol>\n\n    <li>Each row must contain the digits <code>1-9</code> without\n    repetition.</li>\n\n    <li>Each column must contain the digits <code>1-9</code> without\n    repetition.</li>\n\n    </ol>\n- abbrlink: wlvrl9\n  title: 再谈对象分代和GC事件\n  categories:\n    - note\n    - thinking\n    - GC\n  tags:\n    - gc\n    - gc-event\n    - generation-type\n  date: 2019-03-18T20:46:00.000Z\n  char_count: 2517\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><p>之前在搜OOM的时候，无意中发现了<a href=\"https://plumbr.io/\">https://plumbr.io/</a>这个网站，它们的产品就是做内存监控工具之类的，于是官网上也有很多关于JVM的GC方面的技术博客，简直和挖到宝藏了一样- -</p>\n    <p>本篇主要是针对对象在堆上的分代和GC事件再做一些细致的了解，主要也是参考网站里的内容</p>\n- abbrlink: djlqql\n  title: 字节跳动2019-03-16后端笔试\n  categories:\n    - note\n    - algorithm\n  tags:\n    - 笔试\n  date: 2019-03-16T22:22:00.000Z\n  char_count: 6582\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><p>就A了签到题，我觉得这次笔试很简单了，可是后面3题没过一个case，题目不难，各种各样的失误8，说到底菜才是原罪，还是得多刷题</p>\n    <p>和leecode不一样的是：</p>\n- abbrlink: dbne5d\n  title: Leetcode-31~35\n  categories:\n    - note\n    - algorithm\n    - leetcode\n  tags:\n    - leetcode\n  date: 2019-03-16T21:46:00.000Z\n  series: leetcode\n  char_count: 8259\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-31. Next Permutation(Medium)\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                31. Next Permutation(Medium)\n              </h3><p>Implement <strong>next permutation</strong>, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>\n    <p>If such arrangement is not possible, it must rearrange it as the lowest\n    possible order (ie, sorted in ascending order).</p>\n- abbrlink: 448jer\n  title: Leetcode-26~30\n  categories:\n    - note\n    - algorithm\n    - leetcode\n  tags:\n    - leetcode\n  date: 2019-03-09T16:21:00.000Z\n  series: leetcode\n  char_count: 13026\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-26. Remove Duplicated From Sorted Array(Easy)\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                26. Remove Duplicated From Sorted Array(Easy)\n              </h3><p>Given a sorted array <em>nums</em>, remove the duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\"><strong>in-place</strong></a> such that each element appear only <em>once</em> and return the new length.</p>\n    <p>Do not allocate extra space for another array, you must do this by\n    <strong>modifying the input array in-place</strong> with O(1) extra\n    memory.</p>\n- abbrlink: 1hrw4sv\n  title: Leetcode-21~25\n  categories:\n    - note\n    - algorithm\n    - leetcode\n  tags:\n    - leetcode\n  date: 2019-03-06T21:17:00.000Z\n  series: leetcode\n  char_count: 10446\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-21. Merge Two Sorted Lists(Easy)\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                21. Merge Two Sorted Lists(Easy)\n              </h3><p>Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.</p>\n    <p><strong>Example:</strong></p>\n- abbrlink: 3yl2hx\n  title: Leetcode-16~20\n  categories:\n    - note\n    - algorithm\n    - leetcode\n  tags:\n    - leetcode\n  date: 2019-03-06T20:13:00.000Z\n  series: leetcode\n  char_count: 8697\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-16.3SumClosest(Medium)\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                16.3SumClosest(Medium)\n              </h3><p>Given an array <code>nums</code> of <em>n</em> integers and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is closest to <code>target</code>. Return the sum of the three integers. You may assume that each input would have exactly one solution.</p>\n    <p><strong>Example:</strong></p>\n- abbrlink: 12iaggv\n  title: Help GC A Favor & JIT Introduction\n  categories:\n    - note\n    - thinking\n    - GC\n  tags:\n    - JVM\n    - GC\n    - JIT\n    - OOM\n  date: 2019-03-04T04:19:00.000Z\n  char_count: 9345\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><p>之前我们了解过GC的很多行为和特点了，也大致知道OOM发生的地点和原因，然后还深入了解了Java中的Reference</p>\n    <p>接下来我们简单说一下如何避免OOM，帮GCor们一个小忙</p>\n- abbrlink: 13tt0au\n  title: Java's Refernece\n  categories:\n    - note\n    - thinking\n    - GC\n  tags:\n    - reference-type\n  date: 2019-03-02T21:08:00.000Z\n  char_count: 7749\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><p>本篇主要内容：</p>\n    <ol>\n    <li>Java 到底是值传递还是引用传递</li>\n    <li>Java 中的引用类型详解以其应用场景</li>\n    </ol>\n- abbrlink: 46bhg0\n  title: The Revelation of Java String\n  categories:\n    - note\n    - thinking\n  tags:\n    - java-string\n    - string-pool\n  date: 2019-03-02T13:50:00.000Z\n  char_count: 13339\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><p>Java中的<code>String</code>其实有很多东西可以深入的，比如最快拼接效率，比如常量池，比如老生常谈的<code>==</code>问题</p>\n    <p>研究它们的时候我们始终要记住，<code>String</code>是不可变的<strong>（immutable）</strong></p>\n- abbrlink: 2gps3g\n  title: Leetcode-11~15\n  categories:\n    - note\n    - algorithm\n    - leetcode\n  tags:\n    - leetcode\n  date: 2019-02-27T21:42:00.000Z\n  series: leetcode\n  char_count: 10244\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-11. Container With Most Water(Medium)\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                11. Container With Most Water(Medium)\n              </h3><p>Given <em>n</em> non-negative integers <em>a1</em>, <em>a2</em>, ..., <em>an</em> , where each represents a point at coordinate (<em>i</em>, <em>ai</em>). <em>n</em> vertical lines are drawn such that the two endpoints of line <em>i</em> is at (<em>i</em>, <em>ai</em>) and (<em>i</em>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>\n    <p><strong>Note:</strong> You may not slant the container and <em>n</em> is\n    at least 2.</p>\n- abbrlink: 1d9upzt\n  title: 最近点对及其相关问题\n  categories:\n    - note\n    - algorithm\n  comments: true\n  date: 2019-02-26T23:04:00.000Z\n  tags:\n    - algorithm\n    - twopoint\n  char_count: 6120\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><p>二维坐标中有一堆点集，记为P，假设P中至少有2个点，那么求出P中距离最近的两个点；</p>\n    <p>首先为了问题准备好点和求两点距离的方法，其中如果两点距离的输入只有一个点，那么它的距离代表无穷大，它表示没有解</p>\n- abbrlink: t1f0vq\n  title: Leetcode-6~10\n  categories:\n    - note\n    - algorithm\n    - leetcode\n  tags:\n    - leetcode\n  date: 2019-02-17T13:18:00.000Z\n  series: leetcode\n  char_count: 15033\n  short_contant: |2-\n\n              <h3>\n                <a name=\"_root-6. ZigZag Conversion(Medium)\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                6. ZigZag Conversion(Medium)\n              </h3><p>The string <code>&quot;PAYPALISHIRING&quot;</code> is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</p>\n    <pre><code>P   A   H   N</code></pre>\n- abbrlink: 1f3qusx\n  title: Hashing\n  categories:\n    - note\n    - algorithm\n  tags:\n    - algorithm\n    - hash\n  date: 2019-02-02T20:40:00.000Z\n  char_count: 5563\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-What is HashTable\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                What is HashTable\n              </h3><p>Of all structure we learn before like &quot;array&quot; or &quot;stack&quot;, the element&#39;s position on their structure is not absolute, it&#39;s uncertain which means there is no pattern on it.  </p>\n    <p>So the searching operation was always base on &quot;comparing&quot;,  the\n    searching efficiency of them were dependence on the times they perform\n    compare.</p>\n- abbrlink: pn2ezr\n  title: Leetcode-1~5\n  categories:\n    - note\n    - algorithm\n    - leetcode\n  tags:\n    - leetcode\n  date: 2019-02-02T19:51:00.000Z\n  series: leetcode\n  char_count: 19284\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-1. TwoSum(Easy)\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                1. TwoSum(Easy)\n              </h3><p>Given an array of integers, return <strong>indices</strong> of the two numbers such that they add up to a specific target.</p>\n    <p>You may assume that each input would have <strong>exactly</strong> one\n    solution, and you may not use the <em>same</em> element twice.</p>\n- abbrlink: 1vj2lew\n  title: Tree Plan-Binary Tree\n  categories:\n    - note\n    - algorithm\n  tags:\n    - algorithm\n    - binary-tree\n    - tree\n    - dfs\n    - bfs\n  date: 2019-01-30T21:36:20.000Z\n  char_count: 4610\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Basic Algorithm In Binary Tree\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Basic Algorithm In Binary Tree\n              </h3>\n              <h4>\n                <a name=\"_root-Traverse\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Traverse\n              </h4><p>A Tree is typically traversed in two ways:</p>\n- abbrlink: 1nz9lo5\n  title: Tree Plan-1\n  categories:\n    - note\n    - algorithm\n  tags:\n    - algorithm\n    - binary-tree\n  date: 2019-01-28T15:11:00.000Z\n  char_count: 5460\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-Should have a PLAN!\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Should have a PLAN!\n              </h3><p>I was asked a tree problem when I was having a face to face interview at <em>PayPal</em> last Friday, and I might failed on this question.</p>\n    <p>It&#39;s been too long that I&#39;m almost forgot the knowledge of TREE,\n    and I&#39;ve never truly go over it and it&#39;s time to get it done.</p>\n- abbrlink: 1u7rv30\n  title: Java并发编程第八坎\n  categories:\n    - note\n    - booknote\n    - 《艺术》与《技术》\n  comments: true\n  tags:\n    - java\n    - thread\n    - Lock-Api\n    - reentrantLock\n    - reentrantReadWriteLock\n  date: 2019-01-07T22:46:48.000Z\n  series: 并发\n  char_count: 16206\n  short_contant: |2-\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><p>我们对Lock和AQS有了一定的了解了之后，可以尝试着接触一些Lock+AQS的基本实现了，本篇会了解到最基本的同步组件<code>ReentrantLock</code>和<code>ReentrantReadWriteLock</code>，前者提供了排他锁的实现，并且支持重入，后者在前者的基础上，支持锁的分级，写锁排他读锁共享。特别的，重入锁的获取还有公平和非公平之分，我们先从这部分入手。</p>\n\n              <h4>\n                <a name=\"_root-Fair Lock &amp; Nonfair Lock\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Fair Lock &amp; Nonfair Lock\n              </h4>\n- abbrlink: vywf17\n  title: CLH Lock Queue\n  categories:\n    - note\n    - datastruct\n  tags:\n    - algorithm\n    - CLH-Lock-Queue\n  date: 2018-12-30T16:35:00.000Z\n  char_count: 4850\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><p>在学习Java并发中的同步器源码的时候，注释中有提到过AQS的Node结构是参考CLH的一种变体：</p>\n    <blockquote>\n\n    <p>The wait queue is a variant of a &quot;CLH&quot; (Craig, Landin, and\n    Hagersten) lock queue. </p>\n\n    </blockquote>\n- abbrlink: u4sgci\n  title: Java并发编程第七坎-2\n  categories:\n    - note\n    - booknote\n    - 《艺术》与《技术》\n  comments: true\n  tags:\n    - java\n    - thread\n    - AQS\n  date: 2018-12-30T12:58:48.000Z\n  series: 并发\n  char_count: 19988\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><p>上节我们介绍了Java并发编程的一个新的阶段——Java并发包中的<code>Lock</code>接口以及<code>AbstractQueuedSynchronizer</code>的配合使用</p>\n    <p>并且尝试实现了一个简单的独占锁Mutex，借此我们了解到，并发编程还能如此灵活与优雅</p>\n- abbrlink: 7kdfk8\n  title: Java并发编程第七坎\n  categories:\n    - note\n    - booknote\n    - 《艺术》与《技术》\n  comments: true\n  tags:\n    - java\n    - thread\n    - AQS\n    - Lock-Api\n  date: 2018-12-25T22:22:48.000Z\n  series: 并发\n  char_count: 9194\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><blockquote>\n    <p>事前吐槽：<em>Doug Lea</em>老爷子的注释可真难读，也许是我英语太菜鸡了- -（本来还挺自信的，现在哭着学英语）</p>\n    </blockquote>\n- abbrlink: 1ae6lng\n  title: Docker Volumes\n  categories:\n    - note\n    - docker\n  tags:\n    - docker\n    - volume\n  date: 2018-12-05T10:23:09.000Z\n  series: docker\n  char_count: 8632\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><blockquote>\n    <p><strong>Volumes are the preferred mechanism for persisting data generated\n    by and used by Docker containers.</strong> While <a\n    href=\"https://docs.docker.com/storage/bind-mounts/\">bind mounts</a> are\n    dependent on the directory structure of the host machine, <strong>volumes\n    are completely managed by Docker</strong>. Volumes have several advantages\n    over bind mounts:</p>\n\n    <ul>\n\n    <li>Volumes are easier to back up or migrate than bind mounts.</li>\n\n    <li>You can manage volumes using Docker CLI commands or the Docker API.</li>\n\n    </ul>\n\n    </blockquote>\n- abbrlink: lt42s8\n  title: Docker Persist Data Overview\n  categories:\n    - note\n    - docker\n  tags:\n    - docker\n    - volume\n  date: 2018-12-04T09:44:33.000Z\n  series: docker\n  char_count: 7375\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><p>By default all files created inside a container are stored on a writable container layer.</p>\n    <p>That means that the data doesn&#39;t persist when that container no\n    longer exists, and it can be difficult to get the data out of the container\n    if another process needs it.</p>\n- abbrlink: rx7jt4\n  title: Docker ConceptReview\n  categories:\n    - note\n    - docker\n  tags:\n    - docker\n  date: 2018-12-02T12:39:09.000Z\n  series: docker\n  char_count: 7764\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><p>In this section, we will go through all the main concepts of docker technologies such as : <strong>Docker Engine</strong>, <strong>Docker Architecture</strong>, <strong>Docker underlying technology</strong>.</p>\n    <p>Basically reprinted from: <a\n    href=\"https://docs.docker.com/engine/docker-overview\">https://docs.docker.com/engine/docker-overview</a>,\n    but I will make some adjustment for better understanding.</p>\n- abbrlink: u7sd0w\n  title: Docker Stack\n  categories:\n    - note\n    - docker\n  tags:\n    - docker\n  date: 2018-11-29T16:46:00.000Z\n  series: docker\n  char_count: 6536\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><p>At the part of &quot;Container&quot;, we&#39;ve know we can define a <code>docker-compose.yaml</code> to deploy a service on our swarm so it can run on multiple machine.</p>\n    <p>As we practice before, our service just contains one container: a python\n    app that provide web service with Flask.</p>\n- abbrlink: 1toixsk\n  title: Docker Swarm&ClusterSetup\n  categories:\n    - note\n    - docker\n  tags:\n    - docker\n    - cluster\n    - swarm\n  date: 2018-11-28T21:06:03.000Z\n  series: docker\n  char_count: 11234\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><p>In the last post, we discussed the relationship between Application and Service. </p>\n    <p>So they say: <strong>Services are really just &quot;Containers in\n    Production&quot;.</strong></p>\n- abbrlink: zkr55u\n  title: Docker Service&Composefile\n  categories:\n    - note\n    - docker\n  tags:\n    - docker\n    - compose-file\n  date: 2018-11-27T12:19:02.000Z\n  series: docker\n  char_count: 6011\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-Service\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Service\n              </h3><p>In a distributed application, different pieces of the app are called “services.” For example, if you imagine a video sharing site, it probably includes <strong>[1]a service for storing application data in a database</strong>, <strong>[2]a service for video transcoding in the background after a user uploads something</strong>, <strong>[3]a service for the front-end</strong>, and so on.</p>\n    <p>Services are really just “containers in production.” A service only runs\n    one image, but it codifies the way that image runs:</p>\n- abbrlink: 1arzjog\n  title: Jenkins Introductions&Setup\n  categories:\n    - note\n    - jenkins\n  tags:\n    - setup\n    - jenkins\n  date: 2018-11-19T14:51:00.000Z\n  series: jenkins\n  char_count: 4227\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Introductions\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introductions\n              </h3><p>首先Jenkins要吐槽一下，Jenkins的Logo真的是太丑了，虽然很明显是一个管家形象- -</p>\n    <p>Jenkins的默认UI也有点丑，还不如官网的UI好看</p>\n- abbrlink: 1xetsy3\n  title: 写在21岁的最后一天\n  categories:\n    - 随笔\n  date: 2018-11-17T15:53:00.000Z\n  char_count: 3599\n  short_contant: |2\n\n              <h4>\n                <a name=\"_root-0. 特定的时刻\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                0. 特定的时刻\n              </h4><p>我是完全不过生日的, 不要礼物不要钱, 不请朋友大鱼大肉也不买蛋糕许愿望更不拉帮结派开party, 过生日我只会想家人想妈妈</p>\n    <p>但是今年这个生日有点特殊吧</p>\n- abbrlink: jhpq7e\n  title: 关于JVM的GC行为和内存分配\n  categories:\n    - note\n    - booknote\n    - 深入理解Java虚拟机\n  comments: true\n  date: 2018-11-17T15:35:00.000Z\n  tags:\n    - jvm\n    - generation-type\n    - gc\n    - gc算法\n    - root-point\n    - saft-point\n    - safe-area\n  series: JVM\n  char_count: 6639\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-对象分代和朝生夕灭\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                对象分代和朝生夕灭\n              </h3><p>对象所在的内存区按照对象存活的时间长久会简单分为：新生代、老年代</p>\n    <p><strong>Garbage\n    Collector</strong>的行为和对象内存所在的区域有很大关系，所以在分析<strong>Collector</strong>之前，我们得先了解一下对象内存的分区</p>\n- abbrlink: uh480l\n  title: Docker Containers&Dockerfile\n  categories:\n    - note\n    - docker\n  tags:\n    - docker\n  date: 2018-11-16T15:05:11.000Z\n  series: docker\n  char_count: 9321\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><p>本篇主要介绍Docker里面Containers的概念，以及它的定义</p>\n    <p>还有就是如何分享你创建的Containers到hub上面</p>\n    <p>需要注意的是，containers的定义其实就是image的定义</p>\n- abbrlink: 1gukab6\n  title: Tess login on Jenkins\n  categories:\n    - note\n    - eBay\n  tags:\n    - tess\n  date: 2018-11-16T14:10:08.000Z\n  char_count: 7042\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Tess login on Jenkins\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Tess login on Jenkins\n              </h3>\n              <h4>\n                <a name=\"_root-Use tess with Rheos tess-base agent\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Use tess with Rheos tess-base agent\n              </h4><p>Assume that you are at &quot;Job Configure&quot; panel now.</p>\n- abbrlink: 2032k5\n  title: Introductions of eBay Tess\n  categories:\n    - note\n    - eBay\n  tags:\n    - eBay\n    - tess\n  date: 2018-11-15T16:18:00.000Z\n  char_count: 6317\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Tess\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Tess\n              </h3>\n              <h4>\n                <a name=\"_root-0. What is Tess?\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                0. What is Tess?\n              </h4><p>Tess.IO is eBay’s cluster manager, with a vision of ensuring a world-class <strong>build, ship and run</strong> experience for eBay’s applications at scale, while ensuring high efficiency, security, and agility to the developers. Tess.IO leverages Kubernetes under its hood. Kubernetes (commonly referred to as “k8s”) is an open source container cluster manager that aims to provide a “platform for automating deployment, scaling, and operations of application containers across clusters of hosts.”</p>\n    <p>Tess makes DevOps a breeze.</p>\n- abbrlink: d5ykz8\n  title: 关于JVM的运行时数据区上的GC\n  categories:\n    - note\n    - booknote\n    - 深入理解Java虚拟机\n  comments: true\n  date: 2018-11-14T22:45:00.000Z\n  tags:\n    - jvm\n    - gc\n    - reference-type\n    - finalize\n  series: JVM\n  char_count: 2883\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Introduction\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Introduction\n              </h3><p>本篇主要介绍什么是GC，GC一般发生在哪里，GC在这些地方都干些什么</p>\n    <p>顺带简单提一下四种<strong>引用类型</strong>以及<code>finalize()</code>方法</p>\n- abbrlink: 18669ga\n  title: 关于JVM的对象创建与访问\n  categories:\n    - note\n    - booknote\n    - 深入理解Java虚拟机\n  comments: true\n  date: 2018-11-14T21:45:00.000Z\n  tags:\n    - jvm\n    - jvm对象创建\n  series: JVM\n  char_count: 3149\n  short_contant: |2-\n\n              <h3>\n                <a name=\"_root-HotSpot虚拟机对象内存\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                HotSpot虚拟机对象内存\n              </h3><p>深入讨论HotSpot虚拟机在Java堆中的对象分配、内存布局和对象访问的过程</p>\n\n              <h4>\n                <a name=\"_root-对象创建流程\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                对象创建流程\n              </h4>\n- abbrlink: 1ei198o\n  title: Docker Orientation&Setup\n  categories:\n    - note\n    - docker\n  tags:\n    - docker\n  date: 2018-11-14T13:50:11.000Z\n  series: docker\n  char_count: 7722\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Docker concepts\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Docker concepts\n              </h3><p>Docker is a platform for developers and sysadmins to <strong>develop, deploy, and run</strong> applications with containers. The use of Linux containers to deploy applications is called <em>containerization</em>. Containers are not new, but their use for easily deploying applications is.</p>\n    <p>Containerization is increasingly popular because containers are:</p>\n    <ul>\n    <li>Flexible: Even the most complex applications can be containerized.</li>\n    <li>Lightweight: Containers leverage and share the host kernel.</li>\n    </ul>\n- abbrlink: 1ro5m3y\n  title: kafka-topic-storage-detail\n  categories:\n    - note\n    - kafka\n  tags:\n    - kafka\n  date: 2018-11-06T16:34:00.000Z\n  char_count: 6219\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Topic &amp; Partition\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Topic &amp; Partition\n              </h3><p>kafka中的Message以topic为分类去组织的，每个topic又可以分为不同的partition去存储：</p>\n    <p>我们引用官方的Introduction中的一节，看官方是怎么解释的：</p>\n- abbrlink: u28b7l\n  title: kafka-helloworld-concept\n  categories:\n    - note\n    - kafka\n  tags:\n    - kafka\n  date: 2018-11-06T15:39:00.000Z\n  char_count: 7071\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-前言\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                前言\n              </h3><p>因为Intern Job的原因，要接触到kafka和Microservice，虽然目前接触的不是很多，对于kafka的场景还不是很熟悉，但是总觉得这个东西是必学的，也是很重要的一种趋势</p>\n    <p>于是前几天给帖老板写的Graduation\n    Design里写的就是kafka+springboot+opentracing的tracing监控系统</p>\n\n    <p>难度还是有的，springboot刚上手，opentracing的api在前一个月的工作里面也算是熟悉了，关键就是kafka以及如何把这几个玩意整合起来</p>\n- abbrlink: pjff39\n  title: 微服务架构理论基础-康威定律\n  categories:\n    - reprinted\n  date: 2018-11-06T10:44:01.000Z\n  char_count: 7156\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-前言\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                前言\n              </h3><blockquote>\n    <p>可能出乎很多人意料之外的一个事实是，微服务很多核心理念其实在半个世纪前的一篇文章中就被阐述过了，而且这篇文章中的很多论点在软件开发飞速发展的这半个世纪中竟然一再被验证，这就是康威定律。</p>\n\n    </blockquote>\n\n              <h3>\n                <a name=\"_root-概述\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                概述\n              </h3><p>微服务是最近非常火热的新概念，大家都在追，也都觉得很对，但是似乎没有很充足的理论基础说明这是正确的，给人的感觉是 <strong>不明觉厉</strong> 。前段时间看了Mike Amundsen <a href=\"http://www.infoq.com/cn/presentations/team-building-implementation-in-distributed-world\">《远距离条件下的康威定律——分布式世界中实现团队构建》</a>（是Design RESTful API的作者）在InfoQ上的一个分享，觉得很有帮助，结合自己的一些思考，整理了该演讲的内容。</p>\n- abbrlink: 1kb6gry\n  title: 微服务（Microservice）那点事\n  categories:\n    - reprinted\n  date: 2018-11-06T10:21:00.000Z\n  char_count: 7992\n  short_contant: |2-\n\n              <h3>\n                <a name=\"_root-前言\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                前言\n              </h3><blockquote>\n    <p>微服务架构被提出很短的时间内，就被越来越多的开发人员推崇，简单来说其主要的目的是有效的拆分应用，实现敏捷开发和部署 。</p>\n    <p>本分享即尝试介绍微服务架构的一些实施细节和要求，探询微服务架构的由来，并最终提供我们团队内部的一些实践总结，希望对大家有帮助。</p>\n    </blockquote>\n\n              <h3>\n                <a name=\"_root-WHAT - 什么是微服务\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                WHAT - 什么是微服务\n              </h3>\n- abbrlink: q0aas8\n  title: Graduation Design\n  categories:\n    - 随笔\n  comments: true\n  date: 2018-11-02T21:56:10.000Z\n  char_count: 1855\n  short_contant: >2\n\n              <h4>\n                <a name=\"_root-Graduation Design\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Graduation Design\n              </h4><ul>\n    <li>Title：Tracing Monitoring System of Kafka-Cluster with Opentracing\n    API</li>\n\n    <li>Framework：B/S</li>\n\n    <li>Technology stack：<ul>\n\n    <li>back-end：</li>\n\n    </ul>\n\n    </li>\n\n    </ul>\n- abbrlink: 188zp6j\n  title: 地痞（DP）成长记\n  categories:\n    - note\n    - algorithm\n  comments: true\n  tags:\n    - algorithm\n    - dp\n  date: 2018-08-30T20:58:01.000Z\n  char_count: 20222\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-大声BB\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                大声BB\n              </h3><p>为了以后看到一道我知道是用DP但是不知道如何去DP的问题再也不会束手无策</p>\n    <p>决心做一个地痞，至少下次看到一个DP不会再被它DP</p>\n- abbrlink: wji6g0\n  title: AVL树和红黑树\n  categories:\n    - note\n    - datastruct\n  comments: true\n  date: 2018-08-27T15:05:00.000Z\n  tags:\n    - BST\n    - AVL\n    - RBT\n    - algorithm\n    - tree\n  char_count: 8943\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-小声BB\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                小声BB\n              </h3><p>本篇尽量不po代码，仅仅过一遍AVL树和红黑树</p>\n    <p>其中红黑树更是在HashMap中大展身手，肯定要研究一下为什么他们要用到RBT</p>\n    <hr>\n- abbrlink: bg6w8m\n  title: 查找大礼包\n  categories:\n    - note\n    - algorithm\n  comments: true\n  date: 2018-08-22T13:10:00.000Z\n  tags:\n    - algorithm\n    - search\n  char_count: 13520\n  short_contant: |2\n\n              <h4>\n                <a name=\"_root-小声BB\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                小声BB\n              </h4><p>整理一波查找相关的东西</p>\n    <ul>\n    <li>几个元素查找算法如：<ul>\n    <li>顺序查找</li>\n    </ul>\n    </li>\n    </ul>\n- abbrlink: ofa68o\n  title: 把HashMap安排得明明白白\n  categories:\n    - thinking\n    - 从头到尾读系列\n  comments: true\n  date: 2018-08-16T12:12:21.000Z\n  tags:\n    - hashmap\n    - collections-framework\n  series: 从头到尾读\n  char_count: 23275\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-前言\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                前言\n              </h3><p>一言难尽 直接开始吧 时间有限 就不一一解读接口了</p>\n    <p>这篇是逐行级别的<code>HashMap</code>的<strong>“基础操作”</strong>源码解读，仅仅分析一些核心的<strong>单元素基础操作（CRUD）</strong>，尽可能从大框架思路去分析实现思路，一些太细的变量和无关操作，就不分析太多了</p>\n- abbrlink: 8lcrnu\n  title: 算法回收站\n  categories:\n    - note\n    - algorithm\n  comments: true\n  date: 2018-08-11T13:41:10.000Z\n  tags:\n    - algorithm\n  char_count: 2245\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-前言\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                前言\n              </h3><p>这篇记录下从今天开始，复习到、新遇到的所有算法题</p>\n    <ul>\n    <li>栈相关</li>\n    <li>数学逻辑相关</li>\n    </ul>\n- abbrlink: 9h3hmp\n  title: 记一次设计模式之旅\n  categories:\n    - note\n  comments: true\n  date: 2018-08-09T15:21:33.000Z\n  tags:\n    - design-pattern\n  char_count: 19385\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-前言\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                前言\n              </h3><p>我</p>\n    <p>面试（大约两个月前）</p>\n- abbrlink: 139027a\n  title: Java并发编程第六坎\n  categories:\n    - note\n    - booknote\n    - 《艺术》与《技术》\n  comments: true\n  tags:\n    - java\n    - thread\n    - dead-lock\n    - wait/notify\n    - consumer/producer\n    - double-check-singleton\n  date: 2018-07-25T21:33:48.000Z\n  series: 并发\n  char_count: 11557\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-前言\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                前言\n              </h3><p>不知不觉写到第六坎了，前面刀剑磨刀石内功心法都有了，感觉自己应该很厉害了，其实不是，这一个月因为考试末尾和实习，断断续续的看，反反复复的看，越看越精神，越看越心虚。</p>\n    <p>无论怎么说，短板还是得慢慢补上来，保持谦逊，虚心学习。</p>\n    <p>回到整体，前面由内到外说了Java并发中很基本的几件事：</p>\n- abbrlink: 1xo3tpx\n  title: Java并发编程第五坎\n  categories:\n    - note\n    - booknote\n    - 《艺术》与《技术》\n  comments: true\n  tags:\n    - java\n    - thread\n    - JMM\n    - happens-before\n    - volatile语义\n    - 锁语义\n  date: 2018-07-21T19:33:48.000Z\n  series: 并发\n  char_count: 9425\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-前言\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                前言\n              </h3><p>前面说了好多好多刀枪剑，还说了一些最前置的内功心法，这回说说更深层的内功心法——<strong>JMM，Java Memory Model，Java内存模型！</strong></p>\n    <p>Java线程之间的通信对程序员是完全透明的（你是很难感知得到的），所以内存可见性问题经常称为并发的通病之一，这坎说的内存模型，是让你更好地去感知，去推断线程内存通信的有力武器。</p>\n- abbrlink: db3vx3\n  title: Java并发编程第四坎\n  categories:\n    - note\n    - booknote\n    - 《艺术》与《技术》\n  comments: true\n  tags:\n    - java\n    - thread\n    - volatile\n    - synchronized\n  date: 2018-07-18T14:16:48.000Z\n  series: 并发\n  char_count: 12106\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-前言\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                前言\n              </h3><p>这回说说Java并发编程第四坎，最常用的<strong>volatile和synchronized关键字</strong>，这两个关键字是理解java同步编程的第一步，，特别是<strong>synchronized关键字</strong>在<em>《Java多线程编程核心技术》</em>中不经意的道出了<strong>线程同步的真谛之一：避免脏读</strong></p>\n    <ul>\n    <li><strong>关键字的解说</strong><ul>\n    <li><strong>volatile的含义、底层实现和使用</strong></li>\n    </ul>\n    </li>\n    </ul>\n- abbrlink: 1h1ww1y\n  title: Java并发编程第三坎\n  categories:\n    - note\n    - booknote\n    - 《艺术》与《技术》\n  comments: true\n  tags:\n    - java\n    - thread\n    - CAS\n  date: 2018-07-18T14:15:22.000Z\n  series: 并发\n  char_count: 2526\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-前言\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                前言\n              </h3><p>前两篇基本说了线程的基本概念和基本使用，这回说说Java并发编程第三坎，关于锁的好多基本概念的提前了解</p>\n    <p>在讲锁之前，我们还需要介绍一个很重要的原理——CAS（Compare And\n    Swap）操作，这个操作是保证并发过程中每个操作具有<strong>“原子性”</strong>的利器</p>\n- abbrlink: 1clnpuk\n  title: Java并发编程第二坎\n  categories:\n    - note\n    - booknote\n    - 《艺术》与《技术》\n  comments: true\n  tags:\n    - java\n    - thread\n    - interrupt\n    - stop&suspend&resume\n  date: 2018-07-15T10:53:22.000Z\n  series: 并发\n  char_count: 12469\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-前言\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                前言\n              </h3><p>前一篇基本说了线程的基本概念和如何创建一个线程，以及非常基本的几个线程方法，接下来我们说说线程的前几个控制相关的方法，包括和暂停一个线程（PAUSE）、让暂停的线程恢复（RESUME）、让线程终止（STOP）</p>\n    <p>这篇我们但是这几个方法不能直接去用，因为这些方法都<strong>过期了</strong>！下面就着Java官方的文档解释，说说为什么过期这几个方法，以及贴出官方给的模板方法去实现这几个过期方法，具体的实现会在后面有例子</p>\n- abbrlink: 1nz333d\n  title: 计算机网络-谢希仁-2\n  categories:\n    - note\n    - booknote\n    - 计算机网络\n  comments: true\n  date: 2018-07-03T20:44:33.000Z\n  tags:\n    - 计算机网络\n  series: 《计算机网络》\n  char_count: 3322\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Chapter2-物理层\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Chapter2-物理层\n              </h3><p>物理层是计网体系结构中的最下面一层，本章主要介绍：</p>\n    <ol>\n    <li>物理层的基本任务</li>\n    <li>几种常用的信道复用技术</li>\n    </ol>\n- abbrlink: 1k7g0p3\n  title: 计算机网络-谢希仁-1\n  categories:\n    - note\n    - booknote\n    - 计算机网络\n  comments: true\n  date: 2018-06-30T10:28:33.000Z\n  tags:\n    - 计算机网络\n  series: 《计算机网络》\n  char_count: 7615\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-前言\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                前言\n              </h3><p>一周前考完了计算机网络，不得不说，计算机网络确实是一个精妙而繁杂的体系产物，虽然民大的考试都很水，但是计网这门课我是认认真真复习好了的，并不是当作考试去复习，每个点都看了，书上的课后习题都大概刷了80%（谢希仁前辈出的这本书，习题量很多），基本上每个点都吃透了一遍。</p>\n    <p>虽然后面还有两门考试，但很容易就过，也不需要准备，主要的复习科目也考完了，所以趁热打铁，马上进行计网的笔记整理和复习。</p>\n- abbrlink: bu9klx\n  title: Java并发编程第一坎\n  categories:\n    - note\n    - booknote\n    - 《艺术》与《技术》\n  comments: true\n  tags:\n    - java\n    - thread\n    - wait/notify\n  date: 2018-06-05T22:09:00.000Z\n  series: 并发\n  char_count: 11646\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-前言\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                前言\n              </h3><p>本<strong>系列</strong>文章主要是为Java并发入门做铺垫，集中清点：</p>\n    <ul>\n    <li><strong>Thread的基本概念</strong></li>\n    <li><strong>生命周期</strong></li>\n    </ul>\n- abbrlink: rku8jh\n  title: 从头到尾读ArrayList\n  categories:\n    - thinking\n    - 从头到尾读系列\n  comments: true\n  date: 2018-06-05T08:31:21.000Z\n  tags:\n    - arraylist\n    - collections-framework\n  series: 从头到尾读\n  char_count: 16208\n  short_contant: >2\n\n              <h4>\n                <a name=\"_root-ArrayList类\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                ArrayList类\n              </h4><p>对终于要正式开始读<strong>ArrayList</strong>的源码了，虽然<strong>ArrayList</strong>的源码价值并不是那么地大，但作为集合框架源码阅读的第一站来说，我选择了在这里站稳脚跟</p>\n    <p>这个计划搁置了很久，大概有15天，中间跑去面试了一个星期，面试下来发现自己的基础已经忘的差不多了，决定回来好好沉淀一段时间，暑期实习offer有没有已经不重要了，<strong>剑指秋招！</strong></p>\n\n    <p>为什么要读它，因为线性表几乎是数据结构的基础必备，昨晚花了将近1小时手撸了一个ArrayList的自实现，再搭配源码来看<strong>自己在基础方法上有哪些没考虑到的点</strong>，以及<strong>实际投入使用的ArrayList到底优秀在哪里</strong></p>\n- abbrlink: 1gfw5vx\n  title: 自实现ArrayList\n  categories:\n    - note\n  comments: true\n  date: 2018-06-04T22:47:12.000Z\n  tags:\n    - arraylist\n  char_count: 5090\n  short_contant: >2\n\n              <h4>\n                <a name=\"_root-前言\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                前言\n              </h4><p>最近在复习<strong>数据结构</strong>和<strong>算法</strong>，这两个玩意也是被称之为<strong>“程序员的基本素养”</strong>，我最近比较想干的一件事就是读集合框架的源码</p>\n    <p>基于这个伟大目标，我开启了源码阅读的<strong>“从头到尾读”</strong>系列，目前只完成了<strong>Collection接口、Iterable接口、Iterator接口</strong>这三个章节，正打算开始读<strong>ArrayList</strong>的源码</p>\n- abbrlink: 1pf7qyq\n  title: Java运算符的阴谋论\n  categories:\n    - note\n  comments: true\n  tags:\n    - java\n    - operator\n  date: 2018-06-03T21:28:00.000Z\n  char_count: 7996\n  short_contant: \"<p><div class=\\\"saying mb-4\\\"></p>\\n<p>小心点，一不小心你就栽跟头了 \\U0001F47B</p>\\n<p></div></p>\\n\"\n- abbrlink: rikltc\n  title: 关于JVM的运行时数据区\n  categories:\n    - note\n    - booknote\n    - 深入理解Java虚拟机\n  comments: true\n  date: 2018-06-02T22:48:00.000Z\n  tags:\n    - jvm\n    - 运行时数据区\n  series: JVM\n  char_count: 3174\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-前言\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                前言\n              </h3><p>本书第二版为止，其实还是针对于Java SE 7 Specification（后简称Spec），然而到了Java8，情况又有很大的不同，比如最出名的Permanent Generation，就在8中被HotSpot虚拟机移除掉了，所以这一系列的文章，我后续还需要慢慢地研究和重写</p>\n    <p>然后是一篇关于Java SE 7 Spec的<a\n    href=\"http://blog.jamesdbloom.com/JVMInternals.html#threads\">好文</a></p>\n- abbrlink: 1b0rp9e\n  title: 排序大礼包\n  categories:\n    - note\n    - algorithm\n  comments: true\n  date: 2018-06-02T18:50:00.000Z\n  tags:\n    - algorithm\n    - sort\n  char_count: 15460\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-术语\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                术语\n              </h3><p><strong>稳定性：</strong>算法排序前后，相同值的元素的相对位置是否不变，变了就不稳定</p>\n    <p><strong>在位性：</strong>算法排序是否要借助额外的内存空间，需要就不在位</p>\n- abbrlink: n0hez3\n  title: 这，就是Lambda！\n  categories:\n    - note\n  comments: true\n  date: 2018-06-02T10:52:00.000Z\n  tags:\n    - lambda\n    - java8\n  char_count: 9025\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-HelloWorld\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                HelloWorld\n              </h3><p>昨天的小米笔试题: <strong>请用Lambda写一个将int数组[1,2,3]转换为String数组[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]</strong></p>\n    <p>当时没写完整，就这个为例作为开始吧, 完整代码如下:</p>\n    <pre><code class=\"language-java\">  int[] si = {1, 2, 3};</code></pre>\n- abbrlink: 1kakozs\n  title: 从头到尾读Iterable与Iterator\n  categories:\n    - thinking\n    - 从头到尾读系列\n  comments: true\n  date: 2018-05-15T17:22:14.000Z\n  tags:\n    - iterable\n    - iterator\n    - collections-framework\n  series: 从头到尾读\n  char_count: 2521\n  short_contant: |2-\n\n              <h3>\n                <a name=\"_root-Iterable接口\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Iterable接口\n              </h3><p>含义: 这个接口的含义是, 容器的元素是否支持<strong>迭代器</strong>访问</p>\n\n              <h4>\n                <a name=\"_root-源码\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                源码\n              </h4>\n- abbrlink: faxga5\n  title: 从头到尾读Collection\n  categories:\n    - thinking\n    - 从头到尾读系列\n  comments: true\n  date: 2018-05-15T17:17:26.000Z\n  tags:\n    - collection\n    - collections-framework\n  series: 从头到尾读\n  char_count: 4924\n  short_contant: |2\n\n              <h3>\n                <a name=\"_root-Collection接口\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Collection接口\n              </h3>\n              <h3>\n                <a name=\"_root-源代码解读\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                源代码解读\n              </h3>\n              <h4>\n                <a name=\"_root-头部\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                头部\n              </h4><pre><code class=\"language-java\">public interface Collection&lt;E&gt; extends Iterable&lt;E&gt; {</code></pre>\n- abbrlink: 1bhsyh3\n  title: 初探Java8之方法引用\n  categories:\n    - thinking\n  comments: true\n  date: 2018-05-15T10:40:00.000Z\n  tags:\n    - java8\n    - 方法引用\n  char_count: 3977\n  short_contant: >\n    <p><div class=\"saying mb-4\"></p>\n\n    <p>本文从为知笔记迁移过来, 本文的写作时间是 : 2016/10/18 下午1:41:28, 两年前的文章, 言语难免幼稚, 思维难免浅显,\n    多多包含.</p>\n\n    <p></div></p>\n\n    <blockquote>\n\n    <p>在学习这个东西的时候，找了很多资料，网上说的也都很笼统，找不到一个比较容易上手的例子，直到我看到一篇文章，作者在整体讲述Java5-8的新特性，其中讲完Java8的lambda表达式之后，马上就讲方法引用这个特性，我才更加清楚的意识到，方法引用其实是比lambda更加简洁的一个语法糖（不知道我这样理解对不对），但是，常识告诉我们，越简单的技术，限制条件就越多，为什么网上的关于方法引用的讲解都很散，因为方法引用的使用条件有点多。</p>\n\n    </blockquote>\n- abbrlink: nr7s9o\n  title: 初探Java8之lambda\n  categories:\n    - thinking\n  comments: true\n  date: 2018-05-15T10:05:00.000Z\n  tags:\n    - java8\n    - lambda\n  char_count: 6344\n  short_contant: >-\n    <p><div class=\"saying mb-4\"></p>\n\n    <p>本文从为知笔记迁移过来, 本文的写作时间是 : 2016/10/17 下午12:28:14, 两年前的文章, 言语难免幼稚, 思维难免浅显,\n    多多包含.</p>\n\n    <p></div></p>\n\n              <h3>\n                <a name=\"_root-引例\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                引例\n              </h3>\n- abbrlink: 14k0uek\n  title: 对持续集成(CI)的一些理解\n  tags:\n    - CI\n  categories:\n    - thinking\n  date: 2018-05-08T15:53:01.000Z\n  char_count: 1467\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-什么是CI\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                什么是CI\n              </h3><p><strong>持续集成（Continuous integration）</strong> 不是什么新概念</p>\n    <blockquote>\n\n    <p><em>持续集成是一种软件开发实践，即团队开发成员经常集成他们的工作，通过每个成员每天至少集成一次，也就意味着每天可能会发生多次集成。每次集成都通过自动化的构建（包括编译，发布，自动化测试）来验证，从而尽早地发现集成错误。</em></p>\n\n    </blockquote>\n\n    <p>以上引自百度百科的定义。</p>\n- abbrlink: n8gsoq\n  title: JettyDocument_ZH_CN_Translation_README\n  tags:\n    - jetty\n    - document\n    - readme\n  categories:\n    - translation\n  series: JettyDocument_ZH_CN_Translation\n  date: 2018-05-07T17:30:01.000Z\n  char_count: 2979\n  short_contant: >2-\n\n              <h1>\n                <a name=\"_root-Jetty : Servlet Engine and HTTP server\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Jetty : Servlet Engine and HTTP server\n              </h1><p>创立时间：2017年8月25日16:13:49</p>\n    <p>官方文档地址：<a\n    href=\"http://www.eclipse.org/jetty/documentation/9.4.6.v20170531/\">http://www.eclipse.org/jetty/documentation/9.4.6.v20170531/</a></p>\n\n    <hr>\n\n    <p>Maven依赖：</p>\n\n    <pre><code>&lt;properties&gt;</code></pre>\n- abbrlink: 1cei7aq\n  title: JettyDocument_ZH_CN_Translation_Part4-23\n  tags:\n    - jetty\n    - document\n  categories:\n    - translation\n  series: JettyDocument_ZH_CN_Translation\n  date: 2018-05-07T17:30:01.000Z\n  char_count: 16624\n  short_contant: >\n    <p><span id=\"top\"></span></p>\n\n              <h3>\n                <a name=\"_root-Ⅳ. Jetty开发指南-23.Jetty和Maven\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Ⅳ. Jetty开发指南-23.Jetty和Maven\n              </h3><ul>\n    <li><ol start=\"23\">\n\n    <li><a href=\"#23jetty%E5%92%8Cmaven\">Jetty和Maven</a></li>\n\n    </ol>\n\n    <ul>\n\n    <li><a href=\"#231%E4%BD%BF%E7%94%A8maven\">使用Maven</a><ul>\n\n    <li><a\n    href=\"#2311%E4%BD%BF%E7%94%A8maven%E5%81%9A%E5%B5%8C%E5%85%A5%E5%BC%8Fjetty%E5%BC%80%E5%8F%91\">使用Maven做嵌入式Jetty开发</a></li>\n\n    <li><a\n    href=\"#2321%E4%BD%BF%E7%94%A8maven%E5%BC%80%E5%8F%91%E6%A0%87%E5%87%86%E7%9A%84wabapp\">使用Maven开发标准的WebApp</a></li>\n\n    </ul>\n\n    </li>\n\n    <li><a\n    href=\"#232%E9%85%8D%E7%BD%AEjetty%E7%9A%84maven%E6%8F%92%E4%BB%B6\">配置Jetty的Maven插件</a><ul>\n\n    <li><a href=\"#2321%E5%BF%AB%E9%80%9F%E5%BC%80%E5%A7%8B\">快速开始</a></li>\n\n    </ul>\n\n    </li>\n\n    </ul>\n\n    </li>\n\n    </ul>\n- abbrlink: 18rke1\n  title: JettyDocument_ZH_CN_Translation_Part4-21\n  tags:\n    - jetty\n    - document\n  categories:\n    - translation\n  series: JettyDocument_ZH_CN_Translation\n  date: 2018-05-07T17:30:01.000Z\n  char_count: 36623\n  short_contant: >\n    <p><span id=\"top\"></span></p>\n\n              <h3>\n                <a name=\"_root-Ⅳ. Jetty开发指南-21.嵌入式开发\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Ⅳ. Jetty开发指南-21.嵌入式开发\n              </h3><ul>\n    <li><ol start=\"21\">\n\n    <li><a\n    href=\"#21%E5%B5%8C%E5%85%A5%E5%BC%8F%E5%BC%80%E5%8F%91\">嵌入式开发</a></li>\n\n    </ol>\n\n    <ul>\n\n    <li><a\n    href=\"#211jetty%E7%9A%84%E5%B5%8C%E5%85%A5%E5%BC%8Fhello-world\">Jetty的嵌入式Hello\n    World</a><ul>\n\n    <li><a href=\"#2111%E4%B8%8B%E8%BD%BDjar%E5%8C%85\">下载Jar包</a></li>\n\n    <li><a href=\"#2112hello-world%E6%A0%97%E5%AD%90\">Hello World栗子</a></li>\n\n    <li><a href=\"#2113%E7%BC%96%E8%AF%91hello-world%E6%A0%97%E5%AD%90\">编译Hello\n    World栗子</a></li>\n\n    <li><a\n    href=\"#2114%E8%BF%90%E8%A1%8Chandler%E5%92%8Cserver\">运行Handler和Server</a></li>\n\n    </ul>\n\n    </li>\n\n    </ul>\n\n    </li>\n\n    </ul>\n- abbrlink: cc3kmk\n  title: JettyDocument_ZH_CN_Translation_Part3-13\n  tags:\n    - jetty\n    - document\n  categories:\n    - translation\n  series: JettyDocument_ZH_CN_Translation\n  date: 2018-05-07T17:30:01.000Z\n  char_count: 14556\n  short_contant: >\n    <p><span id=\"top\"></span></p>\n\n              <h3>\n                <a name=\"_root-Ⅲ. Jetty管理者指南-13.注释\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Ⅲ. Jetty管理者指南-13.注释\n              </h3><ul>\n    <li><ol start=\"13\">\n\n    <li><a href=\"#13%E6%B3%A8%E8%A7%A3\">注解</a></li>\n\n    </ol>\n\n    <ul>\n\n    <li><a href=\"#131%E5%BF%AB%E9%80%9F%E8%AE%BE%E7%BD%AE\">快速设置</a><ul>\n\n    <li><a\n    href=\"#1311%E5%85%B3%E4%BA%8Ejetty%E5%8F%91%E8%A1%8C%E7%89%88\">关于Jetty发行版</a></li>\n\n    <li><a href=\"#1312%E5%85%B3%E4%BA%8Ejetty-maven-plugin\">关于Jetty Maven\n    Plugin</a></li>\n\n    <li><a\n    href=\"#1313%E5%85%B3%E4%BA%8E%E5%B5%8C%E5%85%A5%E5%BC%8F\">关于嵌入式</a></li>\n\n    </ul>\n\n    </li>\n\n    <li><a href=\"#132%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3\">使用注解</a></li>\n\n    </ul>\n\n    </li>\n\n    </ul>\n- abbrlink: 17hjlts\n  title: JettyDocument_ZH_CN_Translation_Part1\n  tags:\n    - jetty\n    - document\n  categories:\n    - translation\n  series: JettyDocument_ZH_CN_Translation\n  date: 2018-05-07T17:30:01.000Z\n  char_count: 25573\n  short_contant: >2\n\n              <h3>\n                <a name=\"_root-Ⅰ.开始使用Jetty\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Ⅰ.开始使用Jetty\n              </h3><p><span id=\"top\"></span></p>\n    <ul>\n\n    <li><ol>\n\n    <li><a\n    href=\"#1%E5%85%B3%E4%BA%8Ejetty%E7%9A%84%E4%BB%8B%E7%BB%8D\">关于Jetty的介绍</a></li>\n\n    </ol>\n\n    <ul>\n\n    <li><a href=\"#11%E4%BB%80%E4%B9%88%E6%98%AFjetty\">什么是Jetty</a></li>\n\n    <li><a\n    href=\"#12%E6%88%91%E5%BA%94%E8%AF%A5%E4%BD%BF%E7%94%A8%E5%93%AA%E4%B8%AA%E7%89%88%E6%9C%AC\">我应该使用哪个版本</a></li>\n\n    <li><a\n    href=\"#13jetty%E5%92%8Cjavaee%E7%9A%84web%E8%A7%84%E8%8C%83\">Jetty和JavaEE的Web规范</a></li>\n\n    <li><a\n    href=\"#14%E5%9C%A8maven%E9%87%8C%E9%9D%A2%E6%89%BE%E5%88%B0jetty\">在Maven里面找到Jetty</a></li>\n\n    </ul>\n\n    </li>\n\n    <li><ol start=\"2\">\n\n    <li><a href=\"#2%E4%BD%BF%E7%94%A8jetty\">使用Jetty</a></li>\n\n    </ol>\n\n    </li>\n\n    </ul>\n- abbrlink: 1ngl1pm\n  title: Cron4jDocument_ZH_CN_Translation\n  categories:\n    - translation\n  tags:\n    - cron4j\n    - scheduler\n  series: Cron4jDocument_ZH_CN_Translation\n  date: 2018-05-07T17:25:01.000Z\n  char_count: 20010\n  short_contant: |2\n\n              <h1>\n                <a name=\"_root-Cron4j\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Cron4j\n              </h1><p>一些必要的单词解释：</p>\n    <ol>\n    <li>schedule 安排、调度（安排在有主语的时候使用 调用在没主语的时候使用）</li>\n    <li>scheduler 调度器</li>\n    <li>scheduling pattern 调度模式</li>\n    <li>reschedule 重新调度、安排</li>\n    <li>action/task 动作/任务</li>\n    </ol>\n- abbrlink: 19jo7o1\n  title: Cron4jDocument_ZH_CN_Translation_README\n  categories:\n    - translation\n  tags:\n    - cron4j\n    - scheduler\n    - readme\n  series: Cron4jDocument_ZH_CN_Translation\n  date: 2018-05-07T17:12:01.000Z\n  char_count: 2426\n  short_contant: >2-\n\n              <h1>\n                <a name=\"_root-Cron4j : A pure Java cron-like scheduler\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Cron4j : A pure Java cron-like scheduler\n              </h1><p>创立时间：2017年8月20日13:35:01</p>\n    <p>官方文档地址：<a\n    href=\"http://www.sauronsoftware.it/projects/cron4j/\">http://www.sauronsoftware.it/projects/cron4j/</a></p>\n\n    <hr>\n\n    <p>Maven依赖：</p>\n\n    <pre><code>&lt;dependency&gt;</code></pre>\n- abbrlink: spovqu\n  title: Linux安装MySql\n  categories:\n    - reprinted\n  tags:\n    - mysql\n    - linux\n  date: 2018-05-03T16:05:01.000Z\n  char_count: 3302\n  short_contant: |2-\n\n              <h1>\n                <a name=\"_root-Linux安装MySql\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Linux安装MySql\n              </h1><p>一位哲人说过，只会用 FTP 工具的人都是傻子。</p>\n\n              <h2>\n                <a name=\"_root-原料\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                原料\n              </h2><p>去 <a href=\"https://www.mysql.com/downloads/\">Mysql官网</a> 下载<br>mysql-5.7.19-linux-glibc2.12x86_64.tar.gz。</p>\n\n              <h2>\n                <a name=\"_root-步骤\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                步骤\n              </h2>\n- abbrlink: mtg94p\n  title: 蓝桥杯Java一夜暴富\n  categories:\n    - 随笔\n  comments: false\n  tags:\n    - 蓝桥杯\n  date: 2018-03-30T16:59:43.000Z\n  char_count: 13214\n  short_contant: |2\n\n              <h4>\n                <a name=\"_root-目录\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                目录\n              </h4><ul>\n    <li>eclipse快捷键</li>\n    <li>数组的使用<ul>\n    <li>初始化</li>\n    <li>for-each遍历</li>\n    <li>使用底层API快速复制</li>\n    <li>搭配Arrays类进行二分查找和排序</li>\n    </ul>\n    </li>\n    <li>String类</li>\n    </ul>\n- abbrlink: 1ox3j6i\n  title: CentOS7下安装Pillow并使用osm-bundler生成图点模型\n  categories:\n    - note\n    - project\n    - 17y-CollagesStudent-Creative-Project\n  comments: true\n  tags:\n    - centos7\n    - python\n    - Pillow\n    - osm-bundler\n    - pip\n  date: 2018-01-21T11:50:30.000Z\n  char_count: 5699\n  short_contant: >-\n    <p><div class=\"saying\n    mb-4\"><br>前言：之前留下的17大创项目总得做点什么，马上就要结题了，我们做的AR留影需要将用户照下来的照片生成点云然后合成模型。由此Escnqh[link:gayhub]找到了使用PIL+osm-bundler的解决方案。<br></div></p>\n\n    <!-- more -->\n\n\n              <h3>\n                <a name=\"_root-Python Photogrammetry ToolKit（PPT）\" class=\"reference-link\" target=\"_blank\">\n                  <span class=\"header-link\"></span>\n                </a>\n                Python Photogrammetry ToolKit（PPT）\n              </h3>\n- abbrlink: 3zxt7z\n  title: Log4j2_Lookups\n  categories:\n    - note\n    - toolslearning\n    - log4j2\n  comments: true\n  tags:\n    - log4j2\n    - learning\n  date: 2017-12-09T15:28:15.000Z\n  series: Log4j2\n  char_count: 1609\n  short_contant: |+\n    <p><div class=\"saying mb-4\"></p>\n    <p>Lookups：让你的配置更灵活</p>\n    <p></div></p>\n    <!-- more -->\n\n- abbrlink: 3fjm8j\n  title: Log4j2_Filters\n  categories:\n    - note\n    - toolslearning\n    - log4j2\n  comments: true\n  tags:\n    - log4j2\n    - learning\n  date: 2017-12-09T12:41:20.000Z\n  series: Log4j2\n  char_count: 2496\n  short_contant: |+\n    <p><div class=\"saying mb-4\"></p>\n    <p>Filters：过滤你的日志信息</p>\n    <p></div></p>\n    <!-- more -->\n\n- abbrlink: yvgzwi\n  title: Log4j2_Layouts\n  categories:\n    - note\n    - toolslearning\n    - log4j2\n  comments: true\n  tags:\n    - log4j2\n    - learning\n  date: 2017-12-08T14:39:16.000Z\n  series: Log4j2\n  char_count: 1251\n  short_contant: |+\n    <p><div class=\"saying mb-4\"></p>\n    <p>Layout：定制你的输出模式</p>\n    <p></div></p>\n    <!-- more -->\n\n- abbrlink: a9wle2\n  title: 我认为的规范的git commit msg\n  top: true\n  categories:\n    - thinking\n  comments: true\n  tags:\n    - tips\n    - github\n    - git\n  date: 2017-11-29T18:30:01.000Z\n  char_count: 2786\n  short_contant: |+\n    <p><div class=\"saying mb-4\"></p>\n    <p>其实必要的时候使用<code>git commit -m &quot;xxxxx&quot;</code>也木有关系 但你也别每条都这样写</p>\n    <p></div></p>\n    <!-- more -->\n\n- abbrlink: 1q1lo3l\n  title: Electron_打包你的HelloWorld为exe\n  categories:\n    - note\n    - electron\n  comments: true\n  tags:\n    - electron\n    - helloworld\n  series: electron\n  date: 2017-11-23T13:02:21.000Z\n  char_count: 5611\n  short_contant: |\n    <p><div class=\"saying mb-4\"></p>\n    <p>EXE什么的，看着就忍不住要双击它！</p>\n    <p></div></p>\n- abbrlink: a08lib\n  title: Electron_一个HelloWorld\n  categories:\n    - note\n    - electron\n  comments: true\n  tags:\n    - electron\n    - helloworld\n  series: electron\n  date: 2017-11-22T22:05:23.000Z\n  char_count: 4949\n  short_contant: |\n    <p><div class=\"saying mb-4\"></p>\n    <p>惊！仅用前端技术就可以打造跨平台桌面应用！</p>\n    <p></div></p>\n- abbrlink: nff3ic\n  title: Log4j2_Appenders\n  comments: true\n  tags:\n    - log4j2\n    - learning\n  categories:\n    - note\n    - toolslearning\n    - log4j2\n  date: 2017-11-17T16:37:18.000Z\n  series: Log4j2\n  char_count: 6218\n  short_contant: |\n    <p><div class=\"saying mb-4\"></p>\n    <p>上篇介绍了使用Log4j2之前的准备工作和简单介绍了一个HelloWorld</p>\n    <p>现在我们来了解配置中的第一个关键配置：Appenders</p>\n    <p></div></p>\n- abbrlink: en4hhw\n  title: Log4j2_HelloWorld\n  tags:\n    - log4j2\n    - learning\n  categories:\n    - note\n    - toolslearning\n    - log4j2\n  comments: true\n  date: 2017-11-17T16:13:21.000Z\n  series: Log4j2\n  char_count: 3771\n  short_contant: >+\n    <p><div class=\"saying mb-4\"></p>\n\n    <p>Lo4j2是啥就不解释了，之前无论是使用log4j还是log4j2，同样只是简单的各种百度然后复制粘贴没有系统的总结一下，今天把一个小小的Ajax的测试程序放服务器上面都不知道怎么查错，然后想写一下log来看看哪错了吧，发现还是不会独立配置log4j，于是想总结一波。基本的思路是总结官方文档和官方推荐的中文文档，尽量简洁表达出原理以及应用。</p>\n\n    <p></div></p>\n\n    <!-- more -->\n\n- abbrlink: huiysg\n  title: RegExp_2_metacharacters\n  categories:\n    - note\n    - booknote\n    - 《Mastering Regular Expression(Third Edition)》\n  comments: true\n  tags:\n    - learning\n    - RegExp\n  date: 2017-11-17T00:02:06.000Z\n  series: 《Mastering Regular Expression(Third Edition)》\n  char_count: 2422\n  short_contant: |+\n    <p><div class=\"saying mb-4\"></p>\n    <p>Metacharacters：元字符</p>\n    <p></div></p>\n    <!-- more -->\n\n- abbrlink: 1k4djcz\n  title: RegExp_1_overview\n  tags:\n    - learning\n    - RegExp\n  categories:\n    - note\n    - booknote\n    - 《Mastering Regular Expression(Third Edition)》\n  comments: true\n  date: 2017-11-17T00:00:56.000Z\n  series: 《Mastering Regular Expression(Third Edition)》\n  char_count: 1332\n  short_contant: >\n    <p><em>引言：接触计算机编程以来，无数次碰到过这个名词“正则表达式”，刚开始肯定是不懂，但是听到“表达式”三个字就发现事情并不简单。</em></p>\n\n    <!-- more -->\n\n\n    <p><em>第一次接触到它还是在我进NTJ2EE的招新机试的时候，机试题有一道题：“有一个字符串，其中包含中文字符、英文字符和数字字符，请统计和打印出各个字符的个数。”，当时只会用取字符对照ascii的方法来做这道题，然后正好学长看了我的做法，他说还有种东西叫做“正则表达式”，然后他给我打开了在线的JDK-1.6的API，找到了里面介绍正则表达式的页，然后还百度了一篇正则表达式的教程给我看（对，就是那个通篇斜杠写反的那盘），然后我就头皮发麻了。</em></p>\n\n    <p><em>在之后无论是正式学习还是运用到实际当中，我的处理都是：百度——ctrl+c——ctrl+v，然后下次碰到另一个字符串处理问题的时候还是这样做，毫无意义，甚至还不能完全匹配我的应用场景。然后这次的工程中心项目，我负责写前端，对输入框需要用到字符串过滤的需求，就这么简单的一个功能我都实现不了，感觉非常丢人，我不想再复制粘贴了，所以开始以blog的形式记录我学习<code>regular-expression</code>的过程。</em></p>\n- abbrlink: 1h187i6\n  title: 5 Useful Tips For A Better Commit Message\n  categories:\n    - reprinted\n  comments: true\n  tags:\n    - tips\n    - github\n    - git\n  date: 2017-11-15T16:59:00.000Z\n  char_count: 3731\n  short_contant: >\n    <p>You’re already writing decent commit messages. Let’s see if we can level\n    you up to awesome. Other developers, especially you-in-two-weeks and\n    you-from-next-year, will thank you for your forethought and verbosity when\n    they run git blame to see why that conditional is there.</p>\n\n    <!-- more -->\n\n\n    <ol>\n\n    <li><p>The first line should always be <u>50 characters</u> or less and that\n    it should be followed by a blank line. Vim ships with syntax, indent, and\n    filetype plugins for Git commits which can help here.</p>\n\n    </li>\n\n    <li><p>Add this line to your <code>~/.vimrc</code> to add spell checking and\n    automatic wrapping at the recommended 72 columns to you commit messages.</p>\n\n    </li>\n\n    </ol>\n");
sessionStorage.setItem('pod', "字符编码笔记<=>1w60zyo>--<Electron_UI<=>kimeni>--<Electron_配置相关与对象<=>1y7ozg8>--<Electron_上手铺垫<=>11zuc81>--<Express Middleware<=>1tzsbbu>--<Express Routing<=>1n8vn13>--<Understanding the nodejs' event loop<=>1w97yet>--<GC Algorithm Implementation<=>1jvfs4t>--<Leetcode-71~75<=>i9becb>--<Leetcode-66~70<=>z9pvg9>--<Leetcode-61~65<=>1cu6q2d>--<Leetcode-56~60<=>1kv61wq>--<Leetcode-51~55<=>xmbex2>--<Leetcode-46~50<=>jywoys>--<Some Backtracking Problem In Leetcode<=>1x7azit>--<DP Again<=>1flo1c0>--<Leetcode-41~45<=>11z93zc>--<Leetcode-36~40<=>v6ei19>--<再谈对象分代和GC事件<=>wlvrl9>--<字节跳动2019-03-16后端笔试<=>djlqql>--<Leetcode-31~35<=>dbne5d>--<Leetcode-26~30<=>448jer>--<Leetcode-21~25<=>1hrw4sv>--<Leetcode-16~20<=>3yl2hx>--<Help GC A Favor & JIT Introduction<=>12iaggv>--<Java's Refernece<=>13tt0au>--<The Revelation of Java String<=>46bhg0>--<Leetcode-11~15<=>2gps3g>--<最近点对及其相关问题<=>1d9upzt>--<Leetcode-6~10<=>t1f0vq>--<Hashing<=>1f3qusx>--<Leetcode-1~5<=>pn2ezr>--<Tree Plan-Binary Tree<=>1vj2lew>--<Tree Plan-1<=>1nz9lo5>--<Java并发编程第八坎<=>1u7rv30>--<CLH Lock Queue<=>vywf17>--<Java并发编程第七坎-2<=>u4sgci>--<Java并发编程第七坎<=>7kdfk8>--<Docker Volumes<=>1ae6lng>--<Docker Persist Data Overview<=>lt42s8>--<Docker ConceptReview<=>rx7jt4>--<Docker Stack<=>u7sd0w>--<Docker Swarm&ClusterSetup<=>1toixsk>--<Docker Service&Composefile<=>zkr55u>--<Jenkins Introductions&Setup<=>1arzjog>--<写在21岁的最后一天<=>1xetsy3>--<关于JVM的GC行为和内存分配<=>jhpq7e>--<Docker Containers&Dockerfile<=>uh480l>--<Tess login on Jenkins<=>1gukab6>--<Introductions of eBay Tess<=>2032k5>--<关于JVM的运行时数据区上的GC<=>d5ykz8>--<关于JVM的对象创建与访问<=>18669ga>--<Docker Orientation&Setup<=>1ei198o>--<kafka-topic-storage-detail<=>1ro5m3y>--<kafka-helloworld-concept<=>u28b7l>--<微服务架构理论基础-康威定律<=>pjff39>--<微服务（Microservice）那点事<=>1kb6gry>--<Graduation Design<=>q0aas8>--<地痞（DP）成长记<=>188zp6j>--<AVL树和红黑树<=>wji6g0>--<查找大礼包<=>bg6w8m>--<把HashMap安排得明明白白<=>ofa68o>--<算法回收站<=>8lcrnu>--<记一次设计模式之旅<=>9h3hmp>--<Java并发编程第六坎<=>139027a>--<Java并发编程第五坎<=>1xo3tpx>--<Java并发编程第四坎<=>db3vx3>--<Java并发编程第三坎<=>1h1ww1y>--<Java并发编程第二坎<=>1clnpuk>--<计算机网络-谢希仁-2<=>1nz333d>--<计算机网络-谢希仁-1<=>1k7g0p3>--<Java并发编程第一坎<=>bu9klx>--<从头到尾读ArrayList<=>rku8jh>--<自实现ArrayList<=>1gfw5vx>--<Java运算符的阴谋论<=>1pf7qyq>--<关于JVM的运行时数据区<=>rikltc>--<排序大礼包<=>1b0rp9e>--<这，就是Lambda！<=>n0hez3>--<从头到尾读Iterable与Iterator<=>1kakozs>--<从头到尾读Collection<=>faxga5>--<初探Java8之方法引用<=>1bhsyh3>--<初探Java8之lambda<=>nr7s9o>--<对持续集成(CI)的一些理解<=>14k0uek>--<JettyDocument_ZH_CN_Translation_README<=>n8gsoq>--<JettyDocument_ZH_CN_Translation_Part4-23<=>1cei7aq>--<JettyDocument_ZH_CN_Translation_Part4-21<=>18rke1>--<JettyDocument_ZH_CN_Translation_Part3-13<=>cc3kmk>--<JettyDocument_ZH_CN_Translation_Part1<=>17hjlts>--<Cron4jDocument_ZH_CN_Translation<=>1ngl1pm>--<Cron4jDocument_ZH_CN_Translation_README<=>19jo7o1>--<Linux安装MySql<=>spovqu>--<蓝桥杯Java一夜暴富<=>mtg94p>--<CentOS7下安装Pillow并使用osm-bundler生成图点模型<=>1ox3j6i>--<Log4j2_Lookups<=>3zxt7z>--<Log4j2_Filters<=>3fjm8j>--<Log4j2_Layouts<=>yvgzwi>--<我认为的规范的git commit msg<=>a9wle2>--<Electron_打包你的HelloWorld为exe<=>1q1lo3l>--<Electron_一个HelloWorld<=>a08lib>--<Log4j2_Appenders<=>nff3ic>--<Log4j2_HelloWorld<=>en4hhw>--<RegExp_2_metacharacters<=>huiysg>--<RegExp_1_overview<=>1k4djcz>--<5 Useful Tips For A Better Commit Message<=>1h187i6");
