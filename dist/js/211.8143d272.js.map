{"version":3,"file":"js/211.8143d272.js","mappings":"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","sources":["webpack://youyinnn.github.io/./src/views/Gallery.vue","webpack://youyinnn.github.io/../src/lg-events.ts","webpack://youyinnn.github.io/../src/lg-settings.ts","webpack://youyinnn.github.io/../src/lgQuery.ts","webpack://youyinnn.github.io/../src/lg-utils.ts","webpack://youyinnn.github.io/../src/lightgallery.ts","webpack://youyinnn.github.io/../src/index.ts","webpack://youyinnn.github.io/../../../src/plugins/thumbnail/lg-thumbnail-settings.ts","webpack://youyinnn.github.io/../../../src/lg-events.ts","webpack://youyinnn.github.io/../../../src/plugins/thumbnail/lg-thumbnail.ts","webpack://youyinnn.github.io/../../../src/plugins/zoom/lg-zoom-settings.ts","webpack://youyinnn.github.io/../../../src/plugins/zoom/lg-zoom.ts","webpack://youyinnn.github.io/./src/views/Gallery.vue?203c"],"sourcesContent":["<template>\n  <div id=\"gallery\">\n    <a\n      v-for=\"item in content\"\n      :key=\"item.id\"\n      :data-lg-size=\"item.size\"\n      :data-src=\"item.src\"\n    >\n      <img\n        className=\"img-responsive gallery-item\"\n        :src=\"item.src\"\n        :alt=\"item.name\"\n      />\n    </a>\n  </div>\n</template>\n\n<script>\n// eslint-disable-next-line no-unused-vars\nimport lightGallery from \"lightgallery\";\n\n// Plugins\n// eslint-disable-next-line no-unused-vars\nimport lgThumbnail from \"lightgallery/plugins/thumbnail\";\n// eslint-disable-next-line no-unused-vars\nimport lgZoom from \"lightgallery/plugins/zoom\";\n\nimport imgRouter from \"@/plugins/img-router.js\";\n\nimport axios from \"axios\";\n\nexport default {\n  name: \"Gallery\",\n  components: {},\n  data: () => ({\n    content: [],\n  }),\n  mounted: function () {\n    document.title = \"Gallery\";\n    imgRouter.routeElements(document.getElementsByTagName(\"img\"));\n\n    const thiz = this;\n    axios\n      .get(`${process.env.BASE_URL}gallery_list.json`)\n      .then((response) => {\n        thiz.content = response.data;\n      })\n      .then(() => {\n        // lightgallery(document.getElementsByClassName(\"gallery\"));\n        console.log(thiz.content);\n        lightGallery(document.getElementById(\"gallery\"), {\n          plugins: [lgThumbnail, lgZoom],\n          speed: 500,\n          mode: \"lg-fade\",\n          rowHeight: 300,\n          margins: 5,\n        });\n      });\n  },\n  methods: {},\n};\n</script>\n\n<style lang=\"css\" scoped>\n@import \"lightgallery/css/lightgallery.css\";\n@import \"lightgallery/css/lg-thumbnail.css\";\n@import \"lightgallery/css/lg-zoom.css\";\n</style>\n\n<style lang=\"less\" scoped>\n@import \"@/assets/css/variables.less\";\n.gallery {\n  max-width: \"@{page-max-width}px\";\n}\n.gallery-item {\n  width: 300px;\n  padding: 8px;\n}\n</style>\n","import { LightGallery } from './lightgallery';\nimport { VideoSource } from './plugins/video/types';\n\n/**\n * List of lightGallery events\n * All events should be documented here\n * Below interfaces are used to build the website documentations\n * */\nexport const lGEvents: {\n    [key: string]: string;\n} = {\n    afterAppendSlide: 'lgAfterAppendSlide',\n    init: 'lgInit',\n    hasVideo: 'lgHasVideo',\n    containerResize: 'lgContainerResize',\n    updateSlides: 'lgUpdateSlides',\n    afterAppendSubHtml: 'lgAfterAppendSubHtml',\n    beforeOpen: 'lgBeforeOpen',\n    afterOpen: 'lgAfterOpen',\n    slideItemLoad: 'lgSlideItemLoad',\n    beforeSlide: 'lgBeforeSlide',\n    afterSlide: 'lgAfterSlide',\n    posterClick: 'lgPosterClick',\n    dragStart: 'lgDragStart',\n    dragMove: 'lgDragMove',\n    dragEnd: 'lgDragEnd',\n    beforeNextSlide: 'lgBeforeNextSlide',\n    beforePrevSlide: 'lgBeforePrevSlide',\n    beforeClose: 'lgBeforeClose',\n    afterClose: 'lgAfterClose',\n    rotateLeft: 'lgRotateLeft',\n    rotateRight: 'lgRotateRight',\n    flipHorizontal: 'lgFlipHorizontal',\n    flipVertical: 'lgFlipVertical',\n    autoplay: 'lgAutoplay',\n    autoplayStart: 'lgAutoplayStart',\n    autoplayStop: 'lgAutoplayStop',\n};\n\n// Follow the below format for the event documentation\n// @method is the method name when event is used with Angular/React components\n\n/**\n * Fired only once when lightGallery is initialized\n * @name lgInit\n * @method onInit\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action on lightGallery initialization.\n *   // Init event returns the plugin instance that can be used to call any lightGalley public method\n *   let pluginInstance = null;\n *   lg.addEventListener('lgInit', (event) => {\n *      pluginInstance = event.detail.instance;\n *   });\n *   lightGallery(lg);\n * @see <a href=\"/docs/methods\">Methods<a>\n */\nexport interface InitDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired when the slide content has been inserted into it's slide container.\n * @name lgAfterAppendSlide\n * @method onAfterAppendSlide\n */\nexport interface AfterAppendSlideEventDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired immediately before opening the gallery\n * @name lgBeforeOpen\n * @method onBeforeOpen\n */\nexport interface BeforeOpenDetail {}\n\n/**\n * Fired immediately after opening the gallery\n * @name lgAfterOpen\n * @method onAfterOpen\n */\nexport interface AfterOpenDetail {}\n\n/**\n * Fired once the media inside the slide has been completely loaded .\n * @name lgSlideItemLoad\n * @method onSlideItemLoad\n */\nexport interface SlideItemLoadDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * For the first slide, lightGallery adds some delay for displaying the loaded slide item.\n     * This delay is required for the transition effect when the slide item is displayed\n     * Respect the delay when you use this event\n     */\n    delay: number;\n\n    // Will be true for the first slide\n    isFirstSlide: boolean;\n}\n\n/**\n * Fired immediately before each slide transition.\n * @name lgBeforeSlide\n * @method onBeforeSlide\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action before each slide transition\n *   lg.addEventListener('lgBeforeSlide', (event) => {\n *       const { index, prevIndex } = event.detail;\n *       alert(index, prevIndex);\n *   });\n *   lightGallery(lg);\n */\nexport interface BeforeSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired immediately after each slide transition.\n * @name lgAfterSlide\n * @method onAfterSlide\n */\nexport interface AfterSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired when the video poster is clicked.\n * @name lgPosterClick\n * @method onPosterClick\n */\nexport interface PosterClickDetail {}\n\n/**\n * Fired when the drag event to move to different slide starts.\n * @name lgDragStart\n * @method onDragStart\n */\nexport interface DragStartDetail {}\n\n/**\n * Fired periodically during the drag operation.\n * @name lgDragMove\n * @method onDragMove\n */\nexport interface DragMoveDetail {}\n\n/**\n * Fired when the user has finished the drag operation\n * @name lgDragEnd\n * @method onDragEnd\n */\nexport interface DragEndDetail {}\n\n/**\n * Fired immediately before the start of the close process.\n * @name lgBeforeClose\n * @method onBeforeClose\n */\nexport interface BeforeCloseDetail {}\n\n/**\n * Fired immediately once lightGallery is closed.\n * @name lgAfterClose\n * @method onAfterClose\n */\nexport interface AfterCloseDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired immediately before each \"next\" slide transition\n * @name lgBeforeNextSlide\n * @method onBeforeNextSlide\n */\nexport interface BeforeNextSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired immediately before each \"prev\" slide transition\n * @name lgBeforePrevSlide\n * @method onBeforePrevSlide\n */\nexport interface BeforePrevSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired when the sub-html content (ex : title/ description) has been appended into the slide.\n * @name lgAfterAppendSubHtml\n * @method onAfterAppendSubHtml\n */\nexport interface AfterAppendSubHtmlDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the lightGallery container has been resized.\n * @name lgContainerResize\n * @method onContainerResize\n */\nexport interface ContainerResizeDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when lightGallery detects video slide\n * @name lgHasVideo\n * @method onHasVideo\n */\nexport interface HasVideoDetail {\n    /**\n     * Index of the slide,\n     */\n    index: number;\n    /**\n     * Video source\n     */\n    src: string;\n    /**\n     * HTML5 video source if available\n     * <p>\n       HTML5 video source = source: {\n            src: string;\n            type: string;\n        }[];\n        attributes: HTMLVideoElement;\n     * </p>\n     */\n    html5Video: VideoSource;\n    /**\n     * True if video has poster\n     */\n    hasPoster: boolean;\n}\n\n/**\n * Fired when the image is rotated in anticlockwise direction\n * @name lgRotateLeft\n * @method onRotateLeft\n */\nexport interface RotateLeftDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is rotated in clockwise direction\n * @name lgRotateRight\n * @method onRotateRight\n */\nexport interface RotateRightDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is flipped horizontally\n * @name lgFlipHorizontal\n * @method onFlipHorizontal\n */\nexport interface FlipHorizontalDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is flipped vertically\n * @name lgFlipVertical\n * @method onFlipVertical\n */\nexport interface FlipVerticalDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n","import { GalleryItem } from './lg-utils';\nimport { LgQuery } from './lgQuery';\nimport { LightGallery } from './lightgallery';\nimport { AutoplaySettings } from './plugins/autoplay/lg-autoplay-settings';\nimport { CommentSettings } from './plugins/comment/lg-comment-settings';\nimport { FullscreenSettings } from './plugins/fullscreen/lg-fullscreen-settings';\nimport { HashSettings } from './plugins/hash/lg-hash-settings';\nimport { PagerSettings } from './plugins/pager/lg-pager-settings';\nimport { RotateSettings } from './plugins/rotate/lg-rotate-settings';\nimport { ShareSettings } from './plugins/share/lg-share-settings';\nimport { ThumbnailsSettings } from './plugins/thumbnail/lg-thumbnail-settings';\nimport { VideoSettings } from './plugins/video/lg-video-settings';\nimport { ZoomSettings } from './plugins/zoom/lg-zoom-settings';\n\ntype LightGalleryCoreMobileSettings = Exclude<\n    LightGalleryCoreSettings,\n    'mobileSettings'\n>;\n\n// @todo use separate mobile settings for plugins\nexport interface MobileSettings\n    extends LightGalleryCoreMobileSettings,\n        Partial<ZoomSettings>,\n        Partial<ThumbnailsSettings>,\n        Partial<VideoSettings>,\n        Partial<AutoplaySettings>,\n        Partial<CommentSettings>,\n        Partial<FullscreenSettings>,\n        Partial<HashSettings>,\n        Partial<PagerSettings>,\n        Partial<RotateSettings>,\n        Partial<ShareSettings> {}\n\nexport interface LightGalleryCoreStrings {\n    closeGallery: string;\n    toggleMaximize: string;\n    previousSlide: string;\n    nextSlide: string;\n    download: string;\n    playVideo: string;\n    mediaLoadingFailed: string;\n}\n\nexport type LightGalleryAllSettings = LightGalleryCoreSettings &\n    ZoomSettings &\n    ThumbnailsSettings &\n    VideoSettings &\n    AutoplaySettings &\n    CommentSettings &\n    FullscreenSettings &\n    HashSettings &\n    PagerSettings &\n    RotateSettings &\n    ShareSettings;\n\nexport type LightGallerySettings = Partial<LightGalleryAllSettings>;\n\nexport interface LightGalleryCoreSettings {\n    /**\n     * Type of transition between images.\n     */\n    mode:\n        | 'lg-slide'\n        | 'lg-fade'\n        | 'lg-zoom-in'\n        | 'lg-zoom-in-big'\n        | 'lg-zoom-out'\n        | 'lg-zoom-out-big'\n        | 'lg-zoom-out-in'\n        | 'lg-zoom-in-out'\n        | 'lg-soft-zoom'\n        | 'lg-scale-up'\n        | 'lg-slide-circular'\n        | 'lg-slide-circular-vertical'\n        | 'lg-slide-vertical'\n        | 'lg-slide-vertical-growth'\n        | 'lg-slide-skew-only'\n        | 'lg-slide-skew-only-rev'\n        | 'lg-slide-skew-only-y'\n        | 'lg-slide-skew-only-y-rev'\n        | 'lg-slide-skew'\n        | 'lg-slide-skew-rev'\n        | 'lg-slide-skew-cross'\n        | 'lg-slide-skew-cross-rev'\n        | 'lg-slide-skew-ver'\n        | 'lg-slide-skew-ver-rev'\n        | 'lg-slide-skew-ver-cross'\n        | 'lg-slide-skew-ver-cross-rev'\n        | 'lg-lollipop'\n        | 'lg-lollipop-rev'\n        | 'lg-rotate'\n        | 'lg-rotate-rev'\n        | 'lg-tube';\n\n    /**\n     * Slide animation CSS easing property\n     */\n    easing: string;\n\n    /**\n     *Transition duration (in ms).\n     */\n    speed: number;\n\n    /**\n     * If you are using lightGallery for commercial projects, you need to purchase a commercial license\n     * to get the license key. For projects that are compatible with GPLv3 license,\n     * please contact us for getting a license key at <a href=\"mailto:contact@lightgalleryjs.com\">contact@lightgalleryjs.com</a>.\n     * If you want to test lightGallery before purchasing a commercial license, you can\n     * use `0000-0000-000-0000` as a temporary license key\n     */\n\n    licenseKey: string;\n\n    /**\n     * Height of the gallery.\n     * example '100%' , '300px'\n     */\n    height: string;\n\n    /**\n     * Width of the gallery.\n     * example '100%' , '300px'\n     */\n    width: string;\n\n    /**\n     * Add custom class for gallery container\n     * This can be used to set different style for different galleries\n     */\n    addClass: string;\n\n    /**\n     * Start animation class for the gallery.\n     * @description\n     * <ul>\n     * <li>startClass will be empty zoomFromOrigin is true.</li>\n     * <li>This can be used to change the starting effect when the image is loaded</li>\n     * <li>This is also applied when navigating to new slides</li>\n     * </ul>\n     */\n    startClass: string;\n\n    /**\n     * Enable zoom from origin effect.\n     * @description You need to know the original image size upfront and provide it via data-lg-size attribute as <code> data-lg-size=\"1920-1280</code>\"\n     *\n     * If you don't know, the size of a few images in the list, you can skip the data-lg-size attribute for the particular slides,\n     * lightGallery will show the default animation if data-lg-size is not available\n     *\n     * If you are using responsive images,\n     * you can pass a comma separated list of sizes combined with a max-width (up to what size the particular image should be used)\n     *\n     * example -\n     * <code> data-lg-size=\"240-160-375, 400-267-480, 1600-1067\"\n     * data-responsive=\"img-240.jpg 375, img-400.jpg 480\"\n     * data-src=\"img-1600.jpg\" </code>\n     *\n     * In the above example, upto 375 width img.240.jpg and lg-size 240-160 will be used.\n     * Similarly, upto 480 pixel width size 400-267 and img-400.jpg will be used\n     * And above 480, lg-size 1600-1067 and img-1600.jpg will be used\n     *\n     * <ul>\n     * <li>At the moment, zoomFromOrigin options is supported only for image slides.</li>\n     * <li>Will be false if dynamic option is enabled or galleryID found in the URL.</li>\n     * <li>startClass will be empty if zoomFromOrigin is true to avoid css conflicts.</li>\n     * </ul>\n     */\n    zoomFromOrigin: boolean;\n\n    /**\n     * Zoom from image animation duration\n     */\n    startAnimationDuration: number;\n\n    /**\n     * Backdrop transition duration.\n     * Note - Do not change the value of backdrop via css.\n     */\n    backdropDuration: number;\n\n    /**\n     * Configure where the gallery should be appended.\n     * Useful to create inline galleries and more\n     * It is an empty string in the default settings and later assigned to document.body to avoid accessing document for SSR\n     */\n    container: HTMLElement | '';\n\n    /**\n     * Delay for hiding gallery controls in ms.\n     * Pass <code>0</code> if you don't want to hide the controls\n     */\n    hideBarsDelay: number;\n\n    /**\n     * Delay in hiding controls for the first time when gallery is opened\n     */\n    showBarsAfter: number;\n\n    /**\n     * Delay slide transitions.\n     * @description This is useful if you want to do any action in the current slide before moving to next slide.\n     * <section>\n     * For example, fading out the captions before going to next slide.\n     * <code>.lg-slide-progress</code> class name is added to the current slide immediately after calling the slide method.\n     * But transition begins only after the delay\n     * </section>\n     */\n    slideDelay: number;\n\n    /**\n     * Support legacy browsers\n     * @description Currently this is used only for adding support to srcset attribute via picturefill library\n     * If true lightGallery will show warning message to include picturefill library\n     */\n    supportLegacyBrowser: boolean;\n\n    /**\n     * If true, toolbar, captions and thumbnails will not overlap with media element\n     * This will not effect thumbnails if animateThumb is false\n     * Also, toggle thumbnails button is not displayed if allowMediaOverlap is false\n     * <section>\n     * Note - Changing the position of the media on every slide transition creates a flickering effect.\n     * Therefore, the height of the caption is calculated dynamically, only once based on the first slide caption.\n     * </section>\n     * <section>\n     * if you have dynamic captions for each media,\n     * you can provide an appropriate height for the captions via allowMediaOverlap option\n     * </section>\n     */\n    allowMediaOverlap: boolean;\n\n    /**\n     * Video max size.\n     * @description This can be over-written by passing specific size via data-lg-size attribute\n     * Recommended video resolution and & aspect ratios <a href=\"https://support.google.com/youtube/answer/6375112\">https://support.google.com/youtube/answer/6375112</a>\n     */\n    videoMaxSize: string;\n\n    /**\n     * Automatically load poster image for YouTube videos\n     */\n    loadYouTubePoster: boolean;\n\n    /**\n     * Height of the caption for calculating allowMediaOverlap positions\n     * Note - this is only used to find the position of media item if allowMediaOverlap is true.\n     * Not for setting height of the captions\n     * Set 0 if you want to calculate the height of captions dynamically\n     */\n    defaultCaptionHeight: number;\n\n    /**\n     * aria-labelledby attribute fot gallery\n     */\n    ariaLabelledby: string;\n\n    /**\n     * aria-describedby attribute for gallery\n     */\n    ariaDescribedby: string;\n\n    /**\n     * Hide scrollbar when gallery is opened\n     * @version V2.5.0\n     */\n    hideScrollbar: boolean;\n\n    /**\n     * Reset to previous scrollPosition when lightGallery is closed\n     * @description By default, lightGallery doesn't hide the scrollbar for a smooth opening transition.\n     * If a user changes the scroll position, lightGallery resets it to the previous value\n     * @version V2.5.0\n     */\n    resetScrollPosition: boolean;\n\n    /**\n     * If false user won't be abel to close the gallery at all\n     * This is useful for creating inline galleries.\n     */\n    closable: boolean;\n\n    /**\n     * allows vertical drag/swipe to close gallery\n     * <code>false</code> if option <code>closable</code> is <code>false</code>\n     */\n    swipeToClose: boolean;\n    /**\n     * allows clicks on black area to close gallery.\n     */\n    closeOnTap: boolean;\n\n    /**\n     * If false, close button won't be displayed.\n     * Useful for creating inline galleries.\n     */\n    showCloseIcon: boolean;\n\n    /**\n     * Show maximize icon.\n     * Useful for creating inline galleries.\n     */\n    showMaximizeIcon: boolean;\n\n    /**\n     * If false, will disable the ability to loop back to the beginning of the gallery from the last slide.\n     */\n    loop: boolean;\n\n    /**\n     * Whether the LightGallery could be closed by pressing the \"Esc\" key.\n     */\n    escKey: boolean;\n\n    /**\n     * Enable keyboard navigation\n     */\n    keyPress: boolean;\n\n    /**\n     * Trap focus within the lightGallery\n     * @version V2.5.0\n     */\n    trapFocus: boolean;\n\n    /**\n     * If false, prev/next buttons will not be displayed.\n     */\n    controls: boolean;\n\n    /**\n     * Enable slideEnd animation\n     */\n    slideEndAnimation: boolean;\n\n    /**\n     * If true, prev/next button will be hidden on first/last image.\n     * @description Note - this option will be ignored if <code>loop</code> or <code>slideEndAnimation</code> is set to true\n     */\n    hideControlOnEnd: boolean;\n\n    /**\n     * ability to navigate to next/prev slides on mousewheel\n     */\n    mousewheel: boolean;\n\n    /**\n     * Option to get captions from alt or title tags.\n     */\n    getCaptionFromTitleOrAlt: boolean;\n\n    /**\n     * control where the sub-html should be appended.\n     * If you choose '.lg-outer', you are responsible for placing the div at the right position.\n     * '.lg-outer' is useful if you want show custom HTML outside the normal gallery\n     */\n    appendSubHtmlTo: '.lg-sub-html' | '.lg-item' | '.lg-outer';\n\n    /**\n     * Set to true if the selector in \"data-sub-html\" should use the current item as its origin.\n     */\n    subHtmlSelectorRelative: boolean;\n\n    /**\n     * number of preload slides\n     * @description will exicute only after the current slide is fully loaded.\n     * for example, if you click on 4th image and if preload = 1 then 3rd slide and 5th\n     * slide will be loaded in the background after the 4th slide is fully loaded..\n     * if preload is 2 then 2nd 3rd 5th 6th slides will be preloaded.\n     */\n    preload: number;\n\n    /**\n     * Control how many slide items should be kept in dom at a time\n     * @description To improve performance by reducing number of gallery items in the dom,\n     * lightGallery keeps only the lowest possible number of slides in the dom at a time.\n     * This has a minimum value of 3\n     */\n    numberOfSlideItemsInDom: number;\n\n    /**\n     * Custom selector property instead of direct children.\n     * @description Based on your markup structure, you can specify custom selectors to fetch media data for the gallery\n     * Pass \"this\" to select same element\n     * You can also pass HTMLCollection directly\n     * Example - '.my-selector' | '#my-selector' | this | document.querySelectorAll('.my-selector')\n     */\n    selector: string | HTMLCollection[];\n\n    /**\n     * By default selector element relative to the current gallery.\n     * Instead of that you can tell lightGallery to select element relative to another element.\n     * Example - '.my-selector-container' | '#my-selector-container'\n     * In the code this become selector =  document.querySelector(this.s.selectWithin ).querySelectorAll(this.s.selector);\n     */\n    selectWithin: string;\n\n    /**\n     * Custom html for next control\n     */\n    nextHtml: string;\n\n    /**\n     * Custom html for prev control\n     */\n    prevHtml: string;\n\n    /**\n     * specify which slide should load initially\n     */\n    index: number;\n\n    /**\n     * Set width for iframe.\n     */\n    iframeWidth: string;\n\n    /**\n     * Set height for iframe.\n     */\n    iframeHeight: string;\n\n    /**\n     * Set max width for iframe.\n     */\n    iframeMaxWidth: string;\n\n    /**\n     * Set max height for iframe.\n     */\n    iframeMaxHeight: string;\n\n    /**\n     * Enable download button.\n     * @description By default download url will be taken from data-src/href attribute but it supports only for modern browsers.\n     * If you want you can provide another url for download via data-download-url.\n     * pass false in data-download-url if you want to hide download button for the particular slide.\n     */\n    download: boolean;\n\n    /**\n     * Whether to show total number of images and index number of currently displayed image.\n     */\n    counter: boolean;\n\n    /**\n     * Where the counter should be appended\n     */\n    appendCounterTo: string;\n\n    /**\n     * By setting the swipeThreshold (in px) you can set how far the user must swipe for the next/prev image.\n     */\n    swipeThreshold: number;\n\n    /**\n     * Enables swipe support for touch devices\n     */\n    enableSwipe: boolean;\n\n    /**\n     * Enables desktop mouse drag support\n     */\n    enableDrag: boolean;\n\n    /**\n     * LightGallery can be instantiated and launched programmatically by setting this option to true and populating dynamicEl option (see below) with the definitions of images.\n     */\n    dynamic: boolean;\n\n    /**\n     * An array of objects (src, iframe, subHtml, thumb, poster, responsive, srcset sizes) representing gallery elements.\n     */\n    dynamicEl: GalleryItem[];\n\n    /**\n     * Fetch custom properties from the selector\n     * @description this is useful for plugin development\n     * By default lightGallery fetches and store all the props selectors to\n     * reduce frequent dom interaction for fetching props every time.\n     *\n     * If you need any addition data to be fetched and stored in the galleryItems variable,\n     * you can do this just by passing the prop names via extraProps\n     * @example\n     * HTML:\n     * <div id=\"lightGallery\">\n     *     <a href=\"a.jpg\" data-custom-prop=\"abc\"><img src=\"thumb.jpg\" /></a>\n     *     <a href=\"a.jpg\" data-custom-prop=\"xyz\"><img src=\"thumb.jpg\" /></a>\n     * </div>\n     * JS:\n     * lightGallery(document.getElementById('lightGallery'), {\n     *     extraProps: ['customProp']\n     * })\n     * // Note - If you are using dynamic mode, you can pass any custom prop in the galleryItem\n     * lightGallery(document.getElementById('lightGallery'), {\n     *     dynamic: true,\n     *     dynamicEl: [{\n     *         src: 'img/img1.jpg',\n     *         customProp:'abc',\n     *     }]\n     * })\n     *\n     */\n    extraProps: string[];\n\n    /**\n     * Option to fetch different thumbnail image other than first image\n     * @description If you want to use external image for thumbnail,\n     * add the path of that image inside \"data-\" attribute\n     * and set value of this option to the name of your custom attribute.\n     *\n     * @example\n     * <div id=\"lightGallery\">\n     *     <a href=\"a.jpg\" data-external-thumb-image=\"images/externalThumb.jpg\" ><img src=\"thumb.jpg\" /></a>\n     * </div>\n     *\n     * lightGallery(document.getElementById('lightGallery'), {\n     *     exThumbImage: 'data-external-thumb-image'\n     * })\n     */\n    exThumbImage: string;\n\n    /**\n     * Function to detect mobile devices\n     */\n    isMobile?: () => boolean;\n\n    /**\n     * Separate settings for mobile devices\n     * @description Note - this is applied only at the time of loading\n     * by default controls and close buttons are disabled on mobile devices.\n     * use this options if you want to enable them or change any other settings for mobile devices\n     * Note - mobileSettings does not merge default values, You need to provide all mobileSettings including default values\n     */\n    mobileSettings: Partial<MobileSettings>;\n\n    /**\n     * Customize string.\n     * @description This can be useful if you want to localize the lightGallery strings to other languages.\n     * Use your own service to translate the strings and pass it via settings.strings\n     * You can find dedicated strings option for all lightGallery modules in their respective documentation.\n     * Note - You need to provide values for all the strings. For example, even if you just want to change the closeGallery string, you need to provide all the other strings as well.\n     */\n    strings: LightGalleryCoreStrings;\n\n    plugins: (new (instance: LightGallery, $LG: LgQuery) => any)[];\n}\n\nexport const lightGalleryCoreSettings: LightGalleryCoreSettings = {\n    mode: 'lg-slide',\n    easing: 'ease',\n    speed: 400,\n    licenseKey: '0000-0000-000-0000',\n    height: '100%',\n    width: '100%',\n    addClass: '',\n    startClass: 'lg-start-zoom',\n    backdropDuration: 300,\n    container: '',\n    startAnimationDuration: 400,\n    zoomFromOrigin: true,\n    hideBarsDelay: 0,\n    showBarsAfter: 10000,\n    slideDelay: 0,\n    supportLegacyBrowser: true,\n    allowMediaOverlap: false,\n    videoMaxSize: '1280-720',\n    loadYouTubePoster: true,\n    defaultCaptionHeight: 0,\n    ariaLabelledby: '',\n    ariaDescribedby: '',\n    resetScrollPosition: true,\n    hideScrollbar: false,\n    closable: true,\n    swipeToClose: true,\n    closeOnTap: true,\n    showCloseIcon: true,\n    showMaximizeIcon: false,\n    loop: true,\n    escKey: true,\n    keyPress: true,\n    trapFocus: true,\n    controls: true,\n    slideEndAnimation: true,\n    hideControlOnEnd: false,\n    mousewheel: false,\n    getCaptionFromTitleOrAlt: true,\n    appendSubHtmlTo: '.lg-sub-html',\n    subHtmlSelectorRelative: false,\n    preload: 2,\n    numberOfSlideItemsInDom: 10,\n    selector: '',\n    selectWithin: '',\n    nextHtml: '',\n    prevHtml: '',\n    index: 0,\n    iframeWidth: '100%',\n    iframeHeight: '100%',\n    iframeMaxWidth: '100%',\n    iframeMaxHeight: '100%',\n    download: true,\n    counter: true,\n    appendCounterTo: '.lg-toolbar',\n    swipeThreshold: 50,\n    enableSwipe: true,\n    enableDrag: true,\n    dynamic: false,\n    dynamicEl: [],\n    extraProps: [],\n    exThumbImage: '',\n    isMobile: undefined,\n    mobileSettings: {\n        controls: false,\n        showCloseIcon: false,\n        download: false,\n    } as MobileSettings,\n    plugins: [],\n    strings: {\n        closeGallery: 'Close gallery',\n        toggleMaximize: 'Toggle maximize',\n        previousSlide: 'Previous slide',\n        nextSlide: 'Next slide',\n        download: 'Download',\n        playVideo: 'Play video',\n        mediaLoadingFailed: 'Oops... Failed to load content...',\n    } as LightGalleryCoreStrings,\n};\n","interface Offset {\n    left: number;\n    top: number;\n}\n\nfunction initLgPolyfills() {\n    (function () {\n        if (typeof window.CustomEvent === 'function') return false;\n\n        function CustomEvent(event: string, params: any) {\n            params = params || {\n                bubbles: false,\n                cancelable: false,\n                detail: null,\n            };\n            const evt = document.createEvent('CustomEvent');\n            evt.initCustomEvent(\n                event,\n                params.bubbles,\n                params.cancelable,\n                params.detail,\n            );\n            return evt;\n        }\n\n        window.CustomEvent = CustomEvent as any;\n    })();\n    (function () {\n        if (!Element.prototype.matches) {\n            Element.prototype.matches =\n                (Element.prototype as any).msMatchesSelector ||\n                Element.prototype.webkitMatchesSelector;\n        }\n    })();\n}\n\nexport type LgQuery = (selector: any) => lgQuery;\nexport class lgQuery {\n    static eventListeners: { [key: string]: any[] } = {};\n    static generateUUID(): string {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(\n            /[xy]/g,\n            function (c) {\n                const r = (Math.random() * 16) | 0,\n                    v = c == 'x' ? r : (r & 0x3) | 0x8;\n                return v.toString(16);\n            },\n        );\n    }\n\n    private selector: any;\n    private firstElement: any;\n    private cssVenderPrefixes: string[] = [\n        'TransitionDuration',\n        'TransitionTimingFunction',\n        'Transform',\n        'Transition',\n    ];\n    constructor(selector: string | Element) {\n        this.selector = this._getSelector(selector);\n        this.firstElement = this._getFirstEl();\n        return this;\n    }\n\n    private _getSelector(\n        selector: string | Element,\n        context: Element | Document = document,\n    ): Element | null | NodeListOf<Element> {\n        if (typeof selector !== 'string') {\n            return selector;\n        }\n        context = context || document;\n        const fl = selector.substring(0, 1);\n        if (fl === '#') {\n            return context.querySelector(selector);\n        } else {\n            return context.querySelectorAll(selector);\n        }\n    }\n\n    private _each(\n        func: (\n            elements: Element | NodeListOf<Element> | null,\n            index: number,\n        ) => void,\n    ): this {\n        if (!this.selector) {\n            return this;\n        }\n        if (this.selector.length !== undefined) {\n            [].forEach.call(this.selector, func);\n        } else {\n            func(this.selector, 0);\n        }\n        return this;\n    }\n\n    private _setCssVendorPrefix(\n        el: any,\n        cssProperty: string,\n        value?: string | number,\n    ): void {\n        // prettier-ignore\n        const property = cssProperty.replace(/-([a-z])/gi, function (\n            s,\n            group1,\n        ) {\n            return group1.toUpperCase();\n        });\n        if (this.cssVenderPrefixes.indexOf(property) !== -1) {\n            el.style[\n                property.charAt(0).toLowerCase() + property.slice(1)\n            ] = value;\n            el.style['webkit' + property] = value;\n            el.style['moz' + property] = value;\n            el.style['ms' + property] = value;\n            el.style['o' + property] = value;\n        } else {\n            el.style[property] = value;\n        }\n    }\n\n    private _getFirstEl() {\n        if (this.selector && this.selector.length !== undefined) {\n            return this.selector[0];\n        } else {\n            return this.selector;\n        }\n    }\n\n    private isEventMatched(event: string, eventName: string): boolean {\n        const eventNamespace = eventName.split('.');\n        return event\n            .split('.')\n            .filter((e) => e)\n            .every((e) => {\n                return eventNamespace.indexOf(e) !== -1;\n            });\n    }\n\n    attr(attr: string): string;\n    attr(attr: string, value: string | number | boolean): this;\n    attr(attr: string, value?: string | number | boolean): string | this {\n        if (value === undefined) {\n            if (!this.firstElement) {\n                return '';\n            }\n            return this.firstElement.getAttribute(attr);\n        }\n        this._each((el: any) => {\n            el.setAttribute(attr, value);\n        });\n        return this;\n    }\n\n    find(selector: any): lgQuery {\n        return $LG(this._getSelector(selector, this.selector));\n    }\n\n    first(): lgQuery {\n        if (this.selector && this.selector.length !== undefined) {\n            return $LG(this.selector[0]);\n        } else {\n            return $LG(this.selector);\n        }\n    }\n\n    eq(index: number): lgQuery {\n        return $LG(this.selector[index]);\n    }\n\n    parent(): lgQuery {\n        return $LG(this.selector.parentElement);\n    }\n\n    get(): HTMLElement {\n        return this._getFirstEl();\n    }\n\n    removeAttr(attributes: string): this {\n        const attrs = attributes.split(' ');\n        this._each((el: any) => {\n            attrs.forEach((attr: string) => el.removeAttribute(attr));\n        });\n        return this;\n    }\n\n    wrap(className: string): this {\n        if (!this.firstElement) {\n            return this;\n        }\n        const wrapper = document.createElement('div');\n        wrapper.className = className;\n        this.firstElement.parentNode.insertBefore(wrapper, this.firstElement);\n        this.firstElement.parentNode.removeChild(this.firstElement);\n        wrapper.appendChild(this.firstElement);\n        return this;\n    }\n\n    addClass(classNames = ''): this {\n        this._each((el: any) => {\n            // IE doesn't support multiple arguments\n            classNames.split(' ').forEach((className) => {\n                if (className) {\n                    el.classList.add(className);\n                }\n            });\n        });\n        return this;\n    }\n\n    removeClass(classNames: string): this {\n        this._each((el: any) => {\n            // IE doesn't support multiple arguments\n            classNames.split(' ').forEach((className) => {\n                if (className) {\n                    el.classList.remove(className);\n                }\n            });\n        });\n        return this;\n    }\n\n    hasClass(className: string): boolean {\n        if (!this.firstElement) {\n            return false;\n        }\n        return this.firstElement.classList.contains(className);\n    }\n    hasAttribute(attribute: string): boolean {\n        if (!this.firstElement) {\n            return false;\n        }\n        return this.firstElement.hasAttribute(attribute);\n    }\n    toggleClass(className: string): this {\n        if (!this.firstElement) {\n            return this;\n        }\n        if (this.hasClass(className)) {\n            this.removeClass(className);\n        } else {\n            this.addClass(className);\n        }\n        return this;\n    }\n\n    css(property: string, value?: string | number): this {\n        this._each((el: any) => {\n            this._setCssVendorPrefix(el, property, value);\n        });\n        return this;\n    }\n    // Need to pass separate namespaces for separate elements\n    on(events: string, listener: (e: any) => void): this {\n        if (!this.selector) {\n            return this;\n        }\n        events.split(' ').forEach((event: string) => {\n            if (!Array.isArray(lgQuery.eventListeners[event])) {\n                lgQuery.eventListeners[event] = [];\n            }\n            lgQuery.eventListeners[event].push(listener);\n            this.selector.addEventListener(event.split('.')[0], listener);\n        });\n\n        return this;\n    }\n    // @todo - test this\n    once(event: string, listener: (e: any) => void): this {\n        this.on(event, () => {\n            this.off(event);\n            listener(event);\n        });\n        return this;\n    }\n    off(event: string): this {\n        if (!this.selector) {\n            return this;\n        }\n        Object.keys(lgQuery.eventListeners).forEach((eventName) => {\n            if (this.isEventMatched(event, eventName)) {\n                lgQuery.eventListeners[eventName].forEach((listener) => {\n                    this.selector.removeEventListener(\n                        eventName.split('.')[0],\n                        listener,\n                    );\n                });\n                lgQuery.eventListeners[eventName] = [];\n            }\n        });\n\n        return this;\n    }\n    trigger<Detail>(event: string, detail?: Detail): this {\n        if (!this.firstElement) {\n            return this;\n        }\n\n        const customEvent = new CustomEvent(event.split('.')[0], {\n            detail: detail || null,\n        });\n        this.firstElement.dispatchEvent(customEvent);\n        return this;\n    }\n\n    // Does not support IE\n    load(url: string): this {\n        fetch(url)\n            .then((res) => res.text())\n            .then((html) => {\n                this.selector.innerHTML = html;\n            });\n        return this;\n    }\n\n    html(): string;\n    html(html: string): this;\n    html(html?: string): string | this {\n        if (html === undefined) {\n            if (!this.firstElement) {\n                return '';\n            }\n            return this.firstElement.innerHTML;\n        }\n        this._each((el: any) => {\n            el.innerHTML = html;\n        });\n        return this;\n    }\n    append(html: string | HTMLElement): this {\n        this._each((el: any) => {\n            if (typeof html === 'string') {\n                el.insertAdjacentHTML('beforeend', html);\n            } else {\n                el.appendChild(html);\n            }\n        });\n        return this;\n    }\n    prepend(html: string): this {\n        this._each((el: any) => {\n            el.insertAdjacentHTML('afterbegin', html);\n        });\n        return this;\n    }\n    remove(): this {\n        this._each((el: any) => {\n            el.parentNode.removeChild(el);\n        });\n        return this;\n    }\n    empty(): this {\n        this._each((el: any) => {\n            el.innerHTML = '';\n        });\n        return this;\n    }\n    // Supports only window\n    scrollTop(): number;\n    scrollTop(scrollTop: number): this;\n    scrollTop(scrollTop?: number): number | this {\n        if (scrollTop !== undefined) {\n            document.body.scrollTop = scrollTop;\n            document.documentElement.scrollTop = scrollTop;\n            return this;\n        } else {\n            return (\n                window.pageYOffset ||\n                document.documentElement.scrollTop ||\n                document.body.scrollTop ||\n                0\n            );\n        }\n    }\n    // Supports only window\n    scrollLeft(): number;\n    scrollLeft(scrollLeft?: number): this;\n    scrollLeft(scrollLeft?: number): number | this {\n        if (scrollLeft !== undefined) {\n            document.body.scrollLeft = scrollLeft;\n            document.documentElement.scrollLeft = scrollLeft;\n            return this;\n        } else {\n            return (\n                window.pageXOffset ||\n                document.documentElement.scrollLeft ||\n                document.body.scrollLeft ||\n                0\n            );\n        }\n    }\n    offset(): Offset {\n        if (!this.firstElement) {\n            return {\n                left: 0,\n                top: 0,\n            };\n        }\n        const rect = this.firstElement.getBoundingClientRect();\n        const bodyMarginLeft = $LG('body').style().marginLeft;\n\n        // Minus body margin - https://stackoverflow.com/questions/30711548/is-getboundingclientrect-left-returning-a-wrong-value\n        return {\n            left: rect.left - parseFloat(bodyMarginLeft) + this.scrollLeft(),\n            top: rect.top + this.scrollTop(),\n        };\n    }\n    style(): CSSStyleDeclaration {\n        if (!this.firstElement) {\n            return {} as CSSStyleDeclaration;\n        }\n        return (\n            this.firstElement.currentStyle ||\n            window.getComputedStyle(this.firstElement)\n        );\n    }\n    // Width without padding and border even if box-sizing is used.\n    width(): number {\n        const style = this.style();\n        return (\n            this.firstElement.clientWidth -\n            parseFloat(style.paddingLeft) -\n            parseFloat(style.paddingRight)\n        );\n    }\n    // Height without padding and border even if box-sizing is used.\n    height(): number {\n        const style = this.style();\n        return (\n            this.firstElement.clientHeight -\n            parseFloat(style.paddingTop) -\n            parseFloat(style.paddingBottom)\n        );\n    }\n}\n\nexport function $LG(selector: any): lgQuery {\n    initLgPolyfills();\n    return new lgQuery(selector);\n}\n","import { $LG, lgQuery } from './lgQuery';\nimport { VideoSource } from './plugins/video/types';\nimport { VideoInfo } from './types';\n\nexport interface ImageSize {\n    width: number;\n    height: number;\n}\n\nexport interface ImageSources {\n    media?: string;\n    srcset: string;\n    sizes?: string;\n    type?: string;\n}\n\nexport interface GalleryItem {\n    /**\n     * url of the media\n     * @data-attr data-src\n     */\n    src?: string;\n\n    /**\n     * Source attributes for the <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/source#attributes\">picture</a> element\n     * @data-attr data-sources\n     */\n    sources?: ImageSources[];\n\n    /**\n     * Thumbnail url\n     * @description By default lightGallery uses the image inside gallery selector as thumbnail.\n     * But, If you want to use external image for thumbnail,\n     * pass the thumbnail url via any data attribute and\n     * pass the attribute name via exThumbImage option\n     * @example\n     * <div id=\"lightGallery\">\n     *     <a href=\"a.jpg\" data-external-thumb-image=\"images/externalThumb.jpg\" ><img src=\"thumb.jpg\" /></a>\n     * </div>\n     *\n     * lightGallery(document.getElementById('lightGallery'), {\n     *     exThumbImage: 'data-external-thumb-image'\n     * })\n     * @data-attr data-*\n     */\n    thumb?: string;\n\n    /**\n     * alt attribute for the image\n     * @data-attr alt\n     */\n    alt?: string;\n\n    /**\n     * Title attribute for the video\n     * @data-attr title\n     */\n    title?: string;\n\n    /**\n     * Title for iframe\n     * @data-attr data-iframe-title\n     */\n    iframeTitle?: string;\n\n    /**\n     * Caption for the slide\n     * @description You can either pass the HTML markup or the ID or class name of the element which contains the captions\n     * @data-attr data-sub-html\n     */\n    subHtml?: string;\n\n    /**\n     * url of the file which contain the sub html.\n     * @description Note - Does not support Internet Explorer browser\n     * @data-attr data-sub-html-url\n     */\n    subHtmlUrl?: string;\n\n    /**\n     * Video source\n     * @data-attr data-video\n     */\n    video?: VideoSource;\n\n    /**\n     * Poster url\n     * @data-attr data-poster\n     */\n    poster?: string;\n\n    /**\n     * Custom slide name to use in the url when hash plugin is enabled\n     * @data-attr data-slide-name\n     */\n    slideName?: string;\n\n    /**\n     * List of images and viewport's max width separated by comma.\n     * @description Ex?: img/1-375.jpg 375, img/1-480.jpg 480, img/1-757.jpg 757.\n     * @data-attr data-responsive\n     */\n    responsive?: string;\n\n    /**\n     * srcset attribute values for the main image\n     * @data-attr data-srcset\n     */\n    srcset?: string;\n\n    /**\n     * srcset sizes attribute for the main image\n     * @data-attr data-sizes\n     */\n    sizes?: string;\n\n    /**\n     * Set true is you want to open your url in an iframe\n     * @data-attr data-iframe\n     */\n    iframe?: boolean;\n\n    /**\n     * Download url for your image/video.\n     * @description Pass false if you want to disable the download button.\n     * @data-attr data-download-url\n     */\n    downloadUrl?: string | boolean;\n\n    /**\n     * Name of the file after it is downloaded.\n     * @description The HTML value of the download attribute.\n     * There are no restrictions on allowed values, and the browser will automatically\n     * detect the correct file extension and add it to the file (.img, .pdf, .txt, .html, etc.).\n     * <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a#attr-download\">More info</a>\n     * @data-attr data-download\n     */\n    download?: string | boolean;\n\n    /**\n     * Actual size of the image in px.\n     * @description This is used in zoom plugin to see the actual size of the image when double taped on the image.\n     * @data-attr data-width\n     */\n    width?: string;\n\n    /**\n     * Facebook share URL.\n     * @description Specify only if you want to provide separate share URL for the specific slide. By default, current browser URL is taken.\n     * @data-attr data-facebook-share-url\n     */\n    facebookShareUrl?: string;\n\n    /**\n     * Tweet text\n     * @data-attr data-tweet-text\n     */\n    tweetText?: string;\n\n    /**\n     * Twitter share URL.\n     * @description Specify only if you want to provide separate share URL for the specific slide. By default, current browser URL will be taken.\n     * @data-attr data-twitter-share-url\n     */\n    twitterShareUrl?: string;\n\n    /**\n     * Pinterest share URL.\n     * @description Specify only if you want to provide separate share URL for the specific slide. By default, current browser URL will be taken.\n     * Note?: Pinterest requires absolute URL\n     * @data-attr data-pinterest-share-url\n     */\n    pinterestShareUrl?: string;\n\n    /**\n     * Description for Pinterest post.\n     * @data-attr data-pinterest-text\n     */\n    pinterestText?: string;\n\n    /**\n     * Facebook comments body html\n     * @description Please refer <a href=\"https://developers.facebook.com/docs/plugins/comments/#comments-plugin\">facebook official documentation</a> for generating the HTML markup\n     * @example\n     * <div\n     *      class=\"fb-comments\"\n     *      data-href=\"https://www.lightgalleryjs.com/demos/comment-box/#facebook-comments-demo\"\n     *      data-width=\"400\"\n     *      data-numposts=\"5\">\n     * </div>\n     * @data-attr data-fb-html\n     */\n    fbHtml?: string;\n\n    /**\n     * Disqus page identifier\n     * @description Please refer official <a href=\"https://help.disqus.com/en/articles/1717084-javascript-configuration-variables\">disqus documentation</a> for more info\n     * @data-attr data-disqus-identifier\n     */\n    disqusIdentifier?: string;\n\n    /**\n     * Disqus page url\n     * @description Please refer official <a href=\"https://help.disqus.com/en/articles/1717084-javascript-configuration-variables\">disqus documentation</a> for more info\n     * @data-attr data-disqus-url\n     */\n    disqusUrl?: string;\n\n    __slideVideoInfo?: VideoInfo;\n    [key: string]: any;\n}\n\nconst defaultDynamicOptions = [\n    'src',\n    'sources',\n    'subHtml',\n    'subHtmlUrl',\n    'html',\n    'video',\n    'poster',\n    'slideName',\n    'responsive',\n    'srcset',\n    'sizes',\n    'iframe',\n    'downloadUrl',\n    'download',\n    'width',\n    'facebookShareUrl',\n    'tweetText',\n    'iframeTitle',\n    'twitterShareUrl',\n    'pinterestShareUrl',\n    'pinterestText',\n    'fbHtml',\n    'disqusIdentifier',\n    'disqusUrl',\n];\n\n// Convert html data-attribute to camalcase\nexport function convertToData(attr: string): string {\n    // FInd a way for lgsize\n    if (attr === 'href') {\n        return 'src';\n    }\n    attr = attr.replace('data-', '');\n    attr = attr.charAt(0).toLowerCase() + attr.slice(1);\n    attr = attr.replace(/-([a-z])/g, (g) => g[1].toUpperCase());\n\n    return attr;\n}\n\nconst utils = {\n    /**\n     * get possible width and height from the lgSize attribute. Used for ZoomFromOrigin option\n     */\n    getSize(\n        el: HTMLElement,\n        container: lgQuery,\n        spacing = 0,\n        defaultLgSize?: string,\n    ): ImageSize | undefined {\n        const LGel = $LG(el);\n        let lgSize = LGel.attr('data-lg-size') || defaultLgSize;\n\n        if (!lgSize) {\n            return;\n        }\n\n        const isResponsiveSizes = lgSize.split(',');\n        // if at-least two viewport sizes are available\n        if (isResponsiveSizes[1]) {\n            const wWidth = window.innerWidth;\n            for (let i = 0; i < isResponsiveSizes.length; i++) {\n                const size = isResponsiveSizes[i];\n                const responsiveWidth = parseInt(size.split('-')[2], 10);\n                if (responsiveWidth > wWidth) {\n                    lgSize = size;\n                    break;\n                }\n\n                // take last item as last option\n                if (i === isResponsiveSizes.length - 1) {\n                    lgSize = size;\n                }\n            }\n        }\n\n        const size = lgSize.split('-');\n\n        const width = parseInt(size[0], 10);\n        const height = parseInt(size[1], 10);\n\n        const cWidth = container.width();\n        const cHeight = container.height() - spacing;\n\n        const maxWidth = Math.min(cWidth, width);\n        const maxHeight = Math.min(cHeight, height);\n\n        const ratio = Math.min(maxWidth / width, maxHeight / height);\n\n        return { width: width * ratio, height: height * ratio };\n    },\n\n    /**\n     * @desc Get transform value based on the imageSize. Used for ZoomFromOrigin option\n     * @param {jQuery Element}\n     * @returns {String} Transform CSS string\n     */\n    getTransform(\n        el: HTMLElement,\n        container: lgQuery,\n        top: number,\n        bottom: number,\n        imageSize?: ImageSize,\n    ): string | undefined {\n        if (!imageSize) {\n            return;\n        }\n        const LGel = $LG(el).find('img').first();\n        if (!LGel.get()) {\n            return;\n        }\n\n        const containerRect = container.get().getBoundingClientRect();\n\n        const wWidth = containerRect.width;\n\n        // using innerWidth to include mobile safari bottom bar\n        const wHeight = container.height() - (top + bottom);\n\n        const elWidth = LGel.width();\n        const elHeight = LGel.height();\n\n        const elStyle = LGel.style();\n        let x =\n            (wWidth - elWidth) / 2 -\n            LGel.offset().left +\n            (parseFloat(elStyle.paddingLeft) || 0) +\n            (parseFloat(elStyle.borderLeft) || 0) +\n            $LG(window).scrollLeft() +\n            containerRect.left;\n        let y =\n            (wHeight - elHeight) / 2 -\n            LGel.offset().top +\n            (parseFloat(elStyle.paddingTop) || 0) +\n            (parseFloat(elStyle.borderTop) || 0) +\n            $LG(window).scrollTop() +\n            top;\n\n        const scX = elWidth / imageSize.width;\n        const scY = elHeight / imageSize.height;\n\n        const transform =\n            'translate3d(' +\n            (x *= -1) +\n            'px, ' +\n            (y *= -1) +\n            'px, 0) scale3d(' +\n            scX +\n            ', ' +\n            scY +\n            ', 1)';\n        return transform;\n    },\n\n    getIframeMarkup(\n        iframeWidth: string,\n        iframeHeight: string,\n        iframeMaxWidth: string,\n        iframeMaxHeight: string,\n        src?: string,\n        iframeTitle?: string,\n    ): string {\n        const title = iframeTitle ? 'title=\"' + iframeTitle + '\"' : '';\n        return `<div class=\"lg-video-cont lg-has-iframe\" style=\"width:${iframeWidth}; max-width:${iframeMaxWidth}; height: ${iframeHeight}; max-height:${iframeMaxHeight}\">\n                    <iframe class=\"lg-object\" frameborder=\"0\" ${title} src=\"${src}\"  allowfullscreen=\"true\"></iframe>\n                </div>`;\n    },\n\n    getImgMarkup(\n        index: number,\n        src: string,\n        altAttr: string,\n        srcset?: string,\n        sizes?: string,\n        sources?: ImageSources[],\n    ): string {\n        const srcsetAttr = srcset ? `srcset=\"${srcset}\"` : '';\n        const sizesAttr = sizes ? `sizes=\"${sizes}\"` : '';\n        const imgMarkup = `<img ${altAttr} ${srcsetAttr}  ${sizesAttr} class=\"lg-object lg-image\" data-index=\"${index}\" src=\"${src}\" />`;\n        let sourceTag = '';\n        if (sources) {\n            const sourceObj =\n                typeof sources === 'string' ? JSON.parse(sources) : sources;\n\n            sourceTag = sourceObj.map((source: any) => {\n                let attrs = '';\n                Object.keys(source).forEach((key) => {\n                    // Do not remove the first space as it is required to separate the attributes\n                    attrs += ` ${key}=\"${source[key]}\"`;\n                });\n                return `<source ${attrs}></source>`;\n            });\n        }\n        return `${sourceTag}${imgMarkup}`;\n    },\n\n    // Get src from responsive src\n    getResponsiveSrc(srcItms: string[]): string {\n        const rsWidth = [];\n        const rsSrc = [];\n        let src = '';\n        for (let i = 0; i < srcItms.length; i++) {\n            const _src = srcItms[i].split(' ');\n\n            // Manage empty space\n            if (_src[0] === '') {\n                _src.splice(0, 1);\n            }\n\n            rsSrc.push(_src[0]);\n            rsWidth.push(_src[1]);\n        }\n\n        const wWidth = window.innerWidth;\n        for (let j = 0; j < rsWidth.length; j++) {\n            if (parseInt(rsWidth[j], 10) > wWidth) {\n                src = rsSrc[j];\n                break;\n            }\n        }\n        return src;\n    },\n\n    isImageLoaded(img: HTMLImageElement): boolean {\n        if (!img) return false;\n        // During the onload event, IE correctly identifies any images that\n        // weren’t downloaded as not complete. Others should too. Gecko-based\n        // browsers act like NS4 in that they report this incorrectly.\n        if (!img.complete) {\n            return false;\n        }\n\n        // However, they do have two very useful properties: naturalWidth and\n        // naturalHeight. These give the true size of the image. If it failed\n        // to load, either of these should be zero.\n        if (img.naturalWidth === 0) {\n            return false;\n        }\n\n        // No other way of checking: assume it’s ok.\n        return true;\n    },\n\n    getVideoPosterMarkup(\n        _poster: string,\n        dummyImg: string,\n        videoContStyle: string,\n        playVideoString: string,\n        _isVideo?: VideoInfo,\n    ): string {\n        let videoClass = '';\n        if (_isVideo && _isVideo.youtube) {\n            videoClass = 'lg-has-youtube';\n        } else if (_isVideo && _isVideo.vimeo) {\n            videoClass = 'lg-has-vimeo';\n        } else {\n            videoClass = 'lg-has-html5';\n        }\n\n        return `<div class=\"lg-video-cont ${videoClass}\" style=\"${videoContStyle}\">\n                <div class=\"lg-video-play-button\">\n                <svg\n                    viewBox=\"0 0 20 20\"\n                    preserveAspectRatio=\"xMidYMid\"\n                    focusable=\"false\"\n                    aria-labelledby=\"${playVideoString}\"\n                    role=\"img\"\n                    class=\"lg-video-play-icon\"\n                >\n                    <title>${playVideoString}</title>\n                    <polygon class=\"lg-video-play-icon-inner\" points=\"1,0 20,10 1,20\"></polygon>\n                </svg>\n                <svg class=\"lg-video-play-icon-bg\" viewBox=\"0 0 50 50\" focusable=\"false\">\n                    <circle cx=\"50%\" cy=\"50%\" r=\"20\"></circle></svg>\n                <svg class=\"lg-video-play-icon-circle\" viewBox=\"0 0 50 50\" focusable=\"false\">\n                    <circle cx=\"50%\" cy=\"50%\" r=\"20\"></circle>\n                </svg>\n            </div>\n            ${dummyImg || ''}\n            <img class=\"lg-object lg-video-poster\" src=\"${_poster}\" />\n        </div>`;\n    },\n\n    getFocusableElements(container: HTMLElement): NodeListOf<Element> {\n        const elements = container.querySelectorAll(\n            'a[href]:not([disabled]), button:not([disabled]), textarea:not([disabled]), input[type=\"text\"]:not([disabled]), input[type=\"radio\"]:not([disabled]), input[type=\"checkbox\"]:not([disabled]), select:not([disabled])',\n        );\n        const visibleElements = [].filter.call(elements, (element) => {\n            const style = window.getComputedStyle(element);\n            return style.display !== 'none' && style.visibility !== 'hidden';\n        });\n        return (visibleElements as unknown) as NodeListOf<Element>;\n    },\n\n    /**\n     * @desc Create dynamic elements array from gallery items when dynamic option is false\n     * It helps to avoid frequent DOM interaction\n     * and avoid multiple checks for dynamic elments\n     *\n     * @returns {Array} dynamicEl\n     */\n    getDynamicOptions(\n        items: any,\n        extraProps: string[],\n        getCaptionFromTitleOrAlt: boolean,\n        exThumbImage: string,\n    ): GalleryItem[] {\n        const dynamicElements: GalleryItem[] = [];\n        const availableDynamicOptions = [\n            ...defaultDynamicOptions,\n            ...extraProps,\n        ];\n        [].forEach.call(items, (item: HTMLElement) => {\n            const dynamicEl: GalleryItem = {} as GalleryItem;\n            for (let i = 0; i < item.attributes.length; i++) {\n                const attr = item.attributes[i];\n                if (attr.specified) {\n                    const dynamicAttr = convertToData(attr.name);\n                    let label = '';\n                    if (availableDynamicOptions.indexOf(dynamicAttr) > -1) {\n                        label = dynamicAttr;\n                    }\n                    if (label) {\n                        (dynamicEl as any)[label] = attr.value;\n                    }\n                }\n            }\n            const currentItem = $LG(item);\n            const alt = currentItem.find('img').first().attr('alt');\n            const title = currentItem.attr('title');\n\n            const thumb = exThumbImage\n                ? currentItem.attr(exThumbImage)\n                : currentItem.find('img').first().attr('src');\n            dynamicEl.thumb = thumb;\n\n            if (getCaptionFromTitleOrAlt && !dynamicEl.subHtml) {\n                dynamicEl.subHtml = title || alt || '';\n            }\n            dynamicEl.alt = alt || title || '';\n            dynamicElements.push(dynamicEl);\n        });\n        return dynamicElements;\n    },\n    isMobile(): boolean {\n        return /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n    },\n    /**\n     * @desc Check the given src is video\n     * @param {String} src\n     * @return {Object} video type\n     * Ex:{ youtube  :  [\"//www.youtube.com/watch?v=c0asJgSyxcY\", \"c0asJgSyxcY\"] }\n     *\n     * @todo - this information can be moved to dynamicEl to avoid frequent calls\n     */\n\n    isVideo(\n        src: string,\n        isHTML5VIdeo: boolean,\n        index: number,\n    ): VideoInfo | undefined {\n        if (!src) {\n            if (isHTML5VIdeo) {\n                return {\n                    html5: true,\n                };\n            } else {\n                console.error(\n                    'lightGallery :- data-src is not provided on slide item ' +\n                        (index + 1) +\n                        '. Please make sure the selector property is properly configured. More info - https://www.lightgalleryjs.com/demos/html-markup/',\n                );\n                return;\n            }\n        }\n\n        const youtube = src.match(\n            /\\/\\/(?:www\\.)?youtu(?:\\.be|be\\.com|be-nocookie\\.com)\\/(?:watch\\?v=|embed\\/)?([a-z0-9\\-\\_\\%]+)([\\&|?][\\S]*)*/i,\n        );\n        const vimeo = src.match(\n            /\\/\\/(?:www\\.)?(?:player\\.)?vimeo.com\\/(?:video\\/)?([0-9a-z\\-_]+)(.*)?/i,\n        );\n        const wistia = src.match(\n            /https?:\\/\\/(.+)?(wistia\\.com|wi\\.st)\\/(medias|embed)\\/([0-9a-z\\-_]+)(.*)/,\n        );\n\n        if (youtube) {\n            return {\n                youtube,\n            };\n        } else if (vimeo) {\n            return {\n                vimeo,\n            };\n        } else if (wistia) {\n            return {\n                wistia,\n            };\n        }\n    },\n};\n\nexport default utils;\n","import {\n    AfterAppendSlideEventDetail,\n    AfterAppendSubHtmlDetail,\n    BeforeSlideDetail,\n    lGEvents,\n    SlideItemLoadDetail,\n} from './lg-events';\nimport {\n    LightGalleryAllSettings,\n    lightGalleryCoreSettings,\n    LightGallerySettings,\n} from './lg-settings';\nimport utils, { GalleryItem, ImageSize } from './lg-utils';\nimport { $LG, lgQuery } from './lgQuery';\nimport {\n    Coords,\n    MediaContainerPosition,\n    SlideDirection,\n    VideoInfo,\n} from './types';\n\ndeclare let picturefill: any;\n\n// @ref - https://stackoverflow.com/questions/3971841/how-to-resize-images-proportionally-keeping-the-aspect-ratio\n// @ref - https://2ality.com/2017/04/setting-up-multi-platform-packages.html\n\n// Unique id for each gallery\nlet lgId = 0;\n\nexport class LightGallery {\n    public settings!: LightGalleryAllSettings;\n    public galleryItems!: GalleryItem[];\n\n    // Current gallery item\n    public lgId!: number;\n\n    public el!: HTMLElement;\n    public LGel!: lgQuery;\n    public lgOpened = false;\n\n    public index = 0;\n\n    // lightGallery modules\n    public plugins: any[] = [];\n\n    // false when lightGallery load first slide content;\n    public lGalleryOn = false;\n\n    // True when a slide animation is in progress\n    public lgBusy = false;\n\n    // Type of touch action - {swipe, zoomSwipe, pinch}\n    public touchAction?: 'swipe' | 'zoomSwipe' | 'pinch';\n\n    // Direction of swipe/drag - {horizontal, vertical}\n    public swipeDirection?: 'horizontal' | 'vertical';\n\n    // Timeout function for hiding controls;\n    public hideBarTimeout: any;\n\n    public currentItemsInDom: string[] = [];\n\n    public outer!: lgQuery;\n\n    public items: any;\n\n    public $backdrop!: lgQuery;\n    public $lgComponents!: lgQuery;\n\n    public $container!: lgQuery;\n\n    public $inner!: lgQuery;\n    public $content!: lgQuery;\n    public $toolbar!: lgQuery;\n\n    // Scroll top value before lightGallery is opened\n    public prevScrollTop = 0;\n\n    public bodyPaddingRight = 0;\n\n    private zoomFromOrigin!: boolean;\n\n    private currentImageSize?: ImageSize;\n\n    private isDummyImageRemoved = false;\n\n    private dragOrSwipeEnabled = false;\n\n    public mediaContainerPosition = {\n        top: 0,\n        bottom: 0,\n    };\n\n    constructor(element: HTMLElement, options?: LightGallerySettings) {\n        if (!element) {\n            return this;\n        }\n        lgId++;\n        this.lgId = lgId;\n\n        this.el = element;\n        this.LGel = $LG(element);\n\n        this.generateSettings(options);\n\n        this.buildModules();\n\n        // When using dynamic mode, ensure dynamicEl is an array\n        if (\n            this.settings.dynamic &&\n            this.settings.dynamicEl !== undefined &&\n            !Array.isArray(this.settings.dynamicEl)\n        ) {\n            throw 'When using dynamic mode, you must also define dynamicEl as an Array.';\n        }\n\n        this.galleryItems = this.getItems();\n        this.normalizeSettings();\n\n        // Gallery items\n\n        this.init();\n\n        this.validateLicense();\n\n        return this;\n    }\n\n    private generateSettings(options?: LightGallerySettings) {\n        // lightGallery settings\n        this.settings = {\n            ...lightGalleryCoreSettings,\n            ...options,\n        } as LightGalleryAllSettings;\n        if (\n            this.settings.isMobile &&\n            typeof this.settings.isMobile === 'function'\n                ? this.settings.isMobile()\n                : utils.isMobile()\n        ) {\n            const mobileSettings = {\n                ...this.settings.mobileSettings,\n                ...this.settings.mobileSettings,\n            };\n            this.settings = { ...this.settings, ...mobileSettings };\n        }\n    }\n\n    private normalizeSettings() {\n        if (this.settings.slideEndAnimation) {\n            this.settings.hideControlOnEnd = false;\n        }\n        if (!this.settings.closable) {\n            this.settings.swipeToClose = false;\n        }\n\n        // And reset it on close to get the correct value next time\n        this.zoomFromOrigin = this.settings.zoomFromOrigin;\n\n        // At the moment, Zoom from image doesn't support dynamic options\n        // @todo add zoomFromOrigin support for dynamic images\n        if (this.settings.dynamic) {\n            this.zoomFromOrigin = false;\n        }\n\n        if (!this.settings.container) {\n            this.settings.container = document.body;\n        }\n\n        // settings.preload should not be grater than $item.length\n        this.settings.preload = Math.min(\n            this.settings.preload,\n            this.galleryItems.length,\n        );\n    }\n\n    init(): void {\n        this.addSlideVideoInfo(this.galleryItems);\n\n        this.buildStructure();\n\n        this.LGel.trigger(lGEvents.init, {\n            instance: this,\n        });\n\n        if (this.settings.keyPress) {\n            this.keyPress();\n        }\n\n        setTimeout(() => {\n            this.enableDrag();\n            this.enableSwipe();\n            this.triggerPosterClick();\n        }, 50);\n\n        this.arrow();\n        if (this.settings.mousewheel) {\n            this.mousewheel();\n        }\n\n        if (!this.settings.dynamic) {\n            this.openGalleryOnItemClick();\n        }\n    }\n\n    openGalleryOnItemClick(): void {\n        // Using for loop instead of using bubbling as the items can be any html element.\n        for (let index = 0; index < this.items.length; index++) {\n            const element = this.items[index];\n            const $element = $LG(element);\n            // Using different namespace for click because click event should not unbind if selector is same object('this')\n            // @todo manage all event listners - should have namespace that represent element\n            const uuid = lgQuery.generateUUID();\n            $element\n                .attr('data-lg-id', uuid)\n                .on(`click.lgcustom-item-${uuid}`, (e) => {\n                    e.preventDefault();\n                    const currentItemIndex = this.settings.index || index;\n                    this.openGallery(currentItemIndex, element);\n                });\n        }\n    }\n\n    /**\n     * Module constructor\n     * Modules are build incrementally.\n     * Gallery should be opened only once all the modules are initialized.\n     * use moduleBuildTimeout to make sure this\n     */\n    buildModules(): void {\n        this.settings.plugins.forEach((plugin) => {\n            this.plugins.push(new plugin(this, $LG));\n        });\n    }\n\n    validateLicense(): void {\n        if (!this.settings.licenseKey) {\n            console.error('Please provide a valid license key');\n        } else if (this.settings.licenseKey === '0000-0000-000-0000') {\n            console.warn(\n                `lightGallery: ${this.settings.licenseKey} license key is not valid for production use`,\n            );\n        }\n    }\n\n    getSlideItem(index: number): lgQuery {\n        return $LG(this.getSlideItemId(index));\n    }\n\n    getSlideItemId(index: number): string {\n        return `#lg-item-${this.lgId}-${index}`;\n    }\n\n    getIdName(id: string): string {\n        return `${id}-${this.lgId}`;\n    }\n    getElementById(id: string): lgQuery {\n        return $LG(`#${this.getIdName(id)}`);\n    }\n\n    manageSingleSlideClassName(): void {\n        if (this.galleryItems.length < 2) {\n            this.outer.addClass('lg-single-item');\n        } else {\n            this.outer.removeClass('lg-single-item');\n        }\n    }\n\n    buildStructure(): void {\n        const container = this.$container && this.$container.get();\n        if (container) {\n            return;\n        }\n        let controls = '';\n        let subHtmlCont = '';\n\n        // Create controls\n        if (this.settings.controls) {\n            controls = `<button type=\"button\" id=\"${this.getIdName(\n                'lg-prev',\n            )}\" aria-label=\"${\n                this.settings.strings['previousSlide']\n            }\" class=\"lg-prev lg-icon\"> ${this.settings.prevHtml} </button>\n                <button type=\"button\" id=\"${this.getIdName(\n                    'lg-next',\n                )}\" aria-label=\"${\n                this.settings.strings['nextSlide']\n            }\" class=\"lg-next lg-icon\"> ${this.settings.nextHtml} </button>`;\n        }\n\n        if (this.settings.appendSubHtmlTo !== '.lg-item') {\n            subHtmlCont =\n                '<div class=\"lg-sub-html\" role=\"status\" aria-live=\"polite\"></div>';\n        }\n\n        let addClasses = '';\n\n        if (this.settings.allowMediaOverlap) {\n            // Do not remove space before last single quote\n            addClasses += 'lg-media-overlap ';\n        }\n\n        const ariaLabelledby = this.settings.ariaLabelledby\n            ? 'aria-labelledby=\"' + this.settings.ariaLabelledby + '\"'\n            : '';\n        const ariaDescribedby = this.settings.ariaDescribedby\n            ? 'aria-describedby=\"' + this.settings.ariaDescribedby + '\"'\n            : '';\n\n        const containerClassName = `lg-container ${this.settings.addClass} ${\n            document.body !== this.settings.container ? 'lg-inline' : ''\n        }`;\n        const closeIcon =\n            this.settings.closable && this.settings.showCloseIcon\n                ? `<button type=\"button\" aria-label=\"${\n                      this.settings.strings['closeGallery']\n                  }\" id=\"${this.getIdName(\n                      'lg-close',\n                  )}\" class=\"lg-close lg-icon\"></button>`\n                : '';\n        const maximizeIcon = this.settings.showMaximizeIcon\n            ? `<button type=\"button\" aria-label=\"${\n                  this.settings.strings['toggleMaximize']\n              }\" id=\"${this.getIdName(\n                  'lg-maximize',\n              )}\" class=\"lg-maximize lg-icon\"></button>`\n            : '';\n        const template = `\n        <div class=\"${containerClassName}\" id=\"${this.getIdName(\n            'lg-container',\n        )}\" tabindex=\"-1\" aria-modal=\"true\" ${ariaLabelledby} ${ariaDescribedby} role=\"dialog\"\n        >\n            <div id=\"${this.getIdName(\n                'lg-backdrop',\n            )}\" class=\"lg-backdrop\"></div>\n\n            <div id=\"${this.getIdName(\n                'lg-outer',\n            )}\" class=\"lg-outer lg-use-css3 lg-css3 lg-hide-items ${addClasses} \">\n\n              <div id=\"${this.getIdName('lg-content')}\" class=\"lg-content\">\n                <div id=\"${this.getIdName('lg-inner')}\" class=\"lg-inner\">\n                </div>\n                ${controls}\n              </div>\n                <div id=\"${this.getIdName(\n                    'lg-toolbar',\n                )}\" class=\"lg-toolbar lg-group\">\n                    ${maximizeIcon}\n                    ${closeIcon}\n                    </div>\n                    ${\n                        this.settings.appendSubHtmlTo === '.lg-outer'\n                            ? subHtmlCont\n                            : ''\n                    }\n                <div id=\"${this.getIdName(\n                    'lg-components',\n                )}\" class=\"lg-components\">\n                    ${\n                        this.settings.appendSubHtmlTo === '.lg-sub-html'\n                            ? subHtmlCont\n                            : ''\n                    }\n                </div>\n            </div>\n        </div>\n        `;\n\n        $LG(this.settings.container).append(template);\n\n        if (document.body !== this.settings.container) {\n            $LG(this.settings.container).css('position', 'relative');\n        }\n\n        this.outer = this.getElementById('lg-outer');\n        this.$lgComponents = this.getElementById('lg-components');\n        this.$backdrop = this.getElementById('lg-backdrop');\n        this.$container = this.getElementById('lg-container');\n        this.$inner = this.getElementById('lg-inner');\n        this.$content = this.getElementById('lg-content');\n        this.$toolbar = this.getElementById('lg-toolbar');\n\n        this.$backdrop.css(\n            'transition-duration',\n            this.settings.backdropDuration + 'ms',\n        );\n\n        let outerClassNames = `${this.settings.mode} `;\n\n        this.manageSingleSlideClassName();\n\n        if (this.settings.enableDrag) {\n            outerClassNames += 'lg-grab ';\n        }\n\n        this.outer.addClass(outerClassNames);\n\n        this.$inner.css('transition-timing-function', this.settings.easing);\n        this.$inner.css('transition-duration', this.settings.speed + 'ms');\n\n        if (this.settings.download) {\n            this.$toolbar.append(\n                `<a id=\"${this.getIdName(\n                    'lg-download',\n                )}\" target=\"_blank\" rel=\"noopener\" aria-label=\"${\n                    this.settings.strings['download']\n                }\" download class=\"lg-download lg-icon\"></a>`,\n            );\n        }\n\n        this.counter();\n\n        $LG(window).on(\n            `resize.lg.global${this.lgId} orientationchange.lg.global${this.lgId}`,\n            () => {\n                this.refreshOnResize();\n            },\n        );\n\n        this.hideBars();\n\n        this.manageCloseGallery();\n        this.toggleMaximize();\n\n        this.initModules();\n    }\n\n    refreshOnResize(): void {\n        if (this.lgOpened) {\n            const currentGalleryItem = this.galleryItems[this.index];\n            const { __slideVideoInfo } = currentGalleryItem;\n\n            this.mediaContainerPosition = this.getMediaContainerPosition();\n            const { top, bottom } = this.mediaContainerPosition;\n            this.currentImageSize = utils.getSize(\n                this.items[this.index],\n                this.outer,\n                top + bottom,\n                __slideVideoInfo && this.settings.videoMaxSize,\n            );\n            if (__slideVideoInfo) {\n                this.resizeVideoSlide(this.index, this.currentImageSize);\n            }\n            if (this.zoomFromOrigin && !this.isDummyImageRemoved) {\n                const imgStyle = this.getDummyImgStyles(this.currentImageSize);\n                this.outer\n                    .find('.lg-current .lg-dummy-img')\n                    .first()\n                    .attr('style', imgStyle);\n            }\n            this.LGel.trigger(lGEvents.containerResize);\n        }\n    }\n\n    resizeVideoSlide(index: number, imageSize?: ImageSize): void {\n        const lgVideoStyle = this.getVideoContStyle(imageSize);\n        const currentSlide = this.getSlideItem(index);\n        currentSlide.find('.lg-video-cont').attr('style', lgVideoStyle);\n    }\n\n    /**\n     * Update slides dynamically.\n     * Add, edit or delete slides dynamically when lightGallery is opened.\n     * Modify the current gallery items and pass it via updateSlides method\n     * @note\n     * - Do not mutate existing lightGallery items directly.\n     * - Always pass new list of gallery items\n     * - You need to take care of thumbnails outside the gallery if any\n     * - user this method only if you want to update slides when the gallery is opened. Otherwise, use `refresh()` method.\n     * @param items Gallery items\n     * @param index After the update operation, which slide gallery should navigate to\n     * @category lGPublicMethods\n     * @example\n     * const plugin = lightGallery();\n     *\n     * // Adding slides dynamically\n     * let galleryItems = [\n     * // Access existing lightGallery items\n     * // galleryItems are automatically generated internally from the gallery HTML markup\n     * // or directly from galleryItems when dynamic gallery is used\n     *   ...plugin.galleryItems,\n     *     ...[\n     *       {\n     *         src: 'img/img-1.png',\n     *           thumb: 'img/thumb1.png',\n     *         },\n     *     ],\n     *   ];\n     *   plugin.updateSlides(\n     *     galleryItems,\n     *     plugin.index,\n     *   );\n     *\n     *\n     * // Remove slides dynamically\n     * galleryItems = JSON.parse(\n     *   JSON.stringify(updateSlideInstance.galleryItems),\n     * );\n     * galleryItems.shift();\n     * updateSlideInstance.updateSlides(galleryItems, 1);\n     * @see <a href=\"/demos/update-slides/\">Demo</a>\n     */\n    updateSlides(items: GalleryItem[], index: number): void {\n        if (this.index > items.length - 1) {\n            this.index = items.length - 1;\n        }\n        if (items.length === 1) {\n            this.index = 0;\n        }\n        if (!items.length) {\n            this.closeGallery();\n            return;\n        }\n        const currentSrc = this.galleryItems[index].src;\n        this.galleryItems = items;\n        this.updateControls();\n        this.$inner.empty();\n        this.currentItemsInDom = [];\n\n        let _index = 0;\n        // Find the current index based on source value of the slide\n        this.galleryItems.some((galleryItem, itemIndex) => {\n            if (galleryItem.src === currentSrc) {\n                _index = itemIndex;\n                return true;\n            }\n            return false;\n        });\n\n        this.currentItemsInDom = this.organizeSlideItems(_index, -1);\n        this.loadContent(_index, true);\n        this.getSlideItem(_index).addClass('lg-current');\n\n        this.index = _index;\n        this.updateCurrentCounter(_index);\n        this.LGel.trigger(lGEvents.updateSlides);\n    }\n\n    // Get gallery items based on multiple conditions\n    getItems(): GalleryItem[] {\n        // Gallery items\n        this.items = [];\n        if (!this.settings.dynamic) {\n            if (this.settings.selector === 'this') {\n                this.items.push(this.el);\n            } else if (this.settings.selector) {\n                if (typeof this.settings.selector === 'string') {\n                    if (this.settings.selectWithin) {\n                        const selectWithin = $LG(this.settings.selectWithin);\n                        this.items = selectWithin\n                            .find(this.settings.selector)\n                            .get();\n                    } else {\n                        this.items = this.el.querySelectorAll(\n                            this.settings.selector,\n                        );\n                    }\n                } else {\n                    this.items = this.settings.selector;\n                }\n            } else {\n                this.items = this.el.children;\n            }\n            return utils.getDynamicOptions(\n                this.items,\n                this.settings.extraProps,\n                this.settings.getCaptionFromTitleOrAlt,\n                this.settings.exThumbImage,\n            );\n        } else {\n            return this.settings.dynamicEl || [];\n        }\n    }\n\n    shouldHideScrollbar(): boolean {\n        return (\n            this.settings.hideScrollbar &&\n            document.body === this.settings.container\n        );\n    }\n\n    hideScrollbar(): void {\n        if (!this.shouldHideScrollbar()) {\n            return;\n        }\n        this.bodyPaddingRight = parseFloat($LG('body').style().paddingRight);\n        const bodyRect = document.documentElement.getBoundingClientRect();\n        const scrollbarWidth = window.innerWidth - bodyRect.width;\n\n        $LG(document.body).css(\n            'padding-right',\n            scrollbarWidth + this.bodyPaddingRight + 'px',\n        );\n        $LG(document.body).addClass('lg-overlay-open');\n    }\n\n    resetScrollBar(): void {\n        if (!this.shouldHideScrollbar()) {\n            return;\n        }\n        $LG(document.body).css('padding-right', this.bodyPaddingRight + 'px');\n        $LG(document.body).removeClass('lg-overlay-open');\n    }\n\n    /**\n     * Open lightGallery.\n     * Open gallery with specific slide by passing index of the slide as parameter.\n     * @category lGPublicMethods\n     * @param {Number} index  - index of the slide\n     * @param {HTMLElement} element - Which image lightGallery should zoom from\n     *\n     * @example\n     * const $dynamicGallery = document.getElementById('dynamic-gallery-demo');\n     * const dynamicGallery = lightGallery($dynamicGallery, {\n     *     dynamic: true,\n     *     dynamicEl: [\n     *         {\n     *              src: 'img/1.jpg',\n     *              thumb: 'img/thumb-1.jpg',\n     *              subHtml: '<h4>Image 1 title</h4><p>Image 1 descriptions.</p>',\n     *         },\n     *         ...\n     *     ],\n     * });\n     * $dynamicGallery.addEventListener('click', function () {\n     *     // Starts with third item.(Optional).\n     *     // This is useful if you want use dynamic mode with\n     *     // custom thumbnails (thumbnails outside gallery),\n     *     dynamicGallery.openGallery(2);\n     * });\n     *\n     */\n    openGallery(index = this.settings.index, element?: HTMLElement): void {\n        // prevent accidental double execution\n        if (this.lgOpened) return;\n        this.lgOpened = true;\n        this.outer.removeClass('lg-hide-items');\n\n        this.hideScrollbar();\n\n        // Add display block, but still has opacity 0\n        this.$container.addClass('lg-show');\n\n        const itemsToBeInsertedToDom = this.getItemsToBeInsertedToDom(\n            index,\n            index,\n        );\n        this.currentItemsInDom = itemsToBeInsertedToDom;\n\n        let items = '';\n        itemsToBeInsertedToDom.forEach((item) => {\n            items = items + `<div id=\"${item}\" class=\"lg-item\"></div>`;\n        });\n\n        this.$inner.append(items);\n        this.addHtml(index);\n        let transform: string | undefined = '';\n        this.mediaContainerPosition = this.getMediaContainerPosition();\n        const { top, bottom } = this.mediaContainerPosition;\n        if (!this.settings.allowMediaOverlap) {\n            this.setMediaContainerPosition(top, bottom);\n        }\n        const { __slideVideoInfo } = this.galleryItems[index];\n        if (this.zoomFromOrigin && element) {\n            this.currentImageSize = utils.getSize(\n                element,\n                this.outer,\n                top + bottom,\n                __slideVideoInfo && this.settings.videoMaxSize,\n            );\n            transform = utils.getTransform(\n                element,\n                this.outer,\n                top,\n                bottom,\n                this.currentImageSize,\n            );\n        }\n        if (!this.zoomFromOrigin || !transform) {\n            this.outer.addClass(this.settings.startClass);\n            this.getSlideItem(index).removeClass('lg-complete');\n        }\n        const timeout = this.settings.zoomFromOrigin\n            ? 100\n            : this.settings.backdropDuration;\n        setTimeout(() => {\n            this.outer.addClass('lg-components-open');\n        }, timeout);\n        this.index = index;\n        this.LGel.trigger(lGEvents.beforeOpen);\n\n        // add class lg-current to remove initial transition\n        this.getSlideItem(index).addClass('lg-current');\n\n        this.lGalleryOn = false;\n        // Store the current scroll top value to scroll back after closing the gallery..\n        this.prevScrollTop = $LG(window).scrollTop();\n\n        setTimeout(() => {\n            // Need to check both zoomFromOrigin and transform values as we need to set set the\n            // default opening animation if user missed to add the lg-size attribute\n\n            if (this.zoomFromOrigin && transform) {\n                const currentSlide = this.getSlideItem(index);\n                currentSlide.css('transform', transform);\n                setTimeout(() => {\n                    currentSlide\n                        .addClass('lg-start-progress lg-start-end-progress')\n                        .css(\n                            'transition-duration',\n                            this.settings.startAnimationDuration + 'ms',\n                        );\n                    this.outer.addClass('lg-zoom-from-image');\n                });\n                setTimeout(() => {\n                    currentSlide.css('transform', 'translate3d(0, 0, 0)');\n                }, 100);\n            }\n\n            setTimeout(() => {\n                this.$backdrop.addClass('in');\n                this.$container.addClass('lg-show-in');\n            }, 10);\n\n            setTimeout(() => {\n                if (\n                    this.settings.trapFocus &&\n                    document.body === this.settings.container\n                ) {\n                    this.trapFocus();\n                }\n            }, this.settings.backdropDuration + 50);\n\n            // lg-visible class resets gallery opacity to 1\n            if (!this.zoomFromOrigin || !transform) {\n                setTimeout(() => {\n                    this.outer.addClass('lg-visible');\n                }, this.settings.backdropDuration);\n            }\n\n            // initiate slide function\n            this.slide(index, false, false, false);\n\n            this.LGel.trigger(lGEvents.afterOpen);\n        });\n\n        if (document.body === this.settings.container) {\n            $LG('html').addClass('lg-on');\n        }\n    }\n\n    /**\n     * Note - Changing the position of the media on every slide transition creates a flickering effect.\n     * Therefore, The height of the caption is calculated dynamically, only once based on the first slide caption.\n     * if you have dynamic captions for each media,\n     * you can provide an appropriate height for the captions via allowMediaOverlap option\n     */\n    public getMediaContainerPosition(): MediaContainerPosition {\n        if (this.settings.allowMediaOverlap) {\n            return {\n                top: 0,\n                bottom: 0,\n            };\n        }\n        const top = this.$toolbar.get().clientHeight || 0;\n        const subHtml = this.outer.find('.lg-components .lg-sub-html').get();\n        const captionHeight =\n            this.settings.defaultCaptionHeight ||\n            (subHtml && subHtml.clientHeight) ||\n            0;\n        const thumbContainer = this.outer.find('.lg-thumb-outer').get();\n        const thumbHeight = thumbContainer ? thumbContainer.clientHeight : 0;\n        const bottom = thumbHeight + captionHeight;\n        return {\n            top,\n            bottom,\n        };\n    }\n\n    private setMediaContainerPosition(top = 0, bottom = 0): void {\n        this.$content.css('top', top + 'px').css('bottom', bottom + 'px');\n    }\n\n    hideBars(): void {\n        // Hide controllers if mouse doesn't move for some period\n        setTimeout(() => {\n            this.outer.removeClass('lg-hide-items');\n            if (this.settings.hideBarsDelay > 0) {\n                this.outer.on('mousemove.lg click.lg touchstart.lg', () => {\n                    this.outer.removeClass('lg-hide-items');\n\n                    clearTimeout(this.hideBarTimeout);\n\n                    // Timeout will be cleared on each slide movement also\n                    this.hideBarTimeout = setTimeout(() => {\n                        this.outer.addClass('lg-hide-items');\n                    }, this.settings.hideBarsDelay);\n                });\n                this.outer.trigger('mousemove.lg');\n            }\n        }, this.settings.showBarsAfter);\n    }\n\n    initPictureFill($img: lgQuery): void {\n        if (this.settings.supportLegacyBrowser) {\n            try {\n                picturefill({\n                    elements: [$img.get()],\n                });\n            } catch (e) {\n                console.warn(\n                    'lightGallery :- If you want srcset or picture tag to be supported for older browser please include picturefil javascript library in your document.',\n                );\n            }\n        }\n    }\n\n    /**\n     *  @desc Create image counter\n     *  Ex: 1/10\n     */\n    counter(): void {\n        if (this.settings.counter) {\n            const counterHtml = `<div class=\"lg-counter\" role=\"status\" aria-live=\"polite\">\n                <span id=\"${this.getIdName(\n                    'lg-counter-current',\n                )}\" class=\"lg-counter-current\">${this.index + 1} </span> /\n                <span id=\"${this.getIdName(\n                    'lg-counter-all',\n                )}\" class=\"lg-counter-all\">${\n                this.galleryItems.length\n            } </span></div>`;\n            this.outer.find(this.settings.appendCounterTo).append(counterHtml);\n        }\n    }\n\n    /**\n     *  @desc add sub-html into the slide\n     *  @param {Number} index - index of the slide\n     */\n    addHtml(index: number): void {\n        let subHtml;\n        let subHtmlUrl;\n        if (this.galleryItems[index].subHtmlUrl) {\n            subHtmlUrl = this.galleryItems[index].subHtmlUrl;\n        } else {\n            subHtml = this.galleryItems[index].subHtml;\n        }\n\n        if (!subHtmlUrl) {\n            if (subHtml) {\n                // get first letter of sub-html\n                // if first letter starts with . or # get the html form the jQuery object\n                const fL = subHtml.substring(0, 1);\n                if (fL === '.' || fL === '#') {\n                    if (\n                        this.settings.subHtmlSelectorRelative &&\n                        !this.settings.dynamic\n                    ) {\n                        subHtml = $LG(this.items)\n                            .eq(index)\n                            .find(subHtml)\n                            .first()\n                            .html();\n                    } else {\n                        subHtml = $LG(subHtml).first().html();\n                    }\n                }\n            } else {\n                subHtml = '';\n            }\n        }\n\n        if (this.settings.appendSubHtmlTo !== '.lg-item') {\n            if (subHtmlUrl) {\n                this.outer.find('.lg-sub-html').load(subHtmlUrl);\n            } else {\n                this.outer.find('.lg-sub-html').html(subHtml as string);\n            }\n        } else {\n            const currentSlide = $LG(this.getSlideItemId(index));\n            if (subHtmlUrl) {\n                currentSlide.load(subHtmlUrl);\n            } else {\n                currentSlide.append(\n                    `<div class=\"lg-sub-html\">${subHtml}</div>`,\n                );\n            }\n        }\n\n        // Add lg-empty-html class if title doesn't exist\n        if (typeof subHtml !== 'undefined' && subHtml !== null) {\n            if (subHtml === '') {\n                this.outer\n                    .find(this.settings.appendSubHtmlTo)\n                    .addClass('lg-empty-html');\n            } else {\n                this.outer\n                    .find(this.settings.appendSubHtmlTo)\n                    .removeClass('lg-empty-html');\n            }\n        }\n\n        this.LGel.trigger<AfterAppendSubHtmlDetail>(\n            lGEvents.afterAppendSubHtml,\n            {\n                index,\n            },\n        );\n    }\n\n    /**\n     *  @desc Preload slides\n     *  @param {Number} index - index of the slide\n     * @todo preload not working for the first slide, Also, should work for the first and last slide as well\n     */\n    preload(index: number): void {\n        for (let i = 1; i <= this.settings.preload; i++) {\n            if (i >= this.galleryItems.length - index) {\n                break;\n            }\n\n            this.loadContent(index + i, false);\n        }\n\n        for (let j = 1; j <= this.settings.preload; j++) {\n            if (index - j < 0) {\n                break;\n            }\n\n            this.loadContent(index - j, false);\n        }\n    }\n\n    getDummyImgStyles(imageSize?: ImageSize): string {\n        if (!imageSize) return '';\n        return `width:${imageSize.width}px;\n                margin-left: -${imageSize.width / 2}px;\n                margin-top: -${imageSize.height / 2}px;\n                height:${imageSize.height}px`;\n    }\n    getVideoContStyle(imageSize?: ImageSize): string {\n        if (!imageSize) return '';\n        return `width:${imageSize.width}px;\n                height:${imageSize.height}px`;\n    }\n\n    getDummyImageContent(\n        $currentSlide: lgQuery,\n        index: number,\n        alt: string,\n    ): string {\n        let $currentItem;\n        if (!this.settings.dynamic) {\n            $currentItem = $LG(this.items).eq(index);\n        }\n        if ($currentItem) {\n            let _dummyImgSrc;\n            if (!this.settings.exThumbImage) {\n                _dummyImgSrc = $currentItem.find('img').first().attr('src');\n            } else {\n                _dummyImgSrc = $currentItem.attr(this.settings.exThumbImage);\n            }\n            if (!_dummyImgSrc) return '';\n            const imgStyle = this.getDummyImgStyles(this.currentImageSize);\n            const dummyImgContent = `<img ${alt} style=\"${imgStyle}\" class=\"lg-dummy-img\" src=\"${_dummyImgSrc}\" />`;\n\n            $currentSlide.addClass('lg-first-slide');\n            this.outer.addClass('lg-first-slide-loading');\n\n            return dummyImgContent;\n        }\n        return '';\n    }\n\n    setImgMarkup(src: string, $currentSlide: lgQuery, index: number): void {\n        const currentGalleryItem = this.galleryItems[index];\n        const { alt, srcset, sizes, sources } = currentGalleryItem;\n\n        // Use the thumbnail as dummy image which will be resized to actual image size and\n        // displayed on top of actual image\n        let imgContent = '';\n        const altAttr = alt ? 'alt=\"' + alt + '\"' : '';\n\n        if (this.isFirstSlideWithZoomAnimation()) {\n            imgContent = this.getDummyImageContent(\n                $currentSlide,\n                index,\n                altAttr,\n            );\n        } else {\n            imgContent = utils.getImgMarkup(\n                index,\n                src,\n                altAttr,\n                srcset,\n                sizes,\n                sources,\n            );\n        }\n        const imgMarkup = `<picture class=\"lg-img-wrap\"> ${imgContent}</picture>`;\n        $currentSlide.prepend(imgMarkup);\n    }\n\n    onSlideObjectLoad(\n        $slide: lgQuery,\n        isHTML5VideoWithoutPoster: boolean,\n        onLoad: () => void,\n        onError: () => void,\n    ): void {\n        const mediaObject = $slide.find('.lg-object').first();\n        if (\n            utils.isImageLoaded(mediaObject.get() as HTMLImageElement) ||\n            isHTML5VideoWithoutPoster\n        ) {\n            onLoad();\n        } else {\n            mediaObject.on('load.lg error.lg', () => {\n                onLoad && onLoad();\n            });\n            mediaObject.on('error.lg', () => {\n                onError && onError();\n            });\n        }\n    }\n\n    /**\n     *\n     * @param $el Current slide item\n     * @param index\n     * @param delay Delay is 0 except first time\n     * @param speed Speed is same as delay, except it is 0 if gallery is opened via hash plugin\n     * @param isFirstSlide\n     */\n    onLgObjectLoad(\n        currentSlide: lgQuery,\n        index: number,\n        delay: number,\n        speed: number,\n        isFirstSlide: boolean,\n        isHTML5VideoWithoutPoster: boolean,\n    ): void {\n        this.onSlideObjectLoad(\n            currentSlide,\n            isHTML5VideoWithoutPoster,\n            () => {\n                this.triggerSlideItemLoad(\n                    currentSlide,\n                    index,\n                    delay,\n                    speed,\n                    isFirstSlide,\n                );\n            },\n            () => {\n                currentSlide.addClass('lg-complete lg-complete_');\n                currentSlide.html(\n                    '<span class=\"lg-error-msg\">' +\n                        this.settings.strings['mediaLoadingFailed'] +\n                        '</span>',\n                );\n            },\n        );\n    }\n\n    triggerSlideItemLoad(\n        $currentSlide: lgQuery,\n        index: number,\n        delay: number,\n        speed: number,\n        isFirstSlide: boolean,\n    ): void {\n        const currentGalleryItem = this.galleryItems[index];\n\n        // Adding delay for video slides without poster for better performance and user experience\n        // Videos should start playing once once the gallery is completely loaded\n        const _speed =\n            isFirstSlide &&\n            this.getSlideType(currentGalleryItem) === 'video' &&\n            !currentGalleryItem.poster\n                ? speed\n                : 0;\n        setTimeout(() => {\n            $currentSlide.addClass('lg-complete lg-complete_');\n            this.LGel.trigger<SlideItemLoadDetail>(lGEvents.slideItemLoad, {\n                index,\n                delay: delay || 0,\n                isFirstSlide,\n            });\n        }, _speed);\n    }\n\n    isFirstSlideWithZoomAnimation(): boolean {\n        return !!(\n            !this.lGalleryOn &&\n            this.zoomFromOrigin &&\n            this.currentImageSize\n        );\n    }\n\n    // Add video slideInfo\n    addSlideVideoInfo(items: GalleryItem[]): void {\n        items.forEach((element, index) => {\n            element.__slideVideoInfo = utils.isVideo(\n                element.src as string,\n                !!element.video,\n                index,\n            );\n            if (\n                element.__slideVideoInfo &&\n                this.settings.loadYouTubePoster &&\n                !element.poster &&\n                element.__slideVideoInfo.youtube\n            ) {\n                element.poster = `//img.youtube.com/vi/${element.__slideVideoInfo.youtube[1]}/maxresdefault.jpg`;\n            }\n        });\n    }\n\n    /**\n     *  Load slide content into slide.\n     *  This is used to load content into slides that is not visible too\n     *  @param {Number} index - index of the slide.\n     *  @param {Boolean} rec - if true call loadcontent() function again.\n     */\n    loadContent(index: number, rec: boolean): void {\n        const currentGalleryItem = this.galleryItems[index];\n        const $currentSlide = $LG(this.getSlideItemId(index));\n\n        const { poster, srcset, sizes, sources } = currentGalleryItem;\n        let { src } = currentGalleryItem;\n\n        const video = currentGalleryItem.video;\n\n        const _html5Video =\n            video && typeof video === 'string' ? JSON.parse(video) : video;\n\n        if (currentGalleryItem.responsive) {\n            const srcDyItms = currentGalleryItem.responsive.split(',');\n            src = utils.getResponsiveSrc(srcDyItms) || src;\n        }\n\n        const videoInfo = currentGalleryItem.__slideVideoInfo;\n        let lgVideoStyle = '';\n\n        const iframe = !!currentGalleryItem.iframe;\n\n        const isFirstSlide = !this.lGalleryOn;\n\n        // delay for adding complete class. it is 0 except first time.\n        let delay = 0;\n        if (isFirstSlide) {\n            if (this.zoomFromOrigin && this.currentImageSize) {\n                delay = this.settings.startAnimationDuration + 10;\n            } else {\n                delay = this.settings.backdropDuration + 10;\n            }\n        }\n\n        if (!$currentSlide.hasClass('lg-loaded')) {\n            if (videoInfo) {\n                const { top, bottom } = this.mediaContainerPosition;\n                const videoSize = utils.getSize(\n                    this.items[index],\n                    this.outer,\n                    top + bottom,\n                    videoInfo && this.settings.videoMaxSize,\n                );\n                lgVideoStyle = this.getVideoContStyle(videoSize);\n            }\n            if (iframe) {\n                const markup = utils.getIframeMarkup(\n                    this.settings.iframeWidth,\n                    this.settings.iframeHeight,\n                    this.settings.iframeMaxWidth,\n                    this.settings.iframeMaxHeight,\n                    src,\n                    currentGalleryItem.iframeTitle,\n                );\n                $currentSlide.prepend(markup);\n            } else if (poster) {\n                let dummyImg = '';\n                const hasStartAnimation =\n                    isFirstSlide &&\n                    this.zoomFromOrigin &&\n                    this.currentImageSize;\n                if (hasStartAnimation) {\n                    dummyImg = this.getDummyImageContent(\n                        $currentSlide,\n                        index,\n                        '',\n                    );\n                }\n\n                const markup = utils.getVideoPosterMarkup(\n                    poster,\n                    dummyImg || '',\n                    lgVideoStyle,\n                    this.settings.strings['playVideo'],\n                    videoInfo,\n                );\n                $currentSlide.prepend(markup);\n            } else if (videoInfo) {\n                const markup = `<div class=\"lg-video-cont \" style=\"${lgVideoStyle}\"></div>`;\n                $currentSlide.prepend(markup);\n            } else {\n                this.setImgMarkup(src as string, $currentSlide, index);\n                if (srcset || sources) {\n                    const $img = $currentSlide.find('.lg-object');\n                    this.initPictureFill($img);\n                }\n            }\n            if (poster || videoInfo) {\n                this.LGel.trigger(lGEvents.hasVideo, {\n                    index,\n                    src: src,\n                    html5Video: _html5Video,\n                    hasPoster: !!poster,\n                });\n            }\n\n            this.LGel.trigger<AfterAppendSlideEventDetail>(\n                lGEvents.afterAppendSlide,\n                { index },\n            );\n\n            if (\n                this.lGalleryOn &&\n                this.settings.appendSubHtmlTo === '.lg-item'\n            ) {\n                this.addHtml(index);\n            }\n        }\n\n        // For first time add some delay for displaying the start animation.\n        let _speed = 0;\n\n        // Do not change the delay value because it is required for zoom plugin.\n        // If gallery opened from direct url (hash) speed value should be 0\n        if (delay && !$LG(document.body).hasClass('lg-from-hash')) {\n            _speed = delay;\n        }\n\n        // Only for first slide and zoomFromOrigin is enabled\n        if (this.isFirstSlideWithZoomAnimation()) {\n            setTimeout(() => {\n                $currentSlide\n                    .removeClass('lg-start-end-progress lg-start-progress')\n                    .removeAttr('style');\n            }, this.settings.startAnimationDuration + 100);\n            if (!$currentSlide.hasClass('lg-loaded')) {\n                setTimeout(() => {\n                    if (this.getSlideType(currentGalleryItem) === 'image') {\n                        const { alt } = currentGalleryItem;\n                        const altAttr = alt ? 'alt=\"' + alt + '\"' : '';\n\n                        $currentSlide\n                            .find('.lg-img-wrap')\n                            .append(\n                                utils.getImgMarkup(\n                                    index,\n                                    src as string,\n                                    altAttr,\n                                    srcset,\n                                    sizes,\n                                    currentGalleryItem.sources,\n                                ),\n                            );\n                        if (srcset || sources) {\n                            const $img = $currentSlide.find('.lg-object');\n                            this.initPictureFill($img);\n                        }\n                    }\n                    if (\n                        this.getSlideType(currentGalleryItem) === 'image' ||\n                        (this.getSlideType(currentGalleryItem) === 'video' &&\n                            poster)\n                    ) {\n                        this.onLgObjectLoad(\n                            $currentSlide,\n                            index,\n                            delay,\n                            _speed,\n                            true,\n                            false,\n                        );\n\n                        // load remaining slides once the slide is completely loaded\n                        this.onSlideObjectLoad(\n                            $currentSlide,\n                            !!(videoInfo && videoInfo.html5 && !poster),\n                            () => {\n                                this.loadContentOnFirstSlideLoad(\n                                    index,\n                                    $currentSlide,\n                                    _speed,\n                                );\n                            },\n                            () => {\n                                this.loadContentOnFirstSlideLoad(\n                                    index,\n                                    $currentSlide,\n                                    _speed,\n                                );\n                            },\n                        );\n                    }\n                }, this.settings.startAnimationDuration + 100);\n            }\n        }\n\n        // SLide content has been added to dom\n        $currentSlide.addClass('lg-loaded');\n\n        if (\n            !this.isFirstSlideWithZoomAnimation() ||\n            (this.getSlideType(currentGalleryItem) === 'video' && !poster)\n        ) {\n            this.onLgObjectLoad(\n                $currentSlide,\n                index,\n                delay,\n                _speed,\n                isFirstSlide,\n                !!(videoInfo && videoInfo.html5 && !poster),\n            );\n        }\n\n        // When gallery is opened once content is loaded (second time) need to add lg-complete class for css styling\n        if (\n            (!this.zoomFromOrigin || !this.currentImageSize) &&\n            $currentSlide.hasClass('lg-complete_') &&\n            !this.lGalleryOn\n        ) {\n            setTimeout(() => {\n                $currentSlide.addClass('lg-complete');\n            }, this.settings.backdropDuration);\n        }\n\n        // Content loaded\n        // Need to set lGalleryOn before calling preload function\n        this.lGalleryOn = true;\n\n        if (rec === true) {\n            if (!$currentSlide.hasClass('lg-complete_')) {\n                $currentSlide\n                    .find('.lg-object')\n                    .first()\n                    .on('load.lg error.lg', () => {\n                        this.preload(index);\n                    });\n            } else {\n                this.preload(index);\n            }\n        }\n    }\n\n    /**\n     * @desc Remove dummy image content and load next slides\n     * Called only for the first time if zoomFromOrigin animation is enabled\n     * @param index\n     * @param $currentSlide\n     * @param speed\n     */\n    loadContentOnFirstSlideLoad(\n        index: number,\n        $currentSlide: lgQuery,\n        speed: number,\n    ): void {\n        setTimeout(() => {\n            $currentSlide.find('.lg-dummy-img').remove();\n            $currentSlide.removeClass('lg-first-slide');\n            this.outer.removeClass('lg-first-slide-loading');\n            this.isDummyImageRemoved = true;\n            this.preload(index);\n        }, speed + 300);\n    }\n\n    getItemsToBeInsertedToDom(\n        index: number,\n        prevIndex: number,\n        numberOfItems = 0,\n    ): string[] {\n        const itemsToBeInsertedToDom: string[] = [];\n        // Minimum 2 items should be there\n        let possibleNumberOfItems = Math.max(numberOfItems, 3);\n        possibleNumberOfItems = Math.min(\n            possibleNumberOfItems,\n            this.galleryItems.length,\n        );\n        const prevIndexItem = `lg-item-${this.lgId}-${prevIndex}`;\n        if (this.galleryItems.length <= 3) {\n            this.galleryItems.forEach((_element, index) => {\n                itemsToBeInsertedToDom.push(`lg-item-${this.lgId}-${index}`);\n            });\n            return itemsToBeInsertedToDom;\n        }\n\n        if (index < (this.galleryItems.length - 1) / 2) {\n            for (\n                let idx = index;\n                idx > index - possibleNumberOfItems / 2 && idx >= 0;\n                idx--\n            ) {\n                itemsToBeInsertedToDom.push(`lg-item-${this.lgId}-${idx}`);\n            }\n            const numberOfExistingItems = itemsToBeInsertedToDom.length;\n            for (\n                let idx = 0;\n                idx < possibleNumberOfItems - numberOfExistingItems;\n                idx++\n            ) {\n                itemsToBeInsertedToDom.push(\n                    `lg-item-${this.lgId}-${index + idx + 1}`,\n                );\n            }\n        } else {\n            for (\n                let idx = index;\n                idx <= this.galleryItems.length - 1 &&\n                idx < index + possibleNumberOfItems / 2;\n                idx++\n            ) {\n                itemsToBeInsertedToDom.push(`lg-item-${this.lgId}-${idx}`);\n            }\n            const numberOfExistingItems = itemsToBeInsertedToDom.length;\n            for (\n                let idx = 0;\n                idx < possibleNumberOfItems - numberOfExistingItems;\n                idx++\n            ) {\n                itemsToBeInsertedToDom.push(\n                    `lg-item-${this.lgId}-${index - idx - 1}`,\n                );\n            }\n        }\n        if (this.settings.loop) {\n            if (index === this.galleryItems.length - 1) {\n                itemsToBeInsertedToDom.push(`lg-item-${this.lgId}-${0}`);\n            } else if (index === 0) {\n                itemsToBeInsertedToDom.push(\n                    `lg-item-${this.lgId}-${this.galleryItems.length - 1}`,\n                );\n            }\n        }\n        if (itemsToBeInsertedToDom.indexOf(prevIndexItem) === -1) {\n            itemsToBeInsertedToDom.push(`lg-item-${this.lgId}-${prevIndex}`);\n        }\n\n        return itemsToBeInsertedToDom;\n    }\n\n    organizeSlideItems(index: number, prevIndex: number): string[] {\n        const itemsToBeInsertedToDom = this.getItemsToBeInsertedToDom(\n            index,\n            prevIndex,\n            this.settings.numberOfSlideItemsInDom,\n        );\n\n        itemsToBeInsertedToDom.forEach((item) => {\n            if (this.currentItemsInDom.indexOf(item) === -1) {\n                this.$inner.append(`<div id=\"${item}\" class=\"lg-item\"></div>`);\n            }\n        });\n\n        this.currentItemsInDom.forEach((item) => {\n            if (itemsToBeInsertedToDom.indexOf(item) === -1) {\n                $LG(`#${item}`).remove();\n            }\n        });\n        return itemsToBeInsertedToDom;\n    }\n\n    /**\n     * Get previous index of the slide\n     */\n    getPreviousSlideIndex(): number {\n        let prevIndex = 0;\n        try {\n            const currentItemId = this.outer\n                .find('.lg-current')\n                .first()\n                .attr('id');\n            prevIndex = parseInt(currentItemId.split('-')[3]) || 0;\n        } catch (error) {\n            prevIndex = 0;\n        }\n        return prevIndex;\n    }\n\n    setDownloadValue(index: number): void {\n        if (this.settings.download) {\n            const currentGalleryItem = this.galleryItems[index];\n            const hideDownloadBtn =\n                currentGalleryItem.downloadUrl === false ||\n                currentGalleryItem.downloadUrl === 'false';\n            if (hideDownloadBtn) {\n                this.outer.addClass('lg-hide-download');\n            } else {\n                const $download = this.getElementById('lg-download');\n                this.outer.removeClass('lg-hide-download');\n                $download.attr(\n                    'href',\n                    currentGalleryItem.downloadUrl ||\n                        (currentGalleryItem.src as string),\n                );\n                if (currentGalleryItem.download) {\n                    $download.attr('download', currentGalleryItem.download);\n                }\n            }\n        }\n    }\n\n    makeSlideAnimation(\n        direction: 'next' | 'prev',\n        currentSlideItem: lgQuery,\n        previousSlideItem: lgQuery,\n    ): void {\n        if (this.lGalleryOn) {\n            previousSlideItem.addClass('lg-slide-progress');\n        }\n        setTimeout(\n            () => {\n                // remove all transitions\n                this.outer.addClass('lg-no-trans');\n\n                this.outer\n                    .find('.lg-item')\n                    .removeClass('lg-prev-slide lg-next-slide');\n\n                if (direction === 'prev') {\n                    //prevslide\n                    currentSlideItem.addClass('lg-prev-slide');\n                    previousSlideItem.addClass('lg-next-slide');\n                } else {\n                    // next slide\n                    currentSlideItem.addClass('lg-next-slide');\n                    previousSlideItem.addClass('lg-prev-slide');\n                }\n\n                // give 50 ms for browser to add/remove class\n                setTimeout(() => {\n                    this.outer.find('.lg-item').removeClass('lg-current');\n\n                    currentSlideItem.addClass('lg-current');\n\n                    // reset all transitions\n                    this.outer.removeClass('lg-no-trans');\n                }, 50);\n            },\n            this.lGalleryOn ? this.settings.slideDelay : 0,\n        );\n    }\n\n    /**\n     * Goto a specific slide.\n     * @param {Number} index - index of the slide\n     * @param {Boolean} fromTouch - true if slide function called via touch event or mouse drag\n     * @param {Boolean} fromThumb - true if slide function called via thumbnail click\n     * @param {String} direction - Direction of the slide(next/prev)\n     * @category lGPublicMethods\n     * @example\n     *  const plugin = lightGallery();\n     *  // to go to 3rd slide\n     *  plugin.slide(2);\n     *\n     */\n    slide(\n        index: number,\n        fromTouch?: boolean,\n        fromThumb?: boolean,\n        direction?: SlideDirection | false,\n    ): void {\n        const prevIndex = this.getPreviousSlideIndex();\n        this.currentItemsInDom = this.organizeSlideItems(index, prevIndex);\n\n        // Prevent multiple call, Required for hsh plugin\n        if (this.lGalleryOn && prevIndex === index) {\n            return;\n        }\n\n        const numberOfGalleryItems = this.galleryItems.length;\n\n        if (!this.lgBusy) {\n            if (this.settings.counter) {\n                this.updateCurrentCounter(index);\n            }\n\n            const currentSlideItem = this.getSlideItem(index);\n            const previousSlideItem = this.getSlideItem(prevIndex);\n\n            const currentGalleryItem = this.galleryItems[index];\n            const videoInfo = currentGalleryItem.__slideVideoInfo;\n\n            this.outer.attr(\n                'data-lg-slide-type',\n                this.getSlideType(currentGalleryItem),\n            );\n            this.setDownloadValue(index);\n\n            if (videoInfo) {\n                const { top, bottom } = this.mediaContainerPosition;\n                const videoSize = utils.getSize(\n                    this.items[index],\n                    this.outer,\n                    top + bottom,\n                    videoInfo && this.settings.videoMaxSize,\n                );\n                this.resizeVideoSlide(index, videoSize);\n            }\n\n            this.LGel.trigger<BeforeSlideDetail>(lGEvents.beforeSlide, {\n                prevIndex,\n                index,\n                fromTouch: !!fromTouch,\n                fromThumb: !!fromThumb,\n            });\n\n            this.lgBusy = true;\n\n            clearTimeout(this.hideBarTimeout);\n\n            this.arrowDisable(index);\n\n            if (!direction) {\n                if (index < prevIndex) {\n                    direction = 'prev';\n                } else if (index > prevIndex) {\n                    direction = 'next';\n                }\n            }\n\n            if (!fromTouch) {\n                this.makeSlideAnimation(\n                    direction as SlideDirection,\n                    currentSlideItem,\n                    previousSlideItem,\n                );\n            } else {\n                this.outer\n                    .find('.lg-item')\n                    .removeClass('lg-prev-slide lg-current lg-next-slide');\n                let touchPrev;\n                let touchNext;\n                if (numberOfGalleryItems > 2) {\n                    touchPrev = index - 1;\n                    touchNext = index + 1;\n\n                    if (index === 0 && prevIndex === numberOfGalleryItems - 1) {\n                        // next slide\n                        touchNext = 0;\n                        touchPrev = numberOfGalleryItems - 1;\n                    } else if (\n                        index === numberOfGalleryItems - 1 &&\n                        prevIndex === 0\n                    ) {\n                        // prev slide\n                        touchNext = 0;\n                        touchPrev = numberOfGalleryItems - 1;\n                    }\n                } else {\n                    touchPrev = 0;\n                    touchNext = 1;\n                }\n\n                if (direction === 'prev') {\n                    this.getSlideItem(touchNext).addClass('lg-next-slide');\n                } else {\n                    this.getSlideItem(touchPrev).addClass('lg-prev-slide');\n                }\n\n                currentSlideItem.addClass('lg-current');\n            }\n\n            // Do not put load content in set timeout as it needs to load immediately when the gallery is opened\n            if (!this.lGalleryOn) {\n                this.loadContent(index, true);\n            } else {\n                setTimeout(() => {\n                    this.loadContent(index, true);\n                    // Add title if this.settings.appendSubHtmlTo === lg-sub-html\n                    if (this.settings.appendSubHtmlTo !== '.lg-item') {\n                        this.addHtml(index);\n                    }\n                }, this.settings.speed + 50 + (fromTouch ? 0 : this.settings.slideDelay));\n            }\n\n            setTimeout(() => {\n                this.lgBusy = false;\n                previousSlideItem.removeClass('lg-slide-progress');\n                this.LGel.trigger(lGEvents.afterSlide, {\n                    prevIndex: prevIndex,\n                    index,\n                    fromTouch,\n                    fromThumb,\n                });\n            }, (this.lGalleryOn ? this.settings.speed + 100 : 100) + (fromTouch ? 0 : this.settings.slideDelay));\n        }\n\n        this.index = index;\n    }\n\n    updateCurrentCounter(index: number): void {\n        this.getElementById('lg-counter-current').html(index + 1 + '');\n    }\n\n    updateCounterTotal(): void {\n        this.getElementById('lg-counter-all').html(\n            this.galleryItems.length + '',\n        );\n    }\n\n    getSlideType(item: GalleryItem): 'video' | 'iframe' | 'image' {\n        if (item.__slideVideoInfo) {\n            return 'video';\n        } else if (item.iframe) {\n            return 'iframe';\n        } else {\n            return 'image';\n        }\n    }\n\n    touchMove(startCoords: Coords, endCoords: Coords, e?: TouchEvent): void {\n        const distanceX = endCoords.pageX - startCoords.pageX;\n        const distanceY = endCoords.pageY - startCoords.pageY;\n        let allowSwipe = false;\n\n        if (this.swipeDirection) {\n            allowSwipe = true;\n        } else {\n            if (Math.abs(distanceX) > 15) {\n                this.swipeDirection = 'horizontal';\n                allowSwipe = true;\n            } else if (Math.abs(distanceY) > 15) {\n                this.swipeDirection = 'vertical';\n                allowSwipe = true;\n            }\n        }\n\n        if (!allowSwipe) {\n            return;\n        }\n\n        const $currentSlide = this.getSlideItem(this.index);\n\n        if (this.swipeDirection === 'horizontal') {\n            e?.preventDefault();\n            // reset opacity and transition duration\n            this.outer.addClass('lg-dragging');\n\n            // move current slide\n            this.setTranslate($currentSlide, distanceX, 0);\n\n            // move next and prev slide with current slide\n            const width = $currentSlide.get().offsetWidth;\n            const slideWidthAmount = (width * 15) / 100;\n            const gutter = slideWidthAmount - Math.abs((distanceX * 10) / 100);\n            this.setTranslate(\n                this.outer.find('.lg-prev-slide').first(),\n                -width + distanceX - gutter,\n                0,\n            );\n\n            this.setTranslate(\n                this.outer.find('.lg-next-slide').first(),\n                width + distanceX + gutter,\n                0,\n            );\n        } else if (this.swipeDirection === 'vertical') {\n            if (this.settings.swipeToClose) {\n                e?.preventDefault();\n                this.$container.addClass('lg-dragging-vertical');\n\n                const opacity = 1 - Math.abs(distanceY) / window.innerHeight;\n                this.$backdrop.css('opacity', opacity);\n\n                const scale = 1 - Math.abs(distanceY) / (window.innerWidth * 2);\n                this.setTranslate($currentSlide, 0, distanceY, scale, scale);\n                if (Math.abs(distanceY) > 100) {\n                    this.outer\n                        .addClass('lg-hide-items')\n                        .removeClass('lg-components-open');\n                }\n            }\n        }\n    }\n\n    touchEnd(endCoords: Coords, startCoords: Coords, event: TouchEvent): void {\n        let distance;\n\n        // keep slide animation for any mode while dragg/swipe\n        if (this.settings.mode !== 'lg-slide') {\n            this.outer.addClass('lg-slide');\n        }\n\n        // set transition duration\n        setTimeout(() => {\n            this.$container.removeClass('lg-dragging-vertical');\n            this.outer\n                .removeClass('lg-dragging lg-hide-items')\n                .addClass('lg-components-open');\n\n            let triggerClick = true;\n\n            if (this.swipeDirection === 'horizontal') {\n                distance = endCoords.pageX - startCoords.pageX;\n                const distanceAbs = Math.abs(\n                    endCoords.pageX - startCoords.pageX,\n                );\n                if (\n                    distance < 0 &&\n                    distanceAbs > this.settings.swipeThreshold\n                ) {\n                    this.goToNextSlide(true);\n                    triggerClick = false;\n                } else if (\n                    distance > 0 &&\n                    distanceAbs > this.settings.swipeThreshold\n                ) {\n                    this.goToPrevSlide(true);\n                    triggerClick = false;\n                }\n            } else if (this.swipeDirection === 'vertical') {\n                distance = Math.abs(endCoords.pageY - startCoords.pageY);\n                if (\n                    this.settings.closable &&\n                    this.settings.swipeToClose &&\n                    distance > 100\n                ) {\n                    this.closeGallery();\n                    return;\n                } else {\n                    this.$backdrop.css('opacity', 1);\n                }\n            }\n            this.outer.find('.lg-item').removeAttr('style');\n\n            if (\n                triggerClick &&\n                Math.abs(endCoords.pageX - startCoords.pageX) < 5\n            ) {\n                // Trigger click if distance is less than 5 pix\n                const target = $LG(event.target);\n                if (this.isPosterElement(target)) {\n                    this.LGel.trigger(lGEvents.posterClick);\n                }\n            }\n\n            this.swipeDirection = undefined;\n        });\n\n        // remove slide class once drag/swipe is completed if mode is not slide\n        setTimeout(() => {\n            if (\n                !this.outer.hasClass('lg-dragging') &&\n                this.settings.mode !== 'lg-slide'\n            ) {\n                this.outer.removeClass('lg-slide');\n            }\n        }, this.settings.speed + 100);\n    }\n\n    enableSwipe(): void {\n        let startCoords: Coords = {} as Coords;\n        let endCoords: Coords = {} as Coords;\n        let isMoved = false;\n        let isSwiping = false;\n\n        if (this.settings.enableSwipe) {\n            this.$inner.on('touchstart.lg', (e) => {\n                this.dragOrSwipeEnabled = true;\n                const $item = this.getSlideItem(this.index);\n                if (\n                    ($LG(e.target).hasClass('lg-item') ||\n                        $item.get().contains(e.target)) &&\n                    !this.outer.hasClass('lg-zoomed') &&\n                    !this.lgBusy &&\n                    e.touches.length === 1\n                ) {\n                    isSwiping = true;\n                    this.touchAction = 'swipe';\n                    this.manageSwipeClass();\n                    startCoords = {\n                        pageX: e.touches[0].pageX,\n                        pageY: e.touches[0].pageY,\n                    };\n                }\n            });\n\n            this.$inner.on('touchmove.lg', (e) => {\n                if (\n                    isSwiping &&\n                    this.touchAction === 'swipe' &&\n                    e.touches.length === 1\n                ) {\n                    endCoords = {\n                        pageX: e.touches[0].pageX,\n                        pageY: e.touches[0].pageY,\n                    };\n                    this.touchMove(startCoords, endCoords, e);\n                    isMoved = true;\n                }\n            });\n\n            this.$inner.on('touchend.lg', (event: TouchEvent) => {\n                if (this.touchAction === 'swipe') {\n                    if (isMoved) {\n                        isMoved = false;\n                        this.touchEnd(endCoords, startCoords, event);\n                    } else if (isSwiping) {\n                        const target = $LG(event.target);\n                        if (this.isPosterElement(target)) {\n                            this.LGel.trigger(lGEvents.posterClick);\n                        }\n                    }\n                    this.touchAction = undefined;\n                    isSwiping = false;\n                }\n            });\n        }\n    }\n\n    enableDrag(): void {\n        let startCoords: Coords = {} as Coords;\n        let endCoords: Coords = {} as Coords;\n        let isDraging = false;\n        let isMoved = false;\n        if (this.settings.enableDrag) {\n            this.outer.on('mousedown.lg', (e) => {\n                this.dragOrSwipeEnabled = true;\n                const $item = this.getSlideItem(this.index);\n                if (\n                    $LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target)\n                ) {\n                    if (!this.outer.hasClass('lg-zoomed') && !this.lgBusy) {\n                        e.preventDefault();\n                        if (!this.lgBusy) {\n                            this.manageSwipeClass();\n                            startCoords = {\n                                pageX: e.pageX,\n                                pageY: e.pageY,\n                            };\n                            isDraging = true;\n\n                            // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\n                            this.outer.get().scrollLeft += 1;\n                            this.outer.get().scrollLeft -= 1;\n\n                            // *\n\n                            this.outer\n                                .removeClass('lg-grab')\n                                .addClass('lg-grabbing');\n\n                            this.LGel.trigger(lGEvents.dragStart);\n                        }\n                    }\n                }\n            });\n\n            $LG(window).on(`mousemove.lg.global${this.lgId}`, (e) => {\n                if (isDraging && this.lgOpened) {\n                    isMoved = true;\n                    endCoords = {\n                        pageX: e.pageX,\n                        pageY: e.pageY,\n                    };\n                    this.touchMove(startCoords, endCoords);\n                    this.LGel.trigger(lGEvents.dragMove);\n                }\n            });\n\n            $LG(window).on(`mouseup.lg.global${this.lgId}`, (event) => {\n                if (!this.lgOpened) {\n                    return;\n                }\n                const target = $LG(event.target);\n                if (isMoved) {\n                    isMoved = false;\n                    this.touchEnd(endCoords, startCoords, event);\n                    this.LGel.trigger(lGEvents.dragEnd);\n                } else if (this.isPosterElement(target)) {\n                    this.LGel.trigger(lGEvents.posterClick);\n                }\n\n                // Prevent execution on click\n                if (isDraging) {\n                    isDraging = false;\n                    this.outer.removeClass('lg-grabbing').addClass('lg-grab');\n                }\n            });\n        }\n    }\n\n    triggerPosterClick(): void {\n        this.$inner.on('click.lg', (event) => {\n            if (\n                !this.dragOrSwipeEnabled &&\n                this.isPosterElement($LG(event.target))\n            ) {\n                this.LGel.trigger(lGEvents.posterClick);\n            }\n        });\n    }\n\n    manageSwipeClass(): void {\n        let _touchNext = this.index + 1;\n        let _touchPrev = this.index - 1;\n        if (this.settings.loop && this.galleryItems.length > 2) {\n            if (this.index === 0) {\n                _touchPrev = this.galleryItems.length - 1;\n            } else if (this.index === this.galleryItems.length - 1) {\n                _touchNext = 0;\n            }\n        }\n\n        this.outer.find('.lg-item').removeClass('lg-next-slide lg-prev-slide');\n        if (_touchPrev > -1) {\n            this.getSlideItem(_touchPrev).addClass('lg-prev-slide');\n        }\n\n        this.getSlideItem(_touchNext).addClass('lg-next-slide');\n    }\n\n    /**\n     * Go to next slide\n     * @param {Boolean} fromTouch - true if slide function called via touch event\n     * @category lGPublicMethods\n     * @example\n     *  const plugin = lightGallery();\n     *  plugin.goToNextSlide();\n     * @see <a href=\"/demos/methods/\">Demo</a>\n     */\n    goToNextSlide(fromTouch?: boolean): void {\n        let _loop = this.settings.loop;\n        if (fromTouch && this.galleryItems.length < 3) {\n            _loop = false;\n        }\n\n        if (!this.lgBusy) {\n            if (this.index + 1 < this.galleryItems.length) {\n                this.index++;\n                this.LGel.trigger(lGEvents.beforeNextSlide, {\n                    index: this.index,\n                });\n                this.slide(this.index, !!fromTouch, false, 'next');\n            } else {\n                if (_loop) {\n                    this.index = 0;\n                    this.LGel.trigger(lGEvents.beforeNextSlide, {\n                        index: this.index,\n                    });\n                    this.slide(this.index, !!fromTouch, false, 'next');\n                } else if (this.settings.slideEndAnimation && !fromTouch) {\n                    this.outer.addClass('lg-right-end');\n                    setTimeout(() => {\n                        this.outer.removeClass('lg-right-end');\n                    }, 400);\n                }\n            }\n        }\n    }\n\n    /**\n     * Go to previous slides\n     * @param {Boolean} fromTouch - true if slide function called via touch event\n     * @category lGPublicMethods\n     * @example\n     *  const plugin = lightGallery({});\n     *  plugin.goToPrevSlide();\n     * @see <a href=\"/demos/methods/\">Demo</a>\n     *\n     */\n    goToPrevSlide(fromTouch?: boolean): void {\n        let _loop = this.settings.loop;\n        if (fromTouch && this.galleryItems.length < 3) {\n            _loop = false;\n        }\n\n        if (!this.lgBusy) {\n            if (this.index > 0) {\n                this.index--;\n                this.LGel.trigger(lGEvents.beforePrevSlide, {\n                    index: this.index,\n                    fromTouch,\n                });\n                this.slide(this.index, !!fromTouch, false, 'prev');\n            } else {\n                if (_loop) {\n                    this.index = this.galleryItems.length - 1;\n                    this.LGel.trigger(lGEvents.beforePrevSlide, {\n                        index: this.index,\n                        fromTouch,\n                    });\n                    this.slide(this.index, !!fromTouch, false, 'prev');\n                } else if (this.settings.slideEndAnimation && !fromTouch) {\n                    this.outer.addClass('lg-left-end');\n                    setTimeout(() => {\n                        this.outer.removeClass('lg-left-end');\n                    }, 400);\n                }\n            }\n        }\n    }\n\n    keyPress(): void {\n        $LG(window).on(`keydown.lg.global${this.lgId}`, (e) => {\n            if (\n                this.lgOpened &&\n                this.settings.escKey === true &&\n                e.keyCode === 27\n            ) {\n                e.preventDefault();\n                if (\n                    this.settings.allowMediaOverlap &&\n                    this.outer.hasClass('lg-can-toggle') &&\n                    this.outer.hasClass('lg-components-open')\n                ) {\n                    this.outer.removeClass('lg-components-open');\n                } else {\n                    this.closeGallery();\n                }\n            }\n            if (this.lgOpened && this.galleryItems.length > 1) {\n                if (e.keyCode === 37) {\n                    e.preventDefault();\n                    this.goToPrevSlide();\n                }\n\n                if (e.keyCode === 39) {\n                    e.preventDefault();\n                    this.goToNextSlide();\n                }\n            }\n        });\n    }\n\n    arrow(): void {\n        this.getElementById('lg-prev').on('click.lg', () => {\n            this.goToPrevSlide();\n        });\n        this.getElementById('lg-next').on('click.lg', () => {\n            this.goToNextSlide();\n        });\n    }\n\n    arrowDisable(index: number): void {\n        // Disable arrows if settings.hideControlOnEnd is true\n        if (!this.settings.loop && this.settings.hideControlOnEnd) {\n            const $prev = this.getElementById('lg-prev');\n            const $next = this.getElementById('lg-next');\n            if (index + 1 === this.galleryItems.length) {\n                $next.attr('disabled', 'disabled').addClass('disabled');\n            } else {\n                $next.removeAttr('disabled').removeClass('disabled');\n            }\n\n            if (index === 0) {\n                $prev.attr('disabled', 'disabled').addClass('disabled');\n            } else {\n                $prev.removeAttr('disabled').removeClass('disabled');\n            }\n        }\n    }\n\n    setTranslate(\n        $el: lgQuery,\n        xValue: number,\n        yValue: number,\n        scaleX = 1,\n        scaleY = 1,\n    ): void {\n        $el.css(\n            'transform',\n            'translate3d(' +\n                xValue +\n                'px, ' +\n                yValue +\n                'px, 0px) scale3d(' +\n                scaleX +\n                ', ' +\n                scaleY +\n                ', 1)',\n        );\n    }\n\n    mousewheel(): void {\n        let lastCall = 0;\n        this.outer.on('wheel.lg', (e) => {\n            if (!e.deltaY || this.galleryItems.length < 2) {\n                return;\n            }\n            e.preventDefault();\n            const now = new Date().getTime();\n            if (now - lastCall < 1000) {\n                return;\n            }\n            lastCall = now;\n            if (e.deltaY > 0) {\n                this.goToNextSlide();\n            } else if (e.deltaY < 0) {\n                this.goToPrevSlide();\n            }\n        });\n    }\n\n    isSlideElement(target: lgQuery): boolean {\n        return (\n            target.hasClass('lg-outer') ||\n            target.hasClass('lg-item') ||\n            target.hasClass('lg-img-wrap')\n        );\n    }\n\n    isPosterElement(target: lgQuery): boolean {\n        const playButton = this.getSlideItem(this.index)\n            .find('.lg-video-play-button')\n            .get();\n        return (\n            target.hasClass('lg-video-poster') ||\n            target.hasClass('lg-video-play-button') ||\n            (playButton && playButton.contains(target.get()))\n        );\n    }\n\n    /**\n     * Maximize minimize inline gallery.\n     * @category lGPublicMethods\n     */\n    toggleMaximize(): void {\n        this.getElementById('lg-maximize').on('click.lg', () => {\n            this.$container.toggleClass('lg-inline');\n            this.refreshOnResize();\n        });\n    }\n\n    invalidateItems(): void {\n        for (let index = 0; index < this.items.length; index++) {\n            const element = this.items[index];\n            const $element = $LG(element);\n            $element.off(`click.lgcustom-item-${$element.attr('data-lg-id')}`);\n        }\n    }\n\n    trapFocus(): void {\n        this.$container.get().focus({\n            preventScroll: true,\n        });\n        $LG(window).on(`keydown.lg.global${this.lgId}`, (e) => {\n            if (!this.lgOpened) {\n                return;\n            }\n\n            const isTabPressed = e.key === 'Tab' || e.keyCode === 9;\n            if (!isTabPressed) {\n                return;\n            }\n            const focusableEls = utils.getFocusableElements(\n                this.$container.get(),\n            );\n            const firstFocusableEl = focusableEls[0];\n            const lastFocusableEl = focusableEls[focusableEls.length - 1];\n\n            if (e.shiftKey) {\n                if (document.activeElement === firstFocusableEl) {\n                    (lastFocusableEl as HTMLElement).focus();\n                    e.preventDefault();\n                }\n            } else {\n                if (document.activeElement === lastFocusableEl) {\n                    (firstFocusableEl as HTMLElement).focus();\n                    e.preventDefault();\n                }\n            }\n        });\n    }\n\n    manageCloseGallery(): void {\n        if (!this.settings.closable) return;\n        let mousedown = false;\n        this.getElementById('lg-close').on('click.lg', () => {\n            this.closeGallery();\n        });\n\n        if (this.settings.closeOnTap) {\n            // If you drag the slide and release outside gallery gets close on chrome\n            // for preventing this check mousedown and mouseup happened on .lg-item or lg-outer\n            this.outer.on('mousedown.lg', (e) => {\n                const target = $LG(e.target);\n                if (this.isSlideElement(target)) {\n                    mousedown = true;\n                } else {\n                    mousedown = false;\n                }\n            });\n\n            this.outer.on('mousemove.lg', () => {\n                mousedown = false;\n            });\n\n            this.outer.on('mouseup.lg', (e) => {\n                const target = $LG(e.target);\n                if (this.isSlideElement(target) && mousedown) {\n                    if (!this.outer.hasClass('lg-dragging')) {\n                        this.closeGallery();\n                    }\n                }\n            });\n        }\n    }\n\n    /**\n     * Close lightGallery if it is opened.\n     *\n     * @description If closable is false in the settings, you need to pass true via closeGallery method to force close gallery\n     * @return returns the estimated time to close gallery completely including the close animation duration\n     * @category lGPublicMethods\n     * @example\n     *  const plugin = lightGallery();\n     *  plugin.closeGallery();\n     *\n     */\n    closeGallery(force?: boolean): number {\n        if (!this.lgOpened || (!this.settings.closable && !force)) {\n            return 0;\n        }\n        this.LGel.trigger(lGEvents.beforeClose);\n\n        if (this.settings.resetScrollPosition && !this.settings.hideScrollbar) {\n            $LG(window).scrollTop(this.prevScrollTop);\n        }\n\n        const currentItem = this.items[this.index];\n        let transform: string | undefined;\n        if (this.zoomFromOrigin && currentItem) {\n            const { top, bottom } = this.mediaContainerPosition;\n            const { __slideVideoInfo, poster } = this.galleryItems[this.index];\n            const imageSize = utils.getSize(\n                currentItem,\n                this.outer,\n                top + bottom,\n                __slideVideoInfo && poster && this.settings.videoMaxSize,\n            );\n            transform = utils.getTransform(\n                currentItem,\n                this.outer,\n                top,\n                bottom,\n                imageSize,\n            );\n        }\n        if (this.zoomFromOrigin && transform) {\n            this.outer.addClass('lg-closing lg-zoom-from-image');\n            this.getSlideItem(this.index)\n                .addClass('lg-start-end-progress')\n                .css(\n                    'transition-duration',\n                    this.settings.startAnimationDuration + 'ms',\n                )\n                .css('transform', transform);\n        } else {\n            this.outer.addClass('lg-hide-items');\n            // lg-zoom-from-image is used for setting the opacity to 1 if zoomFromOrigin is true\n            // If the closing item doesn't have the lg-size attribute, remove this class to avoid the closing css conflicts\n            this.outer.removeClass('lg-zoom-from-image');\n        }\n\n        // Unbind all events added by lightGallery\n        // @todo\n        //this.$el.off('.lg.tm');\n\n        this.destroyModules();\n\n        this.lGalleryOn = false;\n        this.isDummyImageRemoved = false;\n        this.zoomFromOrigin = this.settings.zoomFromOrigin;\n\n        clearTimeout(this.hideBarTimeout);\n        this.hideBarTimeout = false;\n        $LG('html').removeClass('lg-on');\n\n        this.outer.removeClass('lg-visible lg-components-open');\n\n        // Resetting opacity to 0 isd required as  vertical swipe to close function adds inline opacity.\n        this.$backdrop.removeClass('in').css('opacity', 0);\n\n        const removeTimeout =\n            this.zoomFromOrigin && transform\n                ? Math.max(\n                      this.settings.startAnimationDuration,\n                      this.settings.backdropDuration,\n                  )\n                : this.settings.backdropDuration;\n        this.$container.removeClass('lg-show-in');\n\n        // Once the closign animation is completed and gallery is invisible\n        setTimeout(() => {\n            if (this.zoomFromOrigin && transform) {\n                this.outer.removeClass('lg-zoom-from-image');\n            }\n            this.$container.removeClass('lg-show');\n\n            // Reset scrollbar\n            this.resetScrollBar();\n\n            // Need to remove inline opacity as it is used in the stylesheet as well\n            this.$backdrop\n                .removeAttr('style')\n                .css(\n                    'transition-duration',\n                    this.settings.backdropDuration + 'ms',\n                );\n\n            this.outer.removeClass(`lg-closing ${this.settings.startClass}`);\n\n            this.getSlideItem(this.index).removeClass('lg-start-end-progress');\n            this.$inner.empty();\n            if (this.lgOpened) {\n                this.LGel.trigger(lGEvents.afterClose, {\n                    instance: this,\n                });\n            }\n            if (this.$container.get()) {\n                this.$container.get().blur();\n            }\n\n            this.lgOpened = false;\n        }, removeTimeout + 100);\n        return removeTimeout + 100;\n    }\n\n    initModules(): void {\n        this.plugins.forEach((module) => {\n            try {\n                module.init();\n            } catch (err) {\n                console.warn(\n                    `lightGallery:- make sure lightGallery module is properly initiated`,\n                );\n            }\n        });\n    }\n\n    destroyModules(destroy?: true): void {\n        this.plugins.forEach((module) => {\n            try {\n                if (destroy) {\n                    module.destroy();\n                } else {\n                    module.closeGallery && module.closeGallery();\n                }\n            } catch (err) {\n                console.warn(\n                    `lightGallery:- make sure lightGallery module is properly destroyed`,\n                );\n            }\n        });\n    }\n\n    /**\n     * Refresh lightGallery with new set of children.\n     *\n     * @description This is useful to update the gallery when the child elements are changed without calling destroy method.\n     *\n     * If you are using dynamic mode, you can pass the modified array of dynamicEl as the first parameter to refresh the dynamic gallery\n     * @see <a href=\"/demos/dynamic-mode/\">Demo</a>\n     * @category lGPublicMethods\n     * @example\n     *  const plugin = lightGallery();\n     *  // Delete or add children, then call\n     *  plugin.refresh();\n     *\n     */\n    refresh(galleryItems?: GalleryItem[]): void {\n        if (!this.settings.dynamic) {\n            this.invalidateItems();\n        }\n        if (galleryItems) {\n            this.galleryItems = galleryItems;\n        } else {\n            this.galleryItems = this.getItems();\n        }\n        this.updateControls();\n        this.openGalleryOnItemClick();\n        this.LGel.trigger(lGEvents.updateSlides);\n    }\n\n    updateControls(): void {\n        this.addSlideVideoInfo(this.galleryItems);\n        this.updateCounterTotal();\n        this.manageSingleSlideClassName();\n    }\n\n    private destroyGallery(): void {\n        this.destroyModules(true);\n        if (!this.settings.dynamic) {\n            this.invalidateItems();\n        }\n        $LG(window).off(`.lg.global${this.lgId}`);\n        this.LGel.off('.lg');\n        this.$container.remove();\n    }\n\n    /**\n     * Destroy lightGallery.\n     * Destroy lightGallery and its plugin instances completely\n     *\n     * @description This method also calls CloseGallery function internally. Returns the time takes to completely close and destroy the instance.\n     * In case if you want to re-initialize lightGallery right after destroying it, initialize it only once the destroy process is completed.\n     * You can use refresh method most of the times.\n     * @category lGPublicMethods\n     * @example\n     *  const plugin = lightGallery();\n     *  plugin.destroy();\n     *\n     */\n    destroy(): number {\n        const closeTimeout = this.closeGallery(true);\n        if (closeTimeout) {\n            setTimeout(this.destroyGallery.bind(this), closeTimeout);\n        } else {\n            this.destroyGallery();\n        }\n        return closeTimeout;\n    }\n}\n","import { LightGallerySettings } from './lg-settings';\nimport { LightGallery } from './lightgallery';\n\nfunction lightGallery(\n    el: HTMLElement,\n    options?: LightGallerySettings,\n): LightGallery {\n    return new LightGallery(el, options);\n}\nexport default lightGallery;\n","interface ThumbnailStrings {\n    toggleThumbnails: string;\n}\n\nexport interface ThumbnailsSettings {\n    /**\n     * Enable thumbnails for the gallery\n     */\n    thumbnail: boolean;\n\n    /*\n     * Enable thumbnail animation.\n     */\n    animateThumb: boolean;\n\n    /**\n     * Position of selected thumbnail.\n     */\n    currentPagerPosition: 'left' | 'middle' | 'right';\n\n    /**\n     * Position of thumbnails when the width of all thumbnails combined is less than the gallery's width.\n     *\n     */\n    alignThumbnails: 'left' | 'middle' | 'right';\n\n    /**\n     * Width of each thumbnails.\n     */\n    thumbWidth: number;\n\n    /**\n     * Height of each thumbnails.\n     */\n    thumbHeight: string;\n\n    /**\n     * Spacing between each thumbnails\n     */\n    thumbMargin: number;\n\n    /**\n     * control where the thumbnails should be appended.\n     * By default, thumbnails are appended to '.lg-components' which has inbuilt open close transitions\n     * If you don't want initial thumbnails transitions, or want to do more customization,\n     * you can append thumbnails to the lightGalley outer div -\n     * <a href=\"/demos/thumbnails/#static-thumbnails\">Demo</a>\n     */\n    appendThumbnailsTo: '.lg-outer' | '.lg-components';\n\n    /**\n     * Enable toggle captions and thumbnails.\n     * @description not applicable if allowMediaOverlap is false\n     */\n    toggleThumb: boolean;\n\n    /**\n     * Enables desktop mouse drag support for thumbnails.\n     */\n    enableThumbDrag: boolean;\n\n    /**\n     * Enables thumbnail touch/swipe support for touch devices\n     */\n    enableThumbSwipe: boolean;\n\n    /**\n     * By setting the thumbnailSwipeThreshold (in px) you can set how far the user must swipe for the next/prev slide.\n     */\n    thumbnailSwipeThreshold: number;\n\n    /**\n     * You can automatically load thumbnails for YouTube videos from YouTube by setting loadYouTubeThumbnail true\n     */\n    loadYouTubeThumbnail: boolean;\n\n    /**\n     * You can specify the thumbnail size by setting respective number.\n     */\n    //@todo add demo\n    youTubeThumbSize: number;\n\n    /**\n     * Custom translation strings for aria-labels\n     */\n    thumbnailPluginStrings: ThumbnailStrings;\n}\n\nexport const thumbnailsSettings: ThumbnailsSettings = {\n    thumbnail: true,\n\n    animateThumb: true,\n    currentPagerPosition: 'middle',\n    alignThumbnails: 'middle',\n\n    thumbWidth: 100,\n    thumbHeight: '80px',\n    thumbMargin: 5,\n\n    appendThumbnailsTo: '.lg-components',\n    toggleThumb: false,\n\n    enableThumbDrag: true,\n    enableThumbSwipe: true,\n    thumbnailSwipeThreshold: 10,\n\n    loadYouTubeThumbnail: true,\n    youTubeThumbSize: 1,\n\n    thumbnailPluginStrings: {\n        toggleThumbnails: 'Toggle thumbnails',\n    } as ThumbnailStrings,\n};\n","import { LightGallery } from './lightgallery';\nimport { VideoSource } from './plugins/video/types';\n\n/**\n * List of lightGallery events\n * All events should be documented here\n * Below interfaces are used to build the website documentations\n * */\nexport const lGEvents: {\n    [key: string]: string;\n} = {\n    afterAppendSlide: 'lgAfterAppendSlide',\n    init: 'lgInit',\n    hasVideo: 'lgHasVideo',\n    containerResize: 'lgContainerResize',\n    updateSlides: 'lgUpdateSlides',\n    afterAppendSubHtml: 'lgAfterAppendSubHtml',\n    beforeOpen: 'lgBeforeOpen',\n    afterOpen: 'lgAfterOpen',\n    slideItemLoad: 'lgSlideItemLoad',\n    beforeSlide: 'lgBeforeSlide',\n    afterSlide: 'lgAfterSlide',\n    posterClick: 'lgPosterClick',\n    dragStart: 'lgDragStart',\n    dragMove: 'lgDragMove',\n    dragEnd: 'lgDragEnd',\n    beforeNextSlide: 'lgBeforeNextSlide',\n    beforePrevSlide: 'lgBeforePrevSlide',\n    beforeClose: 'lgBeforeClose',\n    afterClose: 'lgAfterClose',\n    rotateLeft: 'lgRotateLeft',\n    rotateRight: 'lgRotateRight',\n    flipHorizontal: 'lgFlipHorizontal',\n    flipVertical: 'lgFlipVertical',\n    autoplay: 'lgAutoplay',\n    autoplayStart: 'lgAutoplayStart',\n    autoplayStop: 'lgAutoplayStop',\n};\n\n// Follow the below format for the event documentation\n// @method is the method name when event is used with Angular/React components\n\n/**\n * Fired only once when lightGallery is initialized\n * @name lgInit\n * @method onInit\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action on lightGallery initialization.\n *   // Init event returns the plugin instance that can be used to call any lightGalley public method\n *   let pluginInstance = null;\n *   lg.addEventListener('lgInit', (event) => {\n *      pluginInstance = event.detail.instance;\n *   });\n *   lightGallery(lg);\n * @see <a href=\"/docs/methods\">Methods<a>\n */\nexport interface InitDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired when the slide content has been inserted into it's slide container.\n * @name lgAfterAppendSlide\n * @method onAfterAppendSlide\n */\nexport interface AfterAppendSlideEventDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired immediately before opening the gallery\n * @name lgBeforeOpen\n * @method onBeforeOpen\n */\nexport interface BeforeOpenDetail {}\n\n/**\n * Fired immediately after opening the gallery\n * @name lgAfterOpen\n * @method onAfterOpen\n */\nexport interface AfterOpenDetail {}\n\n/**\n * Fired once the media inside the slide has been completely loaded .\n * @name lgSlideItemLoad\n * @method onSlideItemLoad\n */\nexport interface SlideItemLoadDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * For the first slide, lightGallery adds some delay for displaying the loaded slide item.\n     * This delay is required for the transition effect when the slide item is displayed\n     * Respect the delay when you use this event\n     */\n    delay: number;\n\n    // Will be true for the first slide\n    isFirstSlide: boolean;\n}\n\n/**\n * Fired immediately before each slide transition.\n * @name lgBeforeSlide\n * @method onBeforeSlide\n * @example\n *   const lg = document.getElementById('custom-events-demo');\n *   // Perform any action before each slide transition\n *   lg.addEventListener('lgBeforeSlide', (event) => {\n *       const { index, prevIndex } = event.detail;\n *       alert(index, prevIndex);\n *   });\n *   lightGallery(lg);\n */\nexport interface BeforeSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired immediately after each slide transition.\n * @name lgAfterSlide\n * @method onAfterSlide\n */\nexport interface AfterSlideDetail {\n    /**\n     * Index of the previous slide\n     */\n    prevIndex: number;\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n    /**\n     * true if slide function called via thumbnail click\n     */\n    fromThumb: boolean;\n}\n\n/**\n * Fired when the video poster is clicked.\n * @name lgPosterClick\n * @method onPosterClick\n */\nexport interface PosterClickDetail {}\n\n/**\n * Fired when the drag event to move to different slide starts.\n * @name lgDragStart\n * @method onDragStart\n */\nexport interface DragStartDetail {}\n\n/**\n * Fired periodically during the drag operation.\n * @name lgDragMove\n * @method onDragMove\n */\nexport interface DragMoveDetail {}\n\n/**\n * Fired when the user has finished the drag operation\n * @name lgDragEnd\n * @method onDragEnd\n */\nexport interface DragEndDetail {}\n\n/**\n * Fired immediately before the start of the close process.\n * @name lgBeforeClose\n * @method onBeforeClose\n */\nexport interface BeforeCloseDetail {}\n\n/**\n * Fired immediately once lightGallery is closed.\n * @name lgAfterClose\n * @method onAfterClose\n */\nexport interface AfterCloseDetail {\n    /**\n     * lightGallery plugin instance\n     */\n    instance: LightGallery;\n}\n\n/**\n * Fired immediately before each \"next\" slide transition\n * @name lgBeforeNextSlide\n * @method onBeforeNextSlide\n */\nexport interface BeforeNextSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired immediately before each \"prev\" slide transition\n * @name lgBeforePrevSlide\n * @method onBeforePrevSlide\n */\nexport interface BeforePrevSlideDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n    /**\n     * true if slide function called via touch event or mouse drag\n     */\n    fromTouch: boolean;\n}\n\n/**\n * Fired when the sub-html content (ex : title/ description) has been appended into the slide.\n * @name lgAfterAppendSubHtml\n * @method onAfterAppendSubHtml\n */\nexport interface AfterAppendSubHtmlDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the lightGallery container has been resized.\n * @name lgContainerResize\n * @method onContainerResize\n */\nexport interface ContainerResizeDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when lightGallery detects video slide\n * @name lgHasVideo\n * @method onHasVideo\n */\nexport interface HasVideoDetail {\n    /**\n     * Index of the slide,\n     */\n    index: number;\n    /**\n     * Video source\n     */\n    src: string;\n    /**\n     * HTML5 video source if available\n     * <p>\n       HTML5 video source = source: {\n            src: string;\n            type: string;\n        }[];\n        attributes: HTMLVideoElement;\n     * </p>\n     */\n    html5Video: VideoSource;\n    /**\n     * True if video has poster\n     */\n    hasPoster: boolean;\n}\n\n/**\n * Fired when the image is rotated in anticlockwise direction\n * @name lgRotateLeft\n * @method onRotateLeft\n */\nexport interface RotateLeftDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is rotated in clockwise direction\n * @name lgRotateRight\n * @method onRotateRight\n */\nexport interface RotateRightDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is flipped horizontally\n * @name lgFlipHorizontal\n * @method onFlipHorizontal\n */\nexport interface FlipHorizontalDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n\n/**\n * Fired when the image is flipped vertically\n * @name lgFlipVertical\n * @method onFlipVertical\n */\nexport interface FlipVerticalDetail {\n    /**\n     * Index of the slide\n     */\n    index: number;\n}\n","import {\n    ThumbnailsSettings,\n    thumbnailsSettings,\n} from './lg-thumbnail-settings';\nimport { LgQuery, lgQuery } from '../../lgQuery';\nimport { LightGallery } from '../../lightgallery';\nimport { GalleryItem } from '../../lg-utils';\nimport { lGEvents } from '../../lg-events';\n\ninterface ThumbDragUtils {\n    cords: {\n        startX: number;\n        endX: number;\n    };\n    isMoved: boolean;\n    newTranslateX: number;\n    startTime: Date;\n    endTime: Date;\n    touchMoveTime: number;\n}\ninterface ThumbnailGalleryItem extends GalleryItem {\n    thumb: string;\n}\nexport default class Thumbnail {\n    private core: LightGallery;\n    private $thumbOuter!: lgQuery;\n    private $lgThumb!: lgQuery;\n    private thumbOuterWidth = 0;\n    private thumbTotalWidth = 0;\n    private translateX = 0;\n    private thumbClickable = false;\n    private settings!: ThumbnailsSettings;\n    private $LG!: LgQuery;\n    constructor(instance: LightGallery, $LG: LgQuery) {\n        // get lightGallery core plugin instance\n        this.core = instance;\n        this.$LG = $LG;\n\n        return this;\n    }\n\n    init(): void {\n        // extend module default settings with lightGallery core settings\n        this.settings = {\n            ...thumbnailsSettings,\n            ...this.core.settings,\n        };\n        this.thumbOuterWidth = 0;\n        this.thumbTotalWidth =\n            this.core.galleryItems.length *\n            (this.settings.thumbWidth + this.settings.thumbMargin);\n\n        // Thumbnail animation value\n        this.translateX = 0;\n\n        this.setAnimateThumbStyles();\n\n        if (!this.core.settings.allowMediaOverlap) {\n            this.settings.toggleThumb = false;\n        }\n\n        if (this.settings.thumbnail) {\n            this.build();\n            if (this.settings.animateThumb) {\n                if (this.settings.enableThumbDrag) {\n                    this.enableThumbDrag();\n                }\n\n                if (this.settings.enableThumbSwipe) {\n                    this.enableThumbSwipe();\n                }\n\n                this.thumbClickable = false;\n            } else {\n                this.thumbClickable = true;\n            }\n\n            this.toggleThumbBar();\n            this.thumbKeyPress();\n        }\n    }\n\n    build(): void {\n        this.setThumbMarkup();\n        this.manageActiveClassOnSlideChange();\n        this.$lgThumb.first().on('click.lg touchend.lg', (e: CustomEvent) => {\n            const $target = this.$LG(e.target);\n            if (!$target.hasAttribute('data-lg-item-id')) {\n                return;\n            }\n            setTimeout(() => {\n                // In IE9 and bellow touch does not support\n                // Go to slide if browser does not support css transitions\n                if (this.thumbClickable && !this.core.lgBusy) {\n                    const index = parseInt($target.attr('data-lg-item-id'));\n                    this.core.slide(index, false, true, false);\n                }\n            }, 50);\n        });\n\n        this.core.LGel.on(`${lGEvents.beforeSlide}.thumb`, (event) => {\n            const { index } = event.detail;\n            this.animateThumb(index);\n        });\n        this.core.LGel.on(`${lGEvents.beforeOpen}.thumb`, () => {\n            this.thumbOuterWidth = this.core.outer.get().offsetWidth;\n        });\n\n        this.core.LGel.on(`${lGEvents.updateSlides}.thumb`, () => {\n            this.rebuildThumbnails();\n        });\n        this.core.LGel.on(`${lGEvents.containerResize}.thumb`, () => {\n            if (!this.core.lgOpened) return;\n            setTimeout(() => {\n                this.thumbOuterWidth = this.core.outer.get().offsetWidth;\n                this.animateThumb(this.core.index);\n                this.thumbOuterWidth = this.core.outer.get().offsetWidth;\n            }, 50);\n        });\n    }\n\n    setThumbMarkup(): void {\n        let thumbOuterClassNames = 'lg-thumb-outer ';\n\n        if (this.settings.alignThumbnails) {\n            thumbOuterClassNames += `lg-thumb-align-${this.settings.alignThumbnails}`;\n        }\n\n        const html = `<div class=\"${thumbOuterClassNames}\">\n        <div class=\"lg-thumb lg-group\">\n        </div>\n        </div>`;\n\n        this.core.outer.addClass('lg-has-thumb');\n\n        if (this.settings.appendThumbnailsTo === '.lg-components') {\n            this.core.$lgComponents.append(html);\n        } else {\n            this.core.outer.append(html);\n        }\n\n        this.$thumbOuter = this.core.outer.find('.lg-thumb-outer').first();\n        this.$lgThumb = this.core.outer.find('.lg-thumb').first();\n\n        if (this.settings.animateThumb) {\n            this.core.outer\n                .find('.lg-thumb')\n                .css('transition-duration', this.core.settings.speed + 'ms')\n                .css('width', this.thumbTotalWidth + 'px')\n                .css('position', 'relative');\n        }\n\n        this.setThumbItemHtml(\n            (this.core.galleryItems as unknown) as ThumbnailGalleryItem[],\n        );\n    }\n\n    enableThumbDrag(): void {\n        let thumbDragUtils: ThumbDragUtils = {\n            cords: {\n                startX: 0,\n                endX: 0,\n            },\n            isMoved: false,\n            newTranslateX: 0,\n            startTime: new Date(),\n            endTime: new Date(),\n            touchMoveTime: 0,\n        };\n\n        let isDragging = false;\n\n        this.$thumbOuter.addClass('lg-grab');\n\n        this.core.outer\n            .find('.lg-thumb')\n            .first()\n            .on('mousedown.lg.thumb', (e) => {\n                if (this.thumbTotalWidth > this.thumbOuterWidth) {\n                    // execute only on .lg-object\n                    e.preventDefault();\n                    thumbDragUtils.cords.startX = e.pageX;\n\n                    thumbDragUtils.startTime = new Date();\n                    this.thumbClickable = false;\n\n                    isDragging = true;\n\n                    // ** Fix for webkit cursor issue https://code.google.com/p/chromium/issues/detail?id=26723\n                    this.core.outer.get().scrollLeft += 1;\n                    this.core.outer.get().scrollLeft -= 1;\n\n                    // *\n                    this.$thumbOuter\n                        .removeClass('lg-grab')\n                        .addClass('lg-grabbing');\n                }\n            });\n\n        this.$LG(window).on(\n            `mousemove.lg.thumb.global${this.core.lgId}`,\n            (e) => {\n                if (!this.core.lgOpened) return;\n                if (isDragging) {\n                    thumbDragUtils.cords.endX = e.pageX;\n\n                    thumbDragUtils = this.onThumbTouchMove(thumbDragUtils);\n                }\n            },\n        );\n\n        this.$LG(window).on(`mouseup.lg.thumb.global${this.core.lgId}`, () => {\n            if (!this.core.lgOpened) return;\n            if (thumbDragUtils.isMoved) {\n                thumbDragUtils = this.onThumbTouchEnd(thumbDragUtils);\n            } else {\n                this.thumbClickable = true;\n            }\n\n            if (isDragging) {\n                isDragging = false;\n                this.$thumbOuter.removeClass('lg-grabbing').addClass('lg-grab');\n            }\n        });\n    }\n\n    enableThumbSwipe(): void {\n        let thumbDragUtils: ThumbDragUtils = {\n            cords: {\n                startX: 0,\n                endX: 0,\n            },\n            isMoved: false,\n            newTranslateX: 0,\n            startTime: new Date(),\n            endTime: new Date(),\n            touchMoveTime: 0,\n        };\n\n        this.$lgThumb.on('touchstart.lg', (e: TouchEvent) => {\n            if (this.thumbTotalWidth > this.thumbOuterWidth) {\n                e.preventDefault();\n                thumbDragUtils.cords.startX = e.targetTouches[0].pageX;\n                this.thumbClickable = false;\n                thumbDragUtils.startTime = new Date();\n            }\n        });\n\n        this.$lgThumb.on('touchmove.lg', (e: TouchEvent) => {\n            if (this.thumbTotalWidth > this.thumbOuterWidth) {\n                e.preventDefault();\n                thumbDragUtils.cords.endX = e.targetTouches[0].pageX;\n                thumbDragUtils = this.onThumbTouchMove(thumbDragUtils);\n            }\n        });\n\n        this.$lgThumb.on('touchend.lg', () => {\n            if (thumbDragUtils.isMoved) {\n                thumbDragUtils = this.onThumbTouchEnd(thumbDragUtils);\n            } else {\n                this.thumbClickable = true;\n            }\n        });\n    }\n\n    // Rebuild thumbnails\n    rebuildThumbnails(): void {\n        // Remove transitions\n        this.$thumbOuter.addClass('lg-rebuilding-thumbnails');\n        setTimeout(() => {\n            this.thumbTotalWidth =\n                this.core.galleryItems.length *\n                (this.settings.thumbWidth + this.settings.thumbMargin);\n            this.$lgThumb.css('width', this.thumbTotalWidth + 'px');\n            this.$lgThumb.empty();\n            this.setThumbItemHtml(\n                (this.core.galleryItems as unknown) as ThumbnailGalleryItem[],\n            );\n            this.animateThumb(this.core.index);\n        }, 50);\n        setTimeout(() => {\n            this.$thumbOuter.removeClass('lg-rebuilding-thumbnails');\n        }, 200);\n    }\n\n    // @ts-check\n\n    setTranslate(value: number): void {\n        this.$lgThumb.css(\n            'transform',\n            'translate3d(-' + value + 'px, 0px, 0px)',\n        );\n    }\n\n    getPossibleTransformX(left: number): number {\n        if (left > this.thumbTotalWidth - this.thumbOuterWidth) {\n            left = this.thumbTotalWidth - this.thumbOuterWidth;\n        }\n\n        if (left < 0) {\n            left = 0;\n        }\n        return left;\n    }\n\n    animateThumb(index: number): void {\n        this.$lgThumb.css(\n            'transition-duration',\n            this.core.settings.speed + 'ms',\n        );\n        if (this.settings.animateThumb) {\n            let position = 0;\n            switch (this.settings.currentPagerPosition) {\n                case 'left':\n                    position = 0;\n                    break;\n                case 'middle':\n                    position =\n                        this.thumbOuterWidth / 2 - this.settings.thumbWidth / 2;\n                    break;\n                case 'right':\n                    position = this.thumbOuterWidth - this.settings.thumbWidth;\n            }\n            this.translateX =\n                (this.settings.thumbWidth + this.settings.thumbMargin) * index -\n                1 -\n                position;\n            if (this.translateX > this.thumbTotalWidth - this.thumbOuterWidth) {\n                this.translateX = this.thumbTotalWidth - this.thumbOuterWidth;\n            }\n\n            if (this.translateX < 0) {\n                this.translateX = 0;\n            }\n\n            this.setTranslate(this.translateX);\n        }\n    }\n\n    onThumbTouchMove(thumbDragUtils: ThumbDragUtils): ThumbDragUtils {\n        thumbDragUtils.newTranslateX = this.translateX;\n        thumbDragUtils.isMoved = true;\n\n        thumbDragUtils.touchMoveTime = new Date().valueOf();\n\n        thumbDragUtils.newTranslateX -=\n            thumbDragUtils.cords.endX - thumbDragUtils.cords.startX;\n\n        thumbDragUtils.newTranslateX = this.getPossibleTransformX(\n            thumbDragUtils.newTranslateX,\n        );\n\n        // move current slide\n        this.setTranslate(thumbDragUtils.newTranslateX);\n        this.$thumbOuter.addClass('lg-dragging');\n\n        return thumbDragUtils;\n    }\n\n    onThumbTouchEnd(thumbDragUtils: ThumbDragUtils): ThumbDragUtils {\n        thumbDragUtils.isMoved = false;\n        thumbDragUtils.endTime = new Date();\n        this.$thumbOuter.removeClass('lg-dragging');\n\n        const touchDuration =\n            thumbDragUtils.endTime.valueOf() -\n            thumbDragUtils.startTime.valueOf();\n        let distanceXnew =\n            thumbDragUtils.cords.endX - thumbDragUtils.cords.startX;\n        let speedX = Math.abs(distanceXnew) / touchDuration;\n        // Some magical numbers\n        // Can be improved\n        if (\n            speedX > 0.15 &&\n            thumbDragUtils.endTime.valueOf() - thumbDragUtils.touchMoveTime < 30\n        ) {\n            speedX += 1;\n\n            if (speedX > 2) {\n                speedX += 1;\n            }\n            speedX =\n                speedX +\n                speedX * (Math.abs(distanceXnew) / this.thumbOuterWidth);\n            this.$lgThumb.css(\n                'transition-duration',\n                Math.min(speedX - 1, 2) + 'settings',\n            );\n\n            distanceXnew = distanceXnew * speedX;\n\n            this.translateX = this.getPossibleTransformX(\n                this.translateX - distanceXnew,\n            );\n            this.setTranslate(this.translateX);\n        } else {\n            this.translateX = thumbDragUtils.newTranslateX;\n        }\n        if (\n            Math.abs(thumbDragUtils.cords.endX - thumbDragUtils.cords.startX) <\n            this.settings.thumbnailSwipeThreshold\n        ) {\n            this.thumbClickable = true;\n        }\n\n        return thumbDragUtils;\n    }\n\n    getThumbHtml(thumb: string, index: number, alt?: string): string {\n        const slideVideoInfo =\n            this.core.galleryItems[index].__slideVideoInfo || {};\n        let thumbImg;\n\n        if (slideVideoInfo.youtube) {\n            if (this.settings.loadYouTubeThumbnail) {\n                thumbImg =\n                    '//img.youtube.com/vi/' +\n                    slideVideoInfo.youtube[1] +\n                    '/' +\n                    this.settings.youTubeThumbSize +\n                    '.jpg';\n            } else {\n                thumbImg = thumb;\n            }\n        } else {\n            thumbImg = thumb;\n        }\n\n        const altAttr = alt ? 'alt=\"' + alt + '\"' : '';\n\n        return `<div data-lg-item-id=\"${index}\" class=\"lg-thumb-item ${\n            index === this.core.index ? ' active' : ''\n        }\"\n        style=\"width:${this.settings.thumbWidth}px; height: ${\n            this.settings.thumbHeight\n        };\n            margin-right: ${this.settings.thumbMargin}px;\">\n            <img ${altAttr} data-lg-item-id=\"${index}\" src=\"${thumbImg}\" />\n        </div>`;\n    }\n\n    getThumbItemHtml(items: ThumbnailGalleryItem[]): string {\n        let thumbList = '';\n        for (let i = 0; i < items.length; i++) {\n            thumbList += this.getThumbHtml(items[i].thumb, i, items[i].alt);\n        }\n\n        return thumbList;\n    }\n\n    setThumbItemHtml(items: ThumbnailGalleryItem[]): void {\n        const thumbList = this.getThumbItemHtml(items);\n        this.$lgThumb.html(thumbList);\n    }\n\n    setAnimateThumbStyles(): void {\n        if (this.settings.animateThumb) {\n            this.core.outer.addClass('lg-animate-thumb');\n        }\n    }\n\n    // Manage thumbnail active calss\n    manageActiveClassOnSlideChange(): void {\n        // manage active class for thumbnail\n        this.core.LGel.on(\n            `${lGEvents.beforeSlide}.thumb`,\n            (event: CustomEvent) => {\n                const $thumb = this.core.outer.find('.lg-thumb-item');\n                const { index } = event.detail;\n                $thumb.removeClass('active');\n                $thumb.eq(index).addClass('active');\n            },\n        );\n    }\n\n    // Toggle thumbnail bar\n    toggleThumbBar(): void {\n        if (this.settings.toggleThumb) {\n            this.core.outer.addClass('lg-can-toggle');\n            this.core.$toolbar.append(\n                '<button type=\"button\" aria-label=\"' +\n                    this.settings.thumbnailPluginStrings['toggleThumbnails'] +\n                    '\" class=\"lg-toggle-thumb lg-icon\"></button>',\n            );\n            this.core.outer\n                .find('.lg-toggle-thumb')\n                .first()\n                .on('click.lg', () => {\n                    this.core.outer.toggleClass('lg-components-open');\n                });\n        }\n    }\n\n    thumbKeyPress(): void {\n        this.$LG(window).on(`keydown.lg.thumb.global${this.core.lgId}`, (e) => {\n            if (!this.core.lgOpened || !this.settings.toggleThumb) return;\n\n            if (e.keyCode === 38) {\n                e.preventDefault();\n                this.core.outer.addClass('lg-components-open');\n            } else if (e.keyCode === 40) {\n                e.preventDefault();\n                this.core.outer.removeClass('lg-components-open');\n            }\n        });\n    }\n\n    destroy(): void {\n        if (this.settings.thumbnail) {\n            this.$LG(window).off(`.lg.thumb.global${this.core.lgId}`);\n            this.core.LGel.off('.lg.thumb');\n            this.core.LGel.off('.thumb');\n            this.$thumbOuter.remove();\n            this.core.outer.removeClass('lg-has-thumb');\n        }\n    }\n}\n","export interface ActualSizeIcons {\n    zoomIn: 'lg-zoom-in' | 'lg-actual-size';\n    zoomOut: 'lg-zoom-out' | 'lg-actual-size';\n}\n\nexport interface ZoomStrings {\n    zoomIn: string;\n    zoomOut: string;\n    viewActualSize: string;\n}\n\nexport interface ZoomSettings {\n    /**\n     * Value of zoom should be incremented/decremented\n     */\n    scale: number;\n\n    /**\n     * Enable/Disable zoom option\n     */\n    zoom: boolean;\n\n    /**\n     * Enable/Disable infinite zoom\n     * @description If you set this to true, you can zoom in more than the original size of the image.\n     */\n    infiniteZoom: boolean;\n\n    /**\n     * Enable actual size icon.\n     */\n    actualSize: boolean;\n\n    /**\n     * Once the slide transition is completed, how much time should take zoom plugin to activate\n     * @description Some css styles will be added to the images if zoom is enabled.\n     * So it might conflict if you add any custom styles to the images such as the initial transition while opening the gallery.\n     * So you can delay adding zoom related styles to the images by changing the value of enableZoomAfter.\n     */\n    enableZoomAfter: number;\n\n    /**\n     * Show zoom in, zoom out icons\n     */\n    showZoomInOutIcons: boolean;\n\n    /**\n     * Actual size icons classnames.\n     * Specify classnames for both ZoomIn and ZoomOut states\n     * You can use `actualSizeIcons: { zoomIn: 'lg-actual-size', zoomOut: 'lg-zoom-out' }`\n     * to show actual size icons instead of zoom in and zoom out icons.\n     */\n    actualSizeIcons: ActualSizeIcons;\n\n    /**\n     * Custom translation strings for aria-labels\n     */\n    zoomPluginStrings: ZoomStrings;\n}\n\nexport const zoomSettings: ZoomSettings = {\n    scale: 1,\n    zoom: true,\n    infiniteZoom: true,\n    actualSize: true,\n    showZoomInOutIcons: false,\n    actualSizeIcons: {\n        zoomIn: 'lg-zoom-in',\n        zoomOut: 'lg-zoom-out',\n    } as ActualSizeIcons,\n    enableZoomAfter: 300,\n    zoomPluginStrings: {\n        zoomIn: 'Zoom in',\n        zoomOut: 'Zoom out',\n        viewActualSize: 'View actual size',\n    } as ZoomStrings,\n};\n","import { ZoomSettings, zoomSettings } from './lg-zoom-settings';\nimport { LgQuery, lgQuery } from '../../lgQuery';\nimport { LightGallery } from '../../lightgallery';\nimport { lGEvents } from '../../lg-events';\n\ninterface Coords {\n    x: number;\n    y: number;\n}\n\ninterface DragAllowedAxises {\n    allowX: boolean;\n    allowY: boolean;\n}\ninterface ZoomTouchEvent {\n    pageX: number;\n    touches: { pageY: number; pageX: number }[];\n    pageY: number;\n}\ninterface PossibleCords {\n    minX: number;\n    minY: number;\n    maxX: number;\n    maxY: number;\n}\n\nconst ZOOM_TRANSITION_DURATION = 500;\n\nexport default class Zoom {\n    private core: LightGallery;\n    private settings: ZoomSettings;\n    private $LG!: LgQuery;\n    private imageReset!: number | boolean;\n    zoomableTimeout: any;\n    positionChanged!: boolean;\n    zoomInProgress!: boolean;\n    pageX!: number;\n    pageY!: number;\n    scale!: number;\n\n    containerRect!: ClientRect;\n    dragAllowedAxises!: DragAllowedAxises;\n    top!: number;\n    left!: number;\n    scrollTop!: number;\n    constructor(instance: LightGallery, $LG: LgQuery) {\n        // get lightGallery core plugin instance\n        this.core = instance;\n        this.$LG = $LG;\n\n        this.settings = { ...zoomSettings, ...this.core.settings };\n\n        return this;\n    }\n\n    // Append Zoom controls. Actual size, Zoom-in, Zoom-out\n    buildTemplates(): void {\n        let zoomIcons = this.settings.showZoomInOutIcons\n            ? `<button id=\"${this.core.getIdName(\n                  'lg-zoom-in',\n              )}\" type=\"button\" aria-label=\"${\n                  this.settings.zoomPluginStrings['zoomIn']\n              }\" class=\"lg-zoom-in lg-icon\"></button><button id=\"${this.core.getIdName(\n                  'lg-zoom-out',\n              )}\" type=\"button\" aria-label=\"${\n                  this.settings.zoomPluginStrings['zoomIn']\n              }\" class=\"lg-zoom-out lg-icon\"></button>`\n            : '';\n\n        if (this.settings.actualSize) {\n            zoomIcons += `<button id=\"${this.core.getIdName(\n                'lg-actual-size',\n            )}\" type=\"button\" aria-label=\"${\n                this.settings.zoomPluginStrings['viewActualSize']\n            }\" class=\"${\n                this.settings.actualSizeIcons.zoomIn\n            } lg-icon\"></button>`;\n        }\n\n        this.core.outer.addClass('lg-use-transition-for-zoom');\n\n        this.core.$toolbar.first().append(zoomIcons);\n    }\n\n    /**\n     * @desc Enable zoom option only once the image is completely loaded\n     * If zoomFromOrigin is true, Zoom is enabled once the dummy image has been inserted\n     *\n     * Zoom styles are defined under lg-zoomable CSS class.\n     */\n    enableZoom(event: CustomEvent): void {\n        // delay will be 0 except first time\n        let _speed = this.settings.enableZoomAfter + event.detail.delay;\n\n        // set _speed value 0 if gallery opened from direct url and if it is first slide\n        if (\n            this.$LG('body').first().hasClass('lg-from-hash') &&\n            event.detail.delay\n        ) {\n            // will execute only once\n            _speed = 0;\n        } else {\n            // Remove lg-from-hash to enable starting animation.\n            this.$LG('body').first().removeClass('lg-from-hash');\n        }\n\n        this.zoomableTimeout = setTimeout(() => {\n            if (!this.isImageSlide(this.core.index)) {\n                return;\n            }\n            this.core.getSlideItem(event.detail.index).addClass('lg-zoomable');\n            if (event.detail.index === this.core.index) {\n                this.setZoomEssentials();\n            }\n        }, _speed + 30);\n    }\n\n    enableZoomOnSlideItemLoad(): void {\n        // Add zoomable class\n        this.core.LGel.on(\n            `${lGEvents.slideItemLoad}.zoom`,\n            this.enableZoom.bind(this),\n        );\n    }\n\n    getDragCords(e: MouseEvent): Coords {\n        return {\n            x: e.pageX,\n            y: e.pageY,\n        };\n    }\n    getSwipeCords(e: TouchEvent): Coords {\n        const x = e.touches[0].pageX;\n        const y = e.touches[0].pageY;\n        return {\n            x,\n            y,\n        };\n    }\n\n    getDragAllowedAxises(scale: number, scaleDiff?: number): DragAllowedAxises {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first()\n            .get();\n\n        let height = 0;\n        let width = 0;\n        const rect = $image.getBoundingClientRect();\n        if (scale) {\n            height = $image.offsetHeight * scale;\n            width = $image.offsetWidth * scale;\n        } else if (scaleDiff) {\n            height = rect.height + scaleDiff * rect.height;\n            width = rect.width + scaleDiff * rect.width;\n        } else {\n            height = rect.height;\n            width = rect.width;\n        }\n        const allowY = height > this.containerRect.height;\n        const allowX = width > this.containerRect.width;\n        return {\n            allowX,\n            allowY,\n        };\n    }\n\n    setZoomEssentials(): void {\n        this.containerRect = this.core.$content.get().getBoundingClientRect();\n    }\n\n    /**\n     * @desc Image zoom\n     * Translate the wrap and scale the image to get better user experience\n     *\n     * @param {String} scale - Zoom decrement/increment value\n     */\n    zoomImage(\n        scale: number,\n        scaleDiff: number,\n        reposition: boolean,\n        resetToMax: boolean,\n    ): void {\n        if (Math.abs(scaleDiff) <= 0) return;\n\n        const offsetX = this.containerRect.width / 2 + this.containerRect.left;\n\n        const offsetY =\n            this.containerRect.height / 2 +\n            this.containerRect.top +\n            this.scrollTop;\n\n        let originalX;\n        let originalY;\n\n        if (scale === 1) {\n            this.positionChanged = false;\n        }\n\n        const dragAllowedAxises = this.getDragAllowedAxises(0, scaleDiff);\n\n        const { allowY, allowX } = dragAllowedAxises;\n        if (this.positionChanged) {\n            originalX = this.left / (this.scale - scaleDiff);\n            originalY = this.top / (this.scale - scaleDiff);\n            this.pageX = offsetX - originalX;\n            this.pageY = offsetY - originalY;\n\n            this.positionChanged = false;\n        }\n\n        const possibleSwipeCords = this.getPossibleSwipeDragCords(scaleDiff);\n\n        let x;\n        let y;\n        let _x = offsetX - this.pageX;\n        let _y = offsetY - this.pageY;\n\n        if (scale - scaleDiff > 1) {\n            const scaleVal = (scale - scaleDiff) / Math.abs(scaleDiff);\n            _x =\n                (scaleDiff < 0 ? -_x : _x) +\n                this.left * (scaleVal + (scaleDiff < 0 ? -1 : 1));\n            _y =\n                (scaleDiff < 0 ? -_y : _y) +\n                this.top * (scaleVal + (scaleDiff < 0 ? -1 : 1));\n            x = _x / scaleVal;\n            y = _y / scaleVal;\n        } else {\n            const scaleVal = (scale - scaleDiff) * scaleDiff;\n            x = _x * scaleVal;\n            y = _y * scaleVal;\n        }\n\n        if (reposition) {\n            if (allowX) {\n                if (this.isBeyondPossibleLeft(x, possibleSwipeCords.minX)) {\n                    x = possibleSwipeCords.minX;\n                } else if (\n                    this.isBeyondPossibleRight(x, possibleSwipeCords.maxX)\n                ) {\n                    x = possibleSwipeCords.maxX;\n                }\n            } else {\n                if (scale > 1) {\n                    if (x < possibleSwipeCords.minX) {\n                        x = possibleSwipeCords.minX;\n                    } else if (x > possibleSwipeCords.maxX) {\n                        x = possibleSwipeCords.maxX;\n                    }\n                }\n            }\n            // @todo fix this\n            if (allowY) {\n                if (this.isBeyondPossibleTop(y, possibleSwipeCords.minY)) {\n                    y = possibleSwipeCords.minY;\n                } else if (\n                    this.isBeyondPossibleBottom(y, possibleSwipeCords.maxY)\n                ) {\n                    y = possibleSwipeCords.maxY;\n                }\n            } else {\n                // If the translate value based on index of beyond the viewport, utilize the available space to prevent image being cut out\n                if (scale > 1) {\n                    //If image goes beyond viewport top, use the minim possible translate value\n                    if (y < possibleSwipeCords.minY) {\n                        y = possibleSwipeCords.minY;\n                    } else if (y > possibleSwipeCords.maxY) {\n                        y = possibleSwipeCords.maxY;\n                    }\n                }\n            }\n        }\n\n        this.setZoomStyles({\n            x: x,\n            y: y,\n            scale,\n        });\n\n        this.left = x;\n        this.top = y;\n\n        if (resetToMax) {\n            this.setZoomImageSize();\n        }\n    }\n\n    resetImageTranslate(index: number): void {\n        if (!this.isImageSlide(index)) {\n            return;\n        }\n        const $image = this.core.getSlideItem(index).find('.lg-image').first();\n        this.imageReset = false;\n        $image.removeClass(\n            'reset-transition reset-transition-y reset-transition-x',\n        );\n        this.core.outer.removeClass('lg-actual-size');\n        $image.css('width', 'auto').css('height', 'auto');\n        setTimeout(() => {\n            $image.removeClass('no-transition');\n        }, 10);\n    }\n\n    setZoomImageSize(): void {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first();\n\n        setTimeout(() => {\n            const actualSizeScale = this.getCurrentImageActualSizeScale();\n\n            if (this.scale >= actualSizeScale) {\n                $image.addClass('no-transition');\n                this.imageReset = true;\n            }\n        }, ZOOM_TRANSITION_DURATION);\n\n        setTimeout(() => {\n            const actualSizeScale = this.getCurrentImageActualSizeScale();\n\n            if (this.scale >= actualSizeScale) {\n                const dragAllowedAxises = this.getDragAllowedAxises(this.scale);\n\n                $image\n                    .css(\n                        'width',\n                        ($image.get() as HTMLImageElement).naturalWidth + 'px',\n                    )\n                    .css(\n                        'height',\n                        ($image.get() as HTMLImageElement).naturalHeight + 'px',\n                    );\n\n                this.core.outer.addClass('lg-actual-size');\n\n                if (dragAllowedAxises.allowX && dragAllowedAxises.allowY) {\n                    $image.addClass('reset-transition');\n                } else if (\n                    dragAllowedAxises.allowX &&\n                    !dragAllowedAxises.allowY\n                ) {\n                    $image.addClass('reset-transition-x');\n                } else if (\n                    !dragAllowedAxises.allowX &&\n                    dragAllowedAxises.allowY\n                ) {\n                    $image.addClass('reset-transition-y');\n                }\n            }\n        }, ZOOM_TRANSITION_DURATION + 50);\n    }\n\n    /**\n     * @desc apply scale3d to image and translate to image wrap\n     * @param {style} X,Y and scale\n     */\n    setZoomStyles(style: { x: number; y: number; scale: number }): void {\n        const $imageWrap = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-img-wrap')\n            .first();\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first();\n        const $dummyImage = this.core.outer\n            .find('.lg-current .lg-dummy-img')\n            .first();\n        this.scale = style.scale;\n        $image.css(\n            'transform',\n            'scale3d(' + style.scale + ', ' + style.scale + ', 1)',\n        );\n\n        $dummyImage.css(\n            'transform',\n            'scale3d(' + style.scale + ', ' + style.scale + ', 1)',\n        );\n\n        const transform =\n            'translate3d(' + style.x + 'px, ' + style.y + 'px, 0)';\n        $imageWrap.css('transform', transform);\n    }\n\n    /**\n     * @param index - Index of the current slide\n     * @param event - event will be available only if the function is called on clicking/taping the imags\n     */\n    setActualSize(index: number, event?: ZoomTouchEvent): void {\n        if (this.zoomInProgress) {\n            return;\n        }\n        this.zoomInProgress = true;\n        const currentItem = this.core.galleryItems[this.core.index];\n        this.resetImageTranslate(index);\n        setTimeout(() => {\n            // Allow zoom only on image\n            if (\n                !currentItem.src ||\n                this.core.outer.hasClass('lg-first-slide-loading')\n            ) {\n                return;\n            }\n            const scale = this.getCurrentImageActualSizeScale();\n            const prevScale = this.scale;\n            if (this.core.outer.hasClass('lg-zoomed')) {\n                this.scale = 1;\n            } else {\n                this.scale = this.getScale(scale);\n            }\n            this.setPageCords(event);\n\n            this.beginZoom(this.scale);\n            this.zoomImage(this.scale, this.scale - prevScale, true, true);\n        }, 50);\n        setTimeout(() => {\n            this.core.outer.removeClass('lg-grabbing').addClass('lg-grab');\n        }, 60);\n        setTimeout(() => {\n            this.zoomInProgress = false;\n        }, ZOOM_TRANSITION_DURATION + 110);\n    }\n\n    getNaturalWidth(index: number): number {\n        const $image = this.core.getSlideItem(index).find('.lg-image').first();\n\n        const naturalWidth = this.core.galleryItems[index].width;\n        return naturalWidth\n            ? parseFloat(naturalWidth)\n            : undefined || ($image.get() as any).naturalWidth;\n    }\n\n    getActualSizeScale(naturalWidth: number, width: number): number {\n        let _scale;\n        let scale;\n        if (naturalWidth >= width) {\n            _scale = naturalWidth / width;\n            scale = _scale || 2;\n        } else {\n            scale = 1;\n        }\n        return scale;\n    }\n\n    getCurrentImageActualSizeScale(): number {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first();\n        const width = $image.get().offsetWidth;\n        const naturalWidth = this.getNaturalWidth(this.core.index) || width;\n        return this.getActualSizeScale(naturalWidth, width);\n    }\n\n    getPageCords(event?: ZoomTouchEvent): Coords {\n        const cords: Coords = {} as Coords;\n        if (event) {\n            cords.x = event.pageX || event.touches[0].pageX;\n            cords.y = event.pageY || event.touches[0].pageY;\n        } else {\n            const containerRect = this.core.$content\n                .get()\n                .getBoundingClientRect();\n            cords.x = containerRect.width / 2 + containerRect.left;\n            cords.y =\n                containerRect.height / 2 + this.scrollTop + containerRect.top;\n        }\n        return cords;\n    }\n\n    setPageCords(event?: ZoomTouchEvent): void {\n        const pageCords = this.getPageCords(event);\n\n        this.pageX = pageCords.x;\n        this.pageY = pageCords.y;\n    }\n\n    manageActualPixelClassNames(): void {\n        const $actualSize = this.core.getElementById('lg-actual-size');\n        $actualSize\n            .removeClass(this.settings.actualSizeIcons.zoomIn)\n            .addClass(this.settings.actualSizeIcons.zoomOut);\n    }\n\n    // If true, zoomed - in else zoomed out\n    beginZoom(scale: number): boolean {\n        this.core.outer.removeClass('lg-zoom-drag-transition lg-zoom-dragging');\n        if (scale > 1) {\n            this.core.outer.addClass('lg-zoomed');\n            this.manageActualPixelClassNames();\n        } else {\n            this.resetZoom();\n        }\n        return scale > 1;\n    }\n\n    getScale(scale: number): number {\n        const actualSizeScale = this.getCurrentImageActualSizeScale();\n        if (scale < 1) {\n            scale = 1;\n        } else if (scale > actualSizeScale) {\n            scale = actualSizeScale;\n        }\n        return scale;\n    }\n\n    init(): void {\n        if (!this.settings.zoom) {\n            return;\n        }\n        this.buildTemplates();\n        this.enableZoomOnSlideItemLoad();\n\n        let tapped: ReturnType<typeof setTimeout> | null = null;\n\n        this.core.outer.on('dblclick.lg', (event) => {\n            if (!this.$LG(event.target).hasClass('lg-image')) {\n                return;\n            }\n            this.setActualSize(this.core.index, event);\n        });\n\n        this.core.outer.on('touchstart.lg', (event) => {\n            const $target = this.$LG(event.target);\n            if (event.touches.length === 1 && $target.hasClass('lg-image')) {\n                if (!tapped) {\n                    tapped = setTimeout(() => {\n                        tapped = null;\n                    }, 300);\n                } else {\n                    clearTimeout(tapped);\n                    tapped = null;\n                    event.preventDefault();\n                    this.setActualSize(this.core.index, event);\n                }\n            }\n        });\n\n        this.core.LGel.on(\n            `${lGEvents.containerResize}.zoom ${lGEvents.rotateRight}.zoom ${lGEvents.rotateLeft}.zoom ${lGEvents.flipHorizontal}.zoom ${lGEvents.flipVertical}.zoom`,\n            () => {\n                if (\n                    !this.core.lgOpened ||\n                    !this.isImageSlide(this.core.index) ||\n                    this.core.touchAction\n                ) {\n                    return;\n                }\n                const _LGel = this.core\n                    .getSlideItem(this.core.index)\n                    .find('.lg-img-wrap')\n                    .first();\n                this.top = 0;\n                this.left = 0;\n                this.setZoomEssentials();\n                this.setZoomSwipeStyles(_LGel, { x: 0, y: 0 });\n                this.positionChanged = true;\n            },\n        );\n        // Update zoom on resize and orientationchange\n        this.$LG(window).on(`scroll.lg.zoom.global${this.core.lgId}`, () => {\n            if (!this.core.lgOpened) return;\n            this.scrollTop = this.$LG(window).scrollTop();\n        });\n\n        this.core.getElementById('lg-zoom-out').on('click.lg', () => {\n            // Allow zoom only on image\n            if (!this.isImageSlide(this.core.index)) {\n                return;\n            }\n\n            let timeout = 0;\n            if (this.imageReset) {\n                this.resetImageTranslate(this.core.index);\n                timeout = 50;\n            }\n            setTimeout(() => {\n                let scale = this.scale - this.settings.scale;\n\n                if (scale < 1) {\n                    scale = 1;\n                }\n                this.beginZoom(scale);\n                this.zoomImage(\n                    scale,\n                    -this.settings.scale,\n                    true,\n                    !this.settings.infiniteZoom,\n                );\n            }, timeout);\n        });\n\n        this.core.getElementById('lg-zoom-in').on('click.lg', () => {\n            this.zoomIn();\n        });\n\n        this.core.getElementById('lg-actual-size').on('click.lg', () => {\n            this.setActualSize(this.core.index);\n        });\n\n        this.core.LGel.on(`${lGEvents.beforeOpen}.zoom`, () => {\n            this.core.outer.find('.lg-item').removeClass('lg-zoomable');\n        });\n        this.core.LGel.on(`${lGEvents.afterOpen}.zoom`, () => {\n            this.scrollTop = this.$LG(window).scrollTop();\n\n            // Set the initial value center\n            this.pageX = this.core.outer.width() / 2;\n            this.pageY = this.core.outer.height() / 2 + this.scrollTop;\n\n            this.scale = 1;\n        });\n\n        // Reset zoom on slide change\n        this.core.LGel.on(\n            `${lGEvents.afterSlide}.zoom`,\n            (event: CustomEvent) => {\n                const { prevIndex } = event.detail;\n                this.scale = 1;\n                this.positionChanged = false;\n                this.zoomInProgress = false;\n                this.resetZoom(prevIndex);\n                this.resetImageTranslate(prevIndex);\n                if (this.isImageSlide(this.core.index)) {\n                    this.setZoomEssentials();\n                }\n            },\n        );\n\n        // Drag option after zoom\n        this.zoomDrag();\n\n        this.pinchZoom();\n\n        this.zoomSwipe();\n\n        // Store the zoomable timeout value just to clear it while closing\n        this.zoomableTimeout = false;\n        this.positionChanged = false;\n        this.zoomInProgress = false;\n    }\n\n    zoomIn(): void {\n        // Allow zoom only on image\n        if (!this.isImageSlide(this.core.index)) {\n            return;\n        }\n\n        let scale = this.scale + this.settings.scale;\n\n        if (!this.settings.infiniteZoom) {\n            scale = this.getScale(scale);\n        }\n        this.beginZoom(scale);\n        this.zoomImage(\n            scale,\n            Math.min(this.settings.scale, scale - this.scale),\n            true,\n            !this.settings.infiniteZoom,\n        );\n    }\n\n    // Reset zoom effect\n    resetZoom(index?: number): void {\n        this.core.outer.removeClass('lg-zoomed lg-zoom-drag-transition');\n        const $actualSize = this.core.getElementById('lg-actual-size');\n        const $item = this.core.getSlideItem(\n            index !== undefined ? index : this.core.index,\n        );\n        $actualSize\n            .removeClass(this.settings.actualSizeIcons.zoomOut)\n            .addClass(this.settings.actualSizeIcons.zoomIn);\n        $item.find('.lg-img-wrap').first().removeAttr('style');\n        $item.find('.lg-image').first().removeAttr('style');\n        this.scale = 1;\n        this.left = 0;\n        this.top = 0;\n\n        // Reset pagx pagy values to center\n        this.setPageCords();\n    }\n\n    getTouchDistance(e: TouchEvent): number {\n        return Math.sqrt(\n            (e.touches[0].pageX - e.touches[1].pageX) *\n                (e.touches[0].pageX - e.touches[1].pageX) +\n                (e.touches[0].pageY - e.touches[1].pageY) *\n                    (e.touches[0].pageY - e.touches[1].pageY),\n        );\n    }\n\n    pinchZoom(): void {\n        let startDist = 0;\n        let pinchStarted = false;\n        let initScale = 1;\n        let prevScale = 0;\n\n        let $item = this.core.getSlideItem(this.core.index);\n\n        this.core.outer.on('touchstart.lg', (e) => {\n            $item = this.core.getSlideItem(this.core.index);\n            if (!this.isImageSlide(this.core.index)) {\n                return;\n            }\n            if (e.touches.length === 2) {\n                e.preventDefault();\n                if (this.core.outer.hasClass('lg-first-slide-loading')) {\n                    return;\n                }\n                initScale = this.scale || 1;\n                this.core.outer.removeClass(\n                    'lg-zoom-drag-transition lg-zoom-dragging',\n                );\n\n                this.setPageCords(e);\n                this.resetImageTranslate(this.core.index);\n\n                this.core.touchAction = 'pinch';\n\n                startDist = this.getTouchDistance(e);\n            }\n        });\n\n        this.core.$inner.on('touchmove.lg', (e) => {\n            if (\n                e.touches.length === 2 &&\n                this.core.touchAction === 'pinch' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                e.preventDefault();\n                const endDist = this.getTouchDistance(e);\n\n                const distance = startDist - endDist;\n                if (!pinchStarted && Math.abs(distance) > 5) {\n                    pinchStarted = true;\n                }\n                if (pinchStarted) {\n                    prevScale = this.scale;\n                    const _scale = Math.max(1, initScale + -distance * 0.02);\n                    this.scale =\n                        Math.round((_scale + Number.EPSILON) * 100) / 100;\n                    const diff = this.scale - prevScale;\n                    this.zoomImage(\n                        this.scale,\n                        Math.round((diff + Number.EPSILON) * 100) / 100,\n                        false,\n                        false,\n                    );\n                }\n            }\n        });\n\n        this.core.$inner.on('touchend.lg', (e) => {\n            if (\n                this.core.touchAction === 'pinch' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                pinchStarted = false;\n                startDist = 0;\n                if (this.scale <= 1) {\n                    this.resetZoom();\n                } else {\n                    const actualSizeScale = this.getCurrentImageActualSizeScale();\n\n                    if (this.scale >= actualSizeScale) {\n                        let scaleDiff = actualSizeScale - this.scale;\n                        if (scaleDiff === 0) {\n                            scaleDiff = 0.01;\n                        }\n                        this.zoomImage(actualSizeScale, scaleDiff, false, true);\n                    }\n                    this.manageActualPixelClassNames();\n\n                    this.core.outer.addClass('lg-zoomed');\n                }\n                this.core.touchAction = undefined;\n            }\n        });\n    }\n\n    touchendZoom(\n        startCoords: Coords,\n        endCoords: Coords,\n        allowX: boolean,\n        allowY: boolean,\n        touchDuration: number,\n    ): void {\n        let distanceXnew = endCoords.x - startCoords.x;\n        let distanceYnew = endCoords.y - startCoords.y;\n\n        let speedX = Math.abs(distanceXnew) / touchDuration + 1;\n        let speedY = Math.abs(distanceYnew) / touchDuration + 1;\n\n        if (speedX > 2) {\n            speedX += 1;\n        }\n\n        if (speedY > 2) {\n            speedY += 1;\n        }\n\n        distanceXnew = distanceXnew * speedX;\n        distanceYnew = distanceYnew * speedY;\n\n        const _LGel = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-img-wrap')\n            .first();\n        const distance: Coords = {} as Coords;\n\n        distance.x = this.left + distanceXnew;\n        distance.y = this.top + distanceYnew;\n\n        const possibleSwipeCords = this.getPossibleSwipeDragCords();\n\n        if (Math.abs(distanceXnew) > 15 || Math.abs(distanceYnew) > 15) {\n            if (allowY) {\n                if (\n                    this.isBeyondPossibleTop(\n                        distance.y,\n                        possibleSwipeCords.minY,\n                    )\n                ) {\n                    distance.y = possibleSwipeCords.minY;\n                } else if (\n                    this.isBeyondPossibleBottom(\n                        distance.y,\n                        possibleSwipeCords.maxY,\n                    )\n                ) {\n                    distance.y = possibleSwipeCords.maxY;\n                }\n            }\n\n            if (allowX) {\n                if (\n                    this.isBeyondPossibleLeft(\n                        distance.x,\n                        possibleSwipeCords.minX,\n                    )\n                ) {\n                    distance.x = possibleSwipeCords.minX;\n                } else if (\n                    this.isBeyondPossibleRight(\n                        distance.x,\n                        possibleSwipeCords.maxX,\n                    )\n                ) {\n                    distance.x = possibleSwipeCords.maxX;\n                }\n            }\n\n            if (allowY) {\n                this.top = distance.y;\n            } else {\n                distance.y = this.top;\n            }\n\n            if (allowX) {\n                this.left = distance.x;\n            } else {\n                distance.x = this.left;\n            }\n\n            this.setZoomSwipeStyles(_LGel, distance);\n\n            this.positionChanged = true;\n        }\n    }\n\n    getZoomSwipeCords(\n        startCoords: Coords,\n        endCoords: Coords,\n        allowX: boolean,\n        allowY: boolean,\n        possibleSwipeCords: PossibleCords,\n    ): Coords {\n        const distance: Coords = {} as Coords;\n        if (allowY) {\n            distance.y = this.top + (endCoords.y - startCoords.y);\n            if (this.isBeyondPossibleTop(distance.y, possibleSwipeCords.minY)) {\n                const diffMinY = possibleSwipeCords.minY - distance.y;\n                distance.y = possibleSwipeCords.minY - diffMinY / 6;\n            } else if (\n                this.isBeyondPossibleBottom(distance.y, possibleSwipeCords.maxY)\n            ) {\n                const diffMaxY = distance.y - possibleSwipeCords.maxY;\n                distance.y = possibleSwipeCords.maxY + diffMaxY / 6;\n            }\n        } else {\n            distance.y = this.top;\n        }\n\n        if (allowX) {\n            distance.x = this.left + (endCoords.x - startCoords.x);\n            if (\n                this.isBeyondPossibleLeft(distance.x, possibleSwipeCords.minX)\n            ) {\n                const diffMinX = possibleSwipeCords.minX - distance.x;\n                distance.x = possibleSwipeCords.minX - diffMinX / 6;\n            } else if (\n                this.isBeyondPossibleRight(distance.x, possibleSwipeCords.maxX)\n            ) {\n                const difMaxX = distance.x - possibleSwipeCords.maxX;\n                distance.x = possibleSwipeCords.maxX + difMaxX / 6;\n            }\n        } else {\n            distance.x = this.left;\n        }\n\n        return distance;\n    }\n\n    private isBeyondPossibleLeft(x: number, minX: number) {\n        return x >= minX;\n    }\n    private isBeyondPossibleRight(x: number, maxX: number) {\n        return x <= maxX;\n    }\n    private isBeyondPossibleTop(y: number, minY: number) {\n        return y >= minY;\n    }\n    private isBeyondPossibleBottom(y: number, maxY: number) {\n        return y <= maxY;\n    }\n\n    isImageSlide(index: number): boolean {\n        const currentItem = this.core.galleryItems[index];\n        return this.core.getSlideType(currentItem) === 'image';\n    }\n\n    getPossibleSwipeDragCords(scale?: number): PossibleCords {\n        const $image = this.core\n            .getSlideItem(this.core.index)\n            .find('.lg-image')\n            .first();\n\n        const { bottom } = this.core.mediaContainerPosition;\n\n        const imgRect = $image.get().getBoundingClientRect();\n\n        let imageHeight = imgRect.height;\n        let imageWidth = imgRect.width;\n\n        if (scale) {\n            imageHeight = imageHeight + scale * imageHeight;\n            imageWidth = imageWidth + scale * imageWidth;\n        }\n\n        const minY = (imageHeight - this.containerRect.height) / 2;\n        const maxY = (this.containerRect.height - imageHeight) / 2 + bottom;\n\n        const minX = (imageWidth - this.containerRect.width) / 2;\n\n        const maxX = (this.containerRect.width - imageWidth) / 2;\n\n        const possibleSwipeCords = {\n            minY: minY,\n            maxY: maxY,\n            minX: minX,\n            maxX: maxX,\n        };\n        return possibleSwipeCords;\n    }\n\n    setZoomSwipeStyles(\n        LGel: lgQuery,\n        distance: { x: number; y: number },\n    ): void {\n        LGel.css(\n            'transform',\n            'translate3d(' + distance.x + 'px, ' + distance.y + 'px, 0)',\n        );\n    }\n\n    zoomSwipe(): void {\n        let startCoords = {} as Coords;\n        let endCoords = {} as Coords;\n        let isMoved = false;\n\n        // Allow x direction drag\n        let allowX = false;\n\n        // Allow Y direction drag\n        let allowY = false;\n\n        let startTime: Date = new Date();\n        let endTime: Date = new Date();\n        let possibleSwipeCords: PossibleCords;\n\n        let _LGel: lgQuery;\n\n        let $item = this.core.getSlideItem(this.core.index);\n\n        this.core.$inner.on('touchstart.lg', (e) => {\n            // Allow zoom only on image\n            if (!this.isImageSlide(this.core.index)) {\n                return;\n            }\n            $item = this.core.getSlideItem(this.core.index);\n            if (\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target)) &&\n                e.touches.length === 1 &&\n                this.core.outer.hasClass('lg-zoomed')\n            ) {\n                e.preventDefault();\n                startTime = new Date();\n                this.core.touchAction = 'zoomSwipe';\n                _LGel = this.core\n                    .getSlideItem(this.core.index)\n                    .find('.lg-img-wrap')\n                    .first();\n\n                const dragAllowedAxises = this.getDragAllowedAxises(0);\n\n                allowY = dragAllowedAxises.allowY;\n                allowX = dragAllowedAxises.allowX;\n                if (allowX || allowY) {\n                    startCoords = this.getSwipeCords(e);\n                }\n\n                possibleSwipeCords = this.getPossibleSwipeDragCords();\n\n                // reset opacity and transition duration\n                this.core.outer.addClass(\n                    'lg-zoom-dragging lg-zoom-drag-transition',\n                );\n            }\n        });\n\n        this.core.$inner.on('touchmove.lg', (e) => {\n            if (\n                e.touches.length === 1 &&\n                this.core.touchAction === 'zoomSwipe' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                e.preventDefault();\n                this.core.touchAction = 'zoomSwipe';\n\n                endCoords = this.getSwipeCords(e);\n\n                const distance = this.getZoomSwipeCords(\n                    startCoords,\n                    endCoords,\n                    allowX,\n                    allowY,\n                    possibleSwipeCords,\n                );\n\n                if (\n                    Math.abs(endCoords.x - startCoords.x) > 15 ||\n                    Math.abs(endCoords.y - startCoords.y) > 15\n                ) {\n                    isMoved = true;\n                    this.setZoomSwipeStyles(_LGel, distance);\n                }\n            }\n        });\n\n        this.core.$inner.on('touchend.lg', (e) => {\n            if (\n                this.core.touchAction === 'zoomSwipe' &&\n                (this.$LG(e.target).hasClass('lg-item') ||\n                    $item.get().contains(e.target))\n            ) {\n                e.preventDefault();\n                this.core.touchAction = undefined;\n                this.core.outer.removeClass('lg-zoom-dragging');\n                if (!isMoved) {\n                    return;\n                }\n                isMoved = false;\n                endTime = new Date();\n                const touchDuration = endTime.valueOf() - startTime.valueOf();\n                this.touchendZoom(\n                    startCoords,\n                    endCoords,\n                    allowX,\n                    allowY,\n                    touchDuration,\n                );\n            }\n        });\n    }\n\n    zoomDrag(): void {\n        let startCoords: Coords = {} as Coords;\n        let endCoords: Coords = {} as Coords;\n        let isDragging = false;\n        let isMoved = false;\n\n        // Allow x direction drag\n        let allowX = false;\n\n        // Allow Y direction drag\n        let allowY = false;\n\n        let startTime: number | Date;\n        let endTime;\n\n        let possibleSwipeCords: PossibleCords;\n\n        let _LGel: lgQuery;\n\n        this.core.outer.on('mousedown.lg.zoom', (e) => {\n            // Allow zoom only on image\n            if (!this.isImageSlide(this.core.index)) {\n                return;\n            }\n            const $item = this.core.getSlideItem(this.core.index);\n            if (\n                this.$LG(e.target).hasClass('lg-item') ||\n                $item.get().contains(e.target)\n            ) {\n                startTime = new Date();\n                _LGel = this.core\n                    .getSlideItem(this.core.index)\n                    .find('.lg-img-wrap')\n                    .first();\n\n                const dragAllowedAxises = this.getDragAllowedAxises(0);\n\n                allowY = dragAllowedAxises.allowY;\n                allowX = dragAllowedAxises.allowX;\n\n                if (this.core.outer.hasClass('lg-zoomed')) {\n                    if (\n                        this.$LG(e.target).hasClass('lg-object') &&\n                        (allowX || allowY)\n                    ) {\n                        e.preventDefault();\n                        startCoords = this.getDragCords(e);\n\n                        possibleSwipeCords = this.getPossibleSwipeDragCords();\n\n                        isDragging = true;\n\n                        this.core.outer\n                            .removeClass('lg-grab')\n                            .addClass(\n                                'lg-grabbing lg-zoom-drag-transition lg-zoom-dragging',\n                            );\n                        // reset opacity and transition duration\n                    }\n                }\n            }\n        });\n\n        this.$LG(window).on(\n            `mousemove.lg.zoom.global${this.core.lgId}`,\n            (e) => {\n                if (isDragging) {\n                    isMoved = true;\n                    endCoords = this.getDragCords(e);\n\n                    const distance = this.getZoomSwipeCords(\n                        startCoords,\n                        endCoords,\n                        allowX,\n                        allowY,\n                        possibleSwipeCords,\n                    );\n\n                    this.setZoomSwipeStyles(_LGel, distance);\n                }\n            },\n        );\n\n        this.$LG(window).on(`mouseup.lg.zoom.global${this.core.lgId}`, (e) => {\n            if (isDragging) {\n                endTime = new Date();\n                isDragging = false;\n                this.core.outer.removeClass('lg-zoom-dragging');\n\n                // Fix for chrome mouse move on click\n                if (\n                    isMoved &&\n                    (startCoords.x !== endCoords.x ||\n                        startCoords.y !== endCoords.y)\n                ) {\n                    endCoords = this.getDragCords(e);\n\n                    const touchDuration =\n                        endTime.valueOf() - startTime.valueOf();\n                    this.touchendZoom(\n                        startCoords,\n                        endCoords,\n                        allowX,\n                        allowY,\n                        touchDuration,\n                    );\n                }\n\n                isMoved = false;\n            }\n\n            this.core.outer.removeClass('lg-grabbing').addClass('lg-grab');\n        });\n    }\n\n    closeGallery(): void {\n        this.resetZoom();\n        this.zoomInProgress = false;\n    }\n\n    destroy(): void {\n        // Unbind all events added by lightGallery zoom plugin\n        this.$LG(window).off(`.lg.zoom.global${this.core.lgId}`);\n        this.core.LGel.off('.lg.zoom');\n        this.core.LGel.off('.zoom');\n        clearTimeout(this.zoomableTimeout);\n        this.zoomableTimeout = false;\n    }\n}\n","import { render } from \"./Gallery.vue?vue&type=template&id=cfbd6944&scoped=true\"\nimport script from \"./Gallery.vue?vue&type=script&lang=js\"\nexport * from \"./Gallery.vue?vue&type=script&lang=js\"\n\nimport \"./Gallery.vue?vue&type=style&index=0&id=cfbd6944&lang=css&scoped=true\"\nimport \"./Gallery.vue?vue&type=style&index=1&id=cfbd6944&lang=less&scoped=true\"\n\nimport exportComponent from \"/Users/yinnnyou/workspace/youyinnn.github.io/node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-cfbd6944\"]])\n\nexport default __exports__"],"names":["id","_createElementBlock","_hoisted_1","_Fragment","_renderList","_ctx","content","item","key","size","src","_createElementVNode","className","alt","name","lGEvents","afterAppendSlide","init","hasVideo","containerResize","updateSlides","afterAppendSubHtml","beforeOpen","afterOpen","slideItemLoad","beforeSlide","afterSlide","posterClick","dragStart","dragMove","dragEnd","beforeNextSlide","beforePrevSlide","beforeClose","afterClose","rotateLeft","rotateRight","flipHorizontal","flipVertical","autoplay","autoplayStart","autoplayStop","lightGalleryCoreSettings","mode","easing","speed","licenseKey","height","width","addClass","startClass","backdropDuration","container","startAnimationDuration","zoomFromOrigin","hideBarsDelay","showBarsAfter","slideDelay","supportLegacyBrowser","allowMediaOverlap","videoMaxSize","loadYouTubePoster","defaultCaptionHeight","ariaLabelledby","ariaDescribedby","resetScrollPosition","hideScrollbar","closable","swipeToClose","closeOnTap","showCloseIcon","showMaximizeIcon","loop","escKey","keyPress","trapFocus","controls","slideEndAnimation","hideControlOnEnd","mousewheel","getCaptionFromTitleOrAlt","appendSubHtmlTo","subHtmlSelectorRelative","preload","numberOfSlideItemsInDom","selector","selectWithin","nextHtml","prevHtml","index","iframeWidth","iframeHeight","iframeMaxWidth","iframeMaxHeight","download","counter","appendCounterTo","swipeThreshold","enableSwipe","enableDrag","dynamic","dynamicEl","extraProps","exThumbImage","isMobile","undefined","mobileSettings","plugins","strings","closeGallery","toggleMaximize","previousSlide","nextSlide","playVideo","mediaLoadingFailed","initLgPolyfills","window","CustomEvent","event","params","bubbles","cancelable","detail","evt","document","createEvent","initCustomEvent","Element","prototype","matches","msMatchesSelector","webkitMatchesSelector","lgQuery","cssVenderPrefixes","this","_getSelector","firstElement","_getFirstEl","generateUUID","replace","c","r","Math","random","v","toString","context","fl","substring","querySelector","querySelectorAll","_each","func","length","forEach","call","_setCssVendorPrefix","el","cssProperty","value","property","s","group1","toUpperCase","indexOf","style","charAt","toLowerCase","slice","isEventMatched","eventName","eventNamespace","split","filter","e","every","attr","getAttribute","setAttribute","find","$LG","first","eq","parent","parentElement","get","removeAttr","attributes","attrs","removeAttribute","wrap","wrapper","createElement","parentNode","insertBefore","removeChild","appendChild","classNames","classList","add","removeClass","remove","hasClass","contains","hasAttribute","attribute","toggleClass","css","_this","on","events","listener","Array","isArray","eventListeners","push","addEventListener","once","off","Object","keys","removeEventListener","trigger","customEvent","dispatchEvent","load","url","fetch","then","res","text","html","innerHTML","append","insertAdjacentHTML","prepend","empty","scrollTop","body","documentElement","pageYOffset","scrollLeft","pageXOffset","offset","left","top","rect","getBoundingClientRect","bodyMarginLeft","marginLeft","parseFloat","currentStyle","getComputedStyle","clientWidth","paddingLeft","paddingRight","clientHeight","paddingTop","paddingBottom","defaultDynamicOptions","convertToData","g","utils","getSize","spacing","defaultLgSize","LGel","lgSize","isResponsiveSizes","wWidth","innerWidth","i","size_1","responsiveWidth","parseInt","cWidth","cHeight","maxWidth","min","maxHeight","ratio","getTransform","bottom","imageSize","containerRect","wHeight","elWidth","elHeight","elStyle","x","borderLeft","y","borderTop","scX","scY","transform","getIframeMarkup","iframeTitle","title","getImgMarkup","altAttr","srcset","sizes","sources","srcsetAttr","sizesAttr","imgMarkup","sourceTag","sourceObj","JSON","parse","map","source","getResponsiveSrc","srcItms","rsWidth","rsSrc","_src","splice","j","isImageLoaded","img","complete","naturalWidth","getVideoPosterMarkup","_poster","dummyImg","videoContStyle","playVideoString","_isVideo","videoClass","youtube","vimeo","getFocusableElements","elements","visibleElements","element","display","visibility","getDynamicOptions","items","dynamicElements","availableDynamicOptions","__spreadArrays","specified","dynamicAttr","label","currentItem","thumb","subHtml","test","navigator","userAgent","isVideo","isHTML5VIdeo","html5","console","error","match","wistia","lgId","LightGallery","options","lgOpened","lGalleryOn","lgBusy","currentItemsInDom","prevScrollTop","bodyPaddingRight","isDummyImageRemoved","dragOrSwipeEnabled","mediaContainerPosition","generateSettings","buildModules","settings","galleryItems","getItems","normalizeSettings","validateLicense","__assign","addSlideVideoInfo","buildStructure","instance","setTimeout","triggerPosterClick","arrow","openGalleryOnItemClick","this_1","$element","uuid","preventDefault","currentItemIndex","openGallery","plugin","warn","getSlideItem","getSlideItemId","getIdName","getElementById","manageSingleSlideClassName","outer","$container","subHtmlCont","addClasses","containerClassName","closeIcon","maximizeIcon","template","$lgComponents","$backdrop","$inner","$content","$toolbar","outerClassNames","refreshOnResize","hideBars","manageCloseGallery","initModules","currentGalleryItem","__slideVideoInfo","getMediaContainerPosition","_a","top_1","currentImageSize","resizeVideoSlide","imgStyle","getDummyImgStyles","lgVideoStyle","getVideoContStyle","currentSlide","currentSrc","updateControls","_index","some","galleryItem","itemIndex","organizeSlideItems","loadContent","updateCurrentCounter","children","shouldHideScrollbar","bodyRect","scrollbarWidth","resetScrollBar","itemsToBeInsertedToDom","getItemsToBeInsertedToDom","addHtml","setMediaContainerPosition","timeout","currentSlide_1","slide","captionHeight","thumbContainer","thumbHeight","clearTimeout","hideBarTimeout","initPictureFill","$img","picturefill","counterHtml","subHtmlUrl","fL","getDummyImageContent","$currentSlide","$currentItem","_dummyImgSrc","dummyImgContent","setImgMarkup","imgContent","isFirstSlideWithZoomAnimation","onSlideObjectLoad","$slide","isHTML5VideoWithoutPoster","onLoad","onError","mediaObject","onLgObjectLoad","delay","isFirstSlide","triggerSlideItemLoad","_speed","getSlideType","poster","video","rec","_html5Video","responsive","srcDyItms","videoInfo","iframe","top_2","videoSize","markup","hasStartAnimation","html5Video","hasPoster","loadContentOnFirstSlideLoad","prevIndex","numberOfItems","possibleNumberOfItems","max","prevIndexItem","_element","idx","numberOfExistingItems","getPreviousSlideIndex","currentItemId","setDownloadValue","hideDownloadBtn","downloadUrl","$download","makeSlideAnimation","direction","currentSlideItem","previousSlideItem","fromTouch","fromThumb","numberOfGalleryItems","previousSlideItem_1","top_3","arrowDisable","touchPrev","touchNext","updateCounterTotal","touchMove","startCoords","endCoords","distanceX","pageX","distanceY","pageY","allowSwipe","swipeDirection","abs","setTranslate","offsetWidth","slideWidthAmount","gutter","opacity","innerHeight","scale","touchEnd","distance","triggerClick","distanceAbs","goToNextSlide","goToPrevSlide","target","isPosterElement","isMoved","isSwiping","$item","touches","touchAction","manageSwipeClass","isDraging","_touchNext","_touchPrev","_loop","keyCode","$prev","$next","$el","xValue","yValue","scaleX","scaleY","lastCall","deltaY","now","Date","getTime","isSlideElement","playButton","invalidateItems","focus","preventScroll","isTabPressed","focusableEls","firstFocusableEl","lastFocusableEl","shiftKey","activeElement","mousedown","force","top_4","_b","destroyModules","removeTimeout","blur","module","err","destroy","refresh","destroyGallery","closeTimeout","bind","lightGallery","thumbnailsSettings","thumbnail","animateThumb","currentPagerPosition","alignThumbnails","thumbWidth","thumbMargin","appendThumbnailsTo","toggleThumb","enableThumbDrag","enableThumbSwipe","thumbnailSwipeThreshold","loadYouTubeThumbnail","youTubeThumbSize","thumbnailPluginStrings","toggleThumbnails","Thumbnail","thumbOuterWidth","thumbTotalWidth","translateX","thumbClickable","core","setAnimateThumbStyles","build","toggleThumbBar","thumbKeyPress","setThumbMarkup","manageActiveClassOnSlideChange","$lgThumb","$target","rebuildThumbnails","thumbOuterClassNames","$thumbOuter","setThumbItemHtml","thumbDragUtils","cords","startX","endX","newTranslateX","startTime","endTime","touchMoveTime","isDragging","onThumbTouchMove","onThumbTouchEnd","targetTouches","getPossibleTransformX","position","valueOf","touchDuration","distanceXnew","speedX","getThumbHtml","thumbImg","slideVideoInfo","getThumbItemHtml","thumbList","$thumb","zoomSettings","zoom","infiniteZoom","actualSize","showZoomInOutIcons","actualSizeIcons","zoomIn","zoomOut","enableZoomAfter","zoomPluginStrings","viewActualSize","ZOOM_TRANSITION_DURATION","Zoom","buildTemplates","zoomIcons","enableZoom","zoomableTimeout","isImageSlide","setZoomEssentials","enableZoomOnSlideItemLoad","getDragCords","getSwipeCords","getDragAllowedAxises","scaleDiff","$image","offsetHeight","allowY","allowX","zoomImage","reposition","resetToMax","originalX","originalY","offsetX","offsetY","positionChanged","dragAllowedAxises","possibleSwipeCords","getPossibleSwipeDragCords","_x","_y","scaleVal","isBeyondPossibleLeft","minX","isBeyondPossibleRight","maxX","isBeyondPossibleTop","minY","isBeyondPossibleBottom","maxY","setZoomStyles","setZoomImageSize","resetImageTranslate","imageReset","actualSizeScale","getCurrentImageActualSizeScale","naturalHeight","$imageWrap","$dummyImage","setActualSize","zoomInProgress","prevScale","getScale","setPageCords","beginZoom","getNaturalWidth","getActualSizeScale","_scale","getPageCords","pageCords","manageActualPixelClassNames","$actualSize","resetZoom","tapped","_LGel","setZoomSwipeStyles","zoomDrag","pinchZoom","zoomSwipe","getTouchDistance","sqrt","startDist","pinchStarted","initScale","endDist","round","Number","EPSILON","diff","touchendZoom","distanceYnew","speedY","getZoomSwipeCords","diffMinY","diffMaxY","diffMinX","difMaxX","imgRect","imageHeight","imageWidth","components","data","mounted","imgRouter","getElementsByTagName","thiz","axios","response","log","lgThumbnail","lgZoom","rowHeight","margins","methods","__exports__","render"],"sourceRoot":""}