<h2 id="mysql">MySQL</h2>
<h3 id="数据库三范式">数据库三范式</h3>
<p><strong>第一范式（1NF）</strong></p>
<p>数据表中的每一列，必须是不可拆分的最小单元，也即必须保证列的原子性；</p>
<p><strong>第二范式（2NF）</strong></p>
<p>满足**<em>1NF</em><strong>要求的所有列，每个非主键列都必须完全依赖域主键，目的是为了消除</strong>部分依赖**；</p>
<p>举例：</p>
<p>比如有课程分数表（学号，姓名，系名，系主任，课名，分数）</p>
<p>我们得知学号和课名能唯一确定一个分数，但是还有其他冗余数据：<strong>姓名、系名、系主任</strong></p>
<p>于是有函数依赖关系：</p>
<p><img src="https://pic2.zhimg.com/80/51e2689ac9416a91800e63101bee9db7_1440w.webp" alt="img"></p>
<p>这一步完成以后，可以得到，表 3 的码只有一个，就是<strong>（学号、课名）</strong>。</p>
<p>第二步：
主属性有两个：<strong>学号</strong> 与 <strong>课名</strong></p>
<p>第三步：
非主属性有四个：<strong>姓名</strong>、<strong>系名</strong>、<strong>系主任</strong>、<strong>分数</strong></p>
<p><strong>第四步：</strong>
对于<strong>（学号，课名） → 姓名</strong>，有 <strong>学号 → 姓名</strong>，存在非主属性 <strong>姓名</strong> 对码<strong>（学号，课名）</strong>的部分函数依赖。
对于<strong>（学号，课名） → 系名</strong>，有 <strong>学号 → 系名</strong>，存在非主属性 系<strong>名</strong> 对码<strong>（学号，课名）</strong>的部分函数依赖。
对于<strong>（学号，课名） → 系主任</strong>，有 <strong>学号 → 系主任</strong>，存在非主属性 对码<strong>（学号，课名）</strong>的部分函数依赖。</p>
<p>所以表 3 存在非主属性对于码的部分函数依赖，最高只符合 1NF 的要求，不符合 2NF 的要求。</p>
<p>为了让表 3 符合 2NF 的要求，我们必须消除这些部分函数依赖，只有一个办法，就是将大数据表拆分成两个或者更多个更小的数据表，在拆分的过程中，要达到更高一级范式的要求，这个过程叫做”模式分解“。模式分解的方法不是唯一的，以下是其中一种方法：
选课（学号，课名，分数）
学生（学号，姓名，系名，系主任）</p>
<p>我们先来判断以下，<strong>选课</strong>表与<strong>学生</strong>表，是否符合了 2NF 的要求？</p>
<p>对于<strong>选课</strong>表，其码是<strong>（学号，课名）</strong>，主属性是<strong>学号</strong>和<strong>课名</strong>，非主属性是<strong>分数</strong>，<strong>学号</strong>确定，并不能唯一确定<strong>分数</strong>，<strong>课名</strong>确定，也不能唯一确定<strong>分数</strong>，所以不存在非主属性<strong>分数</strong>对于码 <strong>（学号，课名）</strong>的部分函数依赖，所以此表符合 2NF 的要求。</p>
<p>对于<strong>学生</strong>表，其码是<strong>学号，</strong>主属性是<strong>学号</strong>，非主属性是<strong>姓名、系名</strong>和<strong>系主任</strong>，因为码只有一个属性，所以不可能存在非主属性对于码 的部分函数依赖，所以此表符合 2NF 的要求。</p>
<p>下图表示了模式分解以后的新的函数依赖关系</p>
<p><img src="https://pic1.zhimg.com/50/2f4b4a887f6a61674a49d03d79e3fe17_hd.webp" alt="img"></p>
<p><strong>第三范式（3NF）</strong></p>
<p>满足**<em>2NF</em><strong>的同时，消除非主属性对于主键的</strong>传递依赖**；</p>
<p>举例：</p>
<p>对于<strong>选课</strong>表，主码为（学号，课名），主属性为<strong>学号</strong>和<strong>课名，</strong>非主属性只有一个，为分数，不可能存在传递函数依赖，所以<strong>选课</strong>表的设计，符合 3NF 的要求。</p>
<p>对于<strong>学生</strong>表，主码为<strong>学号</strong>，主属性为<strong>学号</strong>，非主属性为<strong>姓名</strong>、<strong>系名</strong>和<strong>系主任</strong>。因为 学号 → 系名，同时 系名 → 系主任，所以存在非主属性<strong>系主任</strong>对于码<strong>学号</strong>的传递函数依赖，所以<strong>学生</strong>表的设计，不符合 3NF 的要求。。</p>
<p>为了让数据表设计达到 3NF，我们必须进一步进行模式分解为以下形式：
选课（学号，课名，分数）
学生（学号，姓名，系名）
系（系名，系主任）</p>
<p><img src="https://pic4.zhimg.com/50/5b20707ff3d9afb51ef7bfda726c3e34_hd.webp" alt="img"></p>
<p>再来分析：</p>
<p>对于<strong>选课</strong>表，符合 3NF 的要求，之前已经分析过了。</p>
<p>对于<strong>学生</strong>表，码为<strong>学号</strong>，主属性为<strong>学号</strong>，非主属性为<strong>系名</strong>，不可能存在非主属性对于码的传递函数依赖，所以符合 3NF 的要求。</p>
<p>对于<strong>系</strong>表，码为<strong>系名</strong>，主属性为<strong>系名</strong>，非主属性为<strong>系主任</strong>，不可能存在非主属性对于码的传递函数依赖（至少要有三个属性才可能存在传递函数依赖关系），所以符合 3NF 的要求</p>
<p><strong>为什么需要遵循范式？</strong></p>
<ul>
<li>减少数据冗余；</li>
<li>避免插入异常、修改异常、删除异常；</li>
</ul>
<blockquote>
<p>作者：刘慰
链接：<a href="https://www.zhihu.com/question/24696366/answer/29189700">https://www.zhihu.com/question/24696366/answer/29189700</a>
来源：知乎
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<h3 id="mysql-用户管理">MySQL 用户管理</h3>
<pre><code class="hljs language-sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span> 查看所有用户
use mysql;
<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">user</span>;

<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 查看用户权限
how grants;
<span class="hljs-keyword">show</span> grants <span class="hljs-keyword">for</span> root;

<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 授予用户权限
<span class="hljs-keyword">grant</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">on</span> base.table <span class="hljs-keyword">to</span> hi;
<span class="hljs-keyword">grant</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">on</span> base.<span class="hljs-operator">*</span> <span class="hljs-keyword">to</span> <span class="hljs-string">&#x27;hi&#x27;</span>@<span class="hljs-string">&#x27;localhost&#x27;</span>;
<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 移除用户权限
<span class="hljs-keyword">revoke</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">on</span> base.table <span class="hljs-keyword">from</span> hi;
<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 刷新权限
flush privileges;

<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 创建用户
<span class="hljs-keyword">create</span> <span class="hljs-keyword">user</span> hi identified <span class="hljs-keyword">by</span> <span class="hljs-string">&#x27;passowrd&#x27;</span>;
<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 删除用户
<span class="hljs-keyword">drop</span> <span class="hljs-keyword">user</span> hi;

<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 改密码
<span class="hljs-keyword">set</span> password <span class="hljs-keyword">for</span> hi <span class="hljs-operator">=</span> Password(<span class="hljs-string">&#x27;new password&#x27;</span>);
<span class="hljs-operator">/</span><span class="hljs-operator">/</span> 改自己密码
<span class="hljs-keyword">set</span> password <span class="hljs-operator">=</span> Password(<span class="hljs-string">&#x27;new password&#x27;</span>);
</code></pre>
<p><a href="https://www.cnblogs.com/gavin110-lgy/p/5773981.html">https://www.cnblogs.com/gavin110-lgy/p/5773981.html</a>
<a href="https://www.cnblogs.com/clsn/p/8047028.html">https://www.cnblogs.com/clsn/p/8047028.html</a></p>
<h3 id="mysql-自己更新自己">MySQL 自己更新自己</h3>
<p><a href="https://www.cnblogs.com/jeffen/p/7016547.html">https://www.cnblogs.com/jeffen/p/7016547.html</a></p>
<p>mysql 不允许在同一次执行中自己更新自己 所以要套一次层中间查询 欺骗 mysql 以为不是同一张表</p>
<h3 id="mysql-系统体系架构">MySQL 系统体系架构</h3>
<p><img src="../../../img/20200611194657.webp" alt></p>
<p>根据图里我们可以发现，MySQL 系统最核心的“存储引擎”是以插件的形式为系统提供服务的，这种架构提供了与存储引擎实现无关的一系列标准服务支持，让引擎的实现能够解放出来。</p>
<p><strong>需要注意的是，存储引擎是基于表的，而不是数据库</strong></p>
<h3 id="mysql-各引擎介绍">MySQL 各引擎介绍</h3>
<p><strong>InnoDB</strong></p>
<p>MySQL5.5.8 以后的默认引擎，支持事物、行锁设计、外键、全文索引、非锁定读（默认读操作不会产生锁）</p>
<p>使用多版本并发控制（MVCC）来支持高并发性，并实现了 4 中标准的隔离级别，能避免幻读；还提供了许多其他的特性来支持高性能高并发；每张表按照主键顺序进行存放；</p>
<p><strong>MyISAM</strong></p>
<p>不支持事物、表锁设计，支持全文索引；</p>
<p>缓冲池不缓存数据，只缓存索引；</p>
<p><strong>NDB</strong></p>
<p>集群存储引擎，特点是数据都放在内存中，而非索引数据存在磁盘上，因此性能很快，但是连接操作时性能很差，因为该操作是在数据库完成的，而不是又引擎完成的；</p>
<p><strong>Memory</strong></p>
<p>数据都在内存中，数据库如果重启或者崩溃就会丢失所有数据，适合用于存储临时数据；默认使用哈希索引，而不是 B+树索引；</p>
<p>但是只支持表锁，所以并发性能差，不支持全部数据类型；</p>
<p><strong>Archive</strong></p>
<p>只支持 Insert 和 Select 操作，特点是会对数据进行压缩，压缩比高，适合存储归档数据、日志信息等；</p>
<p>虽然支持行锁，但是不支持事物；</p>
<h3 id="mysql-文件有哪些">MySQL 文件有哪些</h3>
<h4 id="日志文件">日志文件</h4>
<h5 id="错误日志">错误日志</h5>
<p>错误日志对 MySQL 的启动、运行、关闭过程进行记录，在 MySQL 用户操作出现错误的时候，错误信息会被记录在这个日志里</p>
<p>而系统也会在运行时发出一些警告，提示用户需要优化系统</p>
<p>通过以下命令查看日志的位置：</p>
<pre><code class="hljs language-sql"><span class="hljs-keyword">show</span> variables <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;log_error&#x27;</span>;
</code></pre>
<h5 id="慢查询日志">慢查询日志</h5>
<p>在 MySQL 启动的时候可以设置一个阈值，MySQL 系统就会将运行时间超过这个阈值的 SQL 语句记录到慢查询日志中，如果出现这种 SQL，你可能需要考虑是否能够优化或者拆分这个 SQL 业务相关的业务</p>
<h5 id="查询日志">查询日志</h5>
<p>记录了所有用户对 MySQL 数据库的请求信息</p>
<h5 id="二进制日志">二进制日志</h5>
<p>记录了所有 MySQL 数据库执行的更改操作，不包括 select 和 show 这类操作，二进制日志的作用主要有：</p>
<ul>
<li>恢复数据；</li>
<li>复制数据；</li>
<li>审计（判断是否有对数据库的注入攻击）；</li>
</ul>
<p>它和重做日志不同的是：</p>
<ol>
<li>重做日志是 InnoDB 引擎写的，是引擎层面的文件，而二进制日志是 MySQL 系统写的，任何引擎都会记录二进制文件日志；</li>
<li>格式也不同，二进制日志是一种逻辑日志，它记录的是操作的 SQL 语句，而重做日志是物理格式日志，记录的是对每个页的修改；所以重做日志比二进制日志的恢复速度快很多</li>
<li>写入磁盘的时间点不同，二进制日志只在<strong>事务提交完成后</strong>做一次写入，而重做日志会在事务<strong>进行中</strong>不断地写入；</li>
</ol>
<p>日志格式：</p>
<ul>
<li>STATEMENT：记录原生的 SQL 语句；</li>
<li>ROW：记录表的更改情况；</li>
<li>MIXED：一般使用 STATEMENT，一些情况下会使用 ROW 格式；</li>
</ul>
<h5 id="innodb-存储引擎文件">InnoDB 存储引擎文件</h5>
<ul>
<li>表空间文件：InnoDB 将存储的数据按照表空间进行存放，<strong>需要注意的是，这里还存放着 undo log 文件</strong>；</li>
<li>重做日志文件：记录了对于 InnoDB 引擎的事务日志；不同的操作有不同个重做日志格式；一般数据库里只会有两个重做日志文件，而且是循环使用的，一个写满了再换另一个；重做日志文件不能设置地太大，否则数据恢复会很长时间，也不能太小，否则会频繁切换重做日志，而且会频繁触发**<em>checkpoint</em>**导致性能抖动；</li>
</ul>
<h4 id="其他文件">其他文件</h4>
<ul>
<li>数据库系统的配置文件；</li>
<li>pid 文件；</li>
<li>套接字文件（socket）；</li>
<li>表结构定义文件</li>
</ul>
<h3 id="innodb-逻辑存储结构">InnoDB 逻辑存储结构</h3>
<p><img src="../../../img/20200612124701.webp" alt></p>
<p>所有数据都被存放在一个空间中，称为<strong>表空间</strong>，而表空间又由<strong>段（segment）、区（extent）、页（page）</strong>组成</p>
<p><strong>表空间</strong></p>
<p>表空间是 InnoDB 存储引擎的最高层，所有数据都存放在表空间，默认情况下只有一个共享表空间，如果用参数配置了<code>innodb_file_per_table</code>，那么每张表内的数据可以单独放在一个表空间内</p>
<p>每张表的单独表空间只存放数据、索引、插入缓冲 Bitmap 页，而其他的数据如回滚信息、插入缓冲索引页、系统事务信息、二次写缓冲等还是存放在原来的共享表空间里</p>
<p><strong>段</strong></p>
<p>表空间由段组成，常见的段有数据段、索引段、回滚段</p>
<p>由于 InnoDB 的存储引擎表是由索引组织的，所以数据即索引，索引即数据，这点在 B+树上的体现为：数据段为 B+树的子叶节点，索引段为 B+树的非索引节点</p>
<p><strong>区</strong></p>
<p>区由连续的页组成，每个区的大小都是 1MB，且为了保证页的连续性，引擎每次都会申请 4 个以上的区，默认情况下，一页有 16KB，于是一个区有 64 张连续的页；</p>
<p><strong>页</strong></p>
<p>页的默认大小为 16KB，但也可以通过配置来调整</p>
<p>常见的页类型有：</p>
<ul>
<li>数据页（B-tree Node）；</li>
<li>undo 页；</li>
<li>系统页；</li>
<li>事物数据页；</li>
<li>插入缓冲位图页；</li>
<li>插入缓冲空闲列表页；</li>
<li>未压缩的二进制大对象页；</li>
<li>已压缩的二进制大对象页；</li>
</ul>
<p><strong>行</strong></p>
<p>InnoDB 引擎是面向行的，每页最多允许存放 7992 行记录；</p>
<h3 id="innodb-约束类型概念">InnoDB 约束类型&amp;概念</h3>
<p>关系型数据库系统和文件系统的一个区别是，关系型数据库本身能保证数据的完整性，不需要程序控制</p>
<p>所有的关系型数据库都提供了约束机制，利用这个机制区保证数据完整性，一般来说，数据完整性包括：</p>
<ul>
<li>保证表中有一个主键，在 InnoDB 中可以使用 Primary Key 或者 Unique Key 约束来保证；</li>
<li>触发器；</li>
<li>域完整性，保证每列的值满足特定条件；</li>
</ul>
<p>在 InnoDB 中，提供的约束有：</p>
<ul>
<li>Primary Key；</li>
<li>Unique Key；</li>
<li>Foreign Key；</li>
<li>Default；</li>
<li>Not Null；</li>
<li>ENUM &amp; SET 约束，但是约束力很小，建议使用触发器；</li>
</ul>
<p>我们需要在创建表的时候就就列字段设定约束，也可以创建完之后用 alter table 来修改约束：</p>
<pre><code class="hljs language-sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> test (
    id <span class="hljs-type">int</span>,
    name <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>),
    id_card <span class="hljs-type">char</span>(<span class="hljs-number">18</span>),
    primiary key (id),
    <span class="hljs-keyword">unique</span> key (name)
);
</code></pre>
<p><strong>约束和索引的区别</strong></p>
<p>约束是逻辑上的概念，用来保证数据完整性，而索引是数据结构，不仅有逻辑概念，还代表着物理存储方式</p>
<h3 id="触发器概念">触发器概念</h3>
<p>MySQL5.1 之后，触发器的实现已经稳定，我们可以使用其来对数据进行约束，<strong>触发器的作用是在执行 INSERT、UPDATE、DELETE 操作的之前和之后自动调用 SQL 命令或者存储过程</strong></p>
<p>最多可以为一个表建立 6 个触发器：INSERT、UPDATE、DELETE 的 Before 和 After 各建立一个，目前只支持按照<strong>每行记录</strong>进行触发</p>
<p>通过触发器，用户可以实现 MySQL 本身不支持的<strong>特性</strong>，比如 Check 约束（检查某个值的合法性）、物化视图、高级复制、审计等等；</p>
<h3 id="视图概念">视图概念</h3>
<p>视图的主要用途就算被用作为抽象装置，一些程序如果不需要关心表的结构，只需要按照视图定义来<strong>取数据</strong>或者<strong>更新数据</strong>，因此视图在一定程度上起到了安全层的作用；</p>
<p>虽然视图只是虚拟表，没有物理文件，但是我们依然可以通过视图来<strong>更新数据</strong></p>
<h3 id="事务-acid">事务 ACID</h3>
<p><strong>原子性（Atomicity）</strong></p>
<p>是指整个事务是一个不可切分的工作单位，整个事务中所有的数据库操作要都成功，该事务才算成功；事务中任何一个语句失败则整个事务都失败；</p>
<p><strong>一致性（Consistency）</strong></p>
<p>指事务从一个状态转变到下一个状态的过程中，事务的开始和结束后，数据库的完整性约束没有被破坏；例如某个字段是唯一的，在事务进行当中如果破坏了该字段的唯一性，系统会撤销该事务，然会到初始状态；</p>
<p><strong>隔离性（Isolation）</strong></p>
<p>隔离性在 MySQL 的 InnoDB 中还代表着：并发控制、可串行化、锁等；</p>
<p>事务的隔离性要求每个对鞋事务的对象对其他事务的操作对象能够互相分离，即该事务提交前对其他事务都不可见，一般是用锁来实现；</p>
<p><strong>持久性（Durability）</strong></p>
<p>事务一旦提交，其结果是永久性的，即使发生宕机事故，数据库也能恢复该数据；</p>
<h3 id="sql-事务隔离级别">SQL 事务隔离级别</h3>
<p><strong>读未提交（READ UNCOMMITTED）</strong></p>
<p>能够读取到其他事务的正在修改中的<strong>未提交的结果</strong>，称之为脏读；而且性能上说这个隔离级别也没有比后面的级别好多少，反而问题多多</p>
<p><strong>读已提交（READ COMMITTED）</strong></p>
<p>大多数数据库的默认隔离级别（MySQL 不是），简单来说就是只能够读取到已经提交过的结果，但是在同一次事务中读取某个数据两次可能会得到两个不同的结果（假如其他事务同时对该数据提交了两次修改）；所以该级别也叫不可重复读（nonrepeatable read）</p>
<p><strong>可重复读（REPEATABLE READ)</strong></p>
<p>可重复读解决了脏读、多次读取不一致的问题，但在理论上，标准的可重复读没有能够解决幻读的问题，即某个事务在读取<strong>范围内数据</strong>的时候，另一个事务在这个范围又插了一条数据，原来的事务再次读取这个范围就会读取到<strong>幻行</strong>，导致上下文不一致；而 MySQL 的 InnoDB 通过多版本<strong>并发控制（MVCC）</strong>解决了这个问题</p>
<p><strong>串行化（SERIALIZABLE）</strong></p>
<p>最高级别，强制事务串行执行，避免前面的各种问题，简单说就是在读取的每行上都加了锁，所以这个隔离级别的性能会比较低；</p>
<h3 id="多版本并发控制（mvcc）">多版本并发控制（MVCC）</h3>
<p>MVCC 其实并不是一个标准，但是大多数数据库或者引擎都实现了它，可以简单将其理解为<strong>行级锁</strong>的一个变种，但它在很多情况下都避免了对行加锁因此开销小，阻塞率低</p>
<p>其基本思路是，所有操作后都会保留一个快照，事务的执行以快照版本为准，也就是说，无论一个需要时间的事务执行期间该记录被修改了多少次，该事务始终只看到该记录在该事务开始之前的样子，除非该事务自己修改了这个记录；所以根据事务开始的时机的不同，它看到的表数据可能不一样，但是一旦事务开启之后，它只能看到唯一一个版本的数据</p>
<p>每个引擎对这个机制的实现不同，InnoDB 的行为如下：</p>
<ul>
<li><p>select</p>
<ol>
<li>只查找版本早于当前事务版本的数据，保证事务读取的<strong>行</strong>：要么是事务开始前已经存在的，要么是事务自身修改或者拆入过的；</li>
<li>行的删除版本要么未定义，要么大于当前事务版本号，保证事务读取到的行在事务开始之前未被删除；</li>
</ol>
</li>
<li><p>insert/delete/update</p>
<p>都是对<strong>该行</strong>的版本号进行改动</p>
</li>
</ul>
<h3 id="mysql-中的死锁">MySQL 中的死锁</h3>
<p>一个简单的死锁复现：</p>
<ol>
<li>t1 开启事务，更新行 a，于是行 a 被 t1 锁住；</li>
<li>t2 开启事务，更新行 b，于是行 b 被 t2 锁住；</li>
<li>t1 想要更新行 b，无法获取锁，阻塞；</li>
<li>t2 想要更新行 a，无法获取锁，阻塞；</li>
</ol>
<p>数据库对死锁的处理实现了各种<strong>死锁检测</strong>和<strong>死锁超时</strong>，越复杂的系统，比如 InnoDB，越能检测到死锁的循环依赖，并立即返回一个错误；或者当等待锁时机过长的时候，放弃锁请求，但是一般不这样做；</p>
<p>InnoDB 的处理是：<strong>将持有最少行级排他锁的事务进行回滚</strong></p>
<h3 id="mysql-备份">MySQL 备份</h3>
<p>备份的分类如果按照<strong>备份方法</strong>可以分为：</p>
<ul>
<li><p>Hot Backup</p>
<p>在数据库运行期间直接备份，对正在运行的数据库没有任何影响；</p>
<blockquote>
<p>使用 MySQL 官方提供的热备工具<code>ibbackup</code>，其优点:</p>
<ul>
<li>不需要停机，在线备份，也不阻塞任何语句；</li>
<li>性能好，其本质是复制<strong>数据库文件</strong>和<strong>重做日志</strong>；</li>
<li>支持压缩；</li>
<li>支持跨平台</li>
</ul>
</blockquote>
</li>
<li><p>Cold Backup</p>
<p>在数据库停机的情况下备份，这种备份最简单，一般只需要直接复制数据库数据的物理文件即可；</p>
<blockquote>
<p>优点：</p>
<ul>
<li>备份简单，直接复制文件；</li>
<li>恢复简单，直接复制到指定位置即可；</li>
<li>恢复速度快，不需要执行任何语句和建立任何索引；</li>
</ul>
<p>缺点：</p>
<ul>
<li>物理文件通常比逻辑备份文件大很多；</li>
<li>不一定总是能跨平台；</li>
</ul>
</blockquote>
</li>
<li><p>Warm Backup</p>
<p>在数据库运行期间备份，但是会影响是数据库，比如会请求一些加锁操作；</p>
</li>
</ul>
<p>按照备份<strong>文件格式</strong>可以分为：</p>
<ul>
<li><p>逻辑备份</p>
<p>一般是复制 SQL 语句；</p>
</li>
<li><p>裸文件备份</p>
<p>直接复制数据库的物理数据文件，恢复的时间比逻辑备份短很多；</p>
</li>
</ul>
<p>按照备份<strong>文件内容</strong>又可以分为：</p>
<ul>
<li><p>完全备份</p>
<p>对整个数据集进行备份；</p>
</li>
<li><p>增量备份</p>
<p>在上传完全备份的几次上，对更改的数据进行备份；</p>
</li>
<li><p>日志备份</p>
<p>对数据库的二进制日志的备份，通常根据这个文件进行重放（replay）来完成数据库的恢复；</p>
</li>
</ul>
<h3 id="mysql-复制">MySQL 复制</h3>
<p><strong>复制（Replication）</strong>是 MySQL 提供的一种高可用高性能的解决方案，在大型应用中是必不可少的，其步骤为：</p>
<ol>
<li>主库需要记录二进制日志文件；</li>
<li>备库将主库的二进制日志文件复制到自己的<strong>中继日志（Replay Log）</strong>；</li>
<li>备库重放中继日志；</li>
</ol>
<p><img src="../../../img/20200618165816.webp" alt></p>
<h4 id="复制要解决的问题">复制要解决的问题</h4>
<ol>
<li>数据分布</li>
<li>负载均衡</li>
<li>备份</li>
<li>高可用性和故障切换</li>
<li>MySQL 升级测试</li>
</ol>
<h3 id="select-count-细节">Select count 细节</h3>
<h4 id="函数用法">函数用法</h4>
<p><img src="../../../img/15709530990912-1.webp" alt="img"></p>
<ol>
<li>COUNT(expr) ，返回 SELECT 语句检索的行中 expr 的值不为 NULL 的数量。结果是一个 BIGINT 值。</li>
<li>如果查询结果没有命中任何记录，则返回 0</li>
<li>但是，值得注意的是，<code>COUNT(*)</code> 的统计结果中，会<strong>包含</strong>值为 NULL 的行数。</li>
</ol>
<h4 id="相关问题">相关问题</h4>
<ol>
<li><p>为什么《阿里巴巴 Java 开发手册》中强制要求不让使用 <code>COUNT(列名)</code>或 <code>COUNT(常量)</code>来替代 <code>COUNT(*)</code>呢？</p>
<blockquote>
<p>不要使用 <code>count(列名)</code>或 <code>count(常量)</code>来替代 <code>count(*)</code>，<code>count(*)</code>是 SQL92 定义的标 准统计行数的语法，跟数据库无关，跟 NULL 和非 NULL 无关。 说明：<code>count(*)</code>会统计值为 NULL 的行，而 <code>count(列名)</code>不会统计此列为 NULL 值的行。</p>
</blockquote>
</li>
<li><p><code>COUNT(列名)</code>、<code>COUNT(常量)</code>和<code>COUNT(*)</code>之间的区别</p>
<blockquote>
<ol>
<li><code>COUNT(常量)</code> 和 <code>COUNT(*)</code>表示的是直接查询符合条件的数据库表的行数。而<code>COUNT(列名)</code>表示的是查询符合条件的列的值不为 NULL 的行数；</li>
<li>对于<code>COUNT(1)</code>和<code>COUNT(*)</code>，MySQL 的优化是完全一样的，根本不存在谁比谁快；</li>
<li><code>COUNT(字段)</code>多了一个步骤就是判断所查询的字段是否为 NULL，所以他的性能要比<code>COUNT(*)</code>慢；</li>
</ol>
</blockquote>
</li>
</ol>
<h3 id="mysql-内存占用太大">MySQL 内存占用太大</h3>
<pre><code>performance_schema_max_table_instances=400
table_definition_cache=400
table_open_cache=256
performance_schema = off
</code></pre>
