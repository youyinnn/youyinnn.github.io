<h3 id="helloworld">HelloWorld</h3>
<p>昨天的小米笔试题: <strong>请用 Lambda 写一个将 int 数组[1,2,3]转换为 String 数组[&quot;1&quot;,&quot;2&quot;,&quot;3&quot;]</strong></p>
<p>当时没写完整，就这个为例作为开始吧, 完整代码如下:</p>
<pre><code class="hljs language-java">  <span class="hljs-type">int</span>[] si = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>};
  Function&lt;<span class="hljs-type">int</span>[], String[]&gt; f = (<span class="hljs-type">int</span>[] ar) -&gt; {
      String[] ss = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[ar.length];
      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ar.length ; i++) {
          ss[i] = ar[i] + <span class="hljs-string">&quot;&quot;</span>;
      }
      <span class="hljs-keyword">return</span> ss;
  };
  System.out.println(Arrays.toString(f.apply(si)));
</code></pre>
<p>看不懂是不是?看不懂就对了,Lambda 是一个语法糖,它的语法你得看得懂,才知道上面的代码干了什么.</p>
<h3 id="语法">语法</h3>
<h4 id="要点-1-函数式接口的支持">要点 1-函数式接口的支持</h4>
<blockquote>
<p>语法必须要函数式接口的支持, 函数式接口: <strong>即接口中只有一个抽象方法</strong>.一般需要<code>@FunctionalInterface</code>注解修饰类.</p>
<p>我们称这个唯一的抽象方法为, <strong>函数方法</strong></p>
</blockquote>
<h4 id="要点-2-箭头语法">要点 2-箭头语法</h4>
<p>函数式写法格式, 分<strong>左右两边</strong>:</p>
<pre><code class="hljs language-lambda">  (param1, param2, ...) -&gt; {statement1;statement2;...;};
</code></pre>
<ul>
<li><p><strong>左边-参数列表</strong>-方法要传递的参数:</p>
<ul>
<li>根据泛型可以省略参数列表的类型</li>
<li>没有参数或者有两个以上参数时必须写<code>()</code>, 只有一个参数时可以省略<code>()</code></li>
</ul>
</li>
<li><p><strong>右边-语句块</strong>-表达式要执行的语句:</p>
<ul>
<li>如果只有一条语句, 则可以省略<code>{}</code>, 多条语句必须要<code>{}</code></li>
<li>如果有返回值, 且只有一条语句, 则可以<code>return</code>, 多条语句必须加</li>
</ul>
</li>
</ul>
<h4 id="要点-3-参数列表类型和返回值类型">要点 3-参数列表类型和返回值类型</h4>
<p>我们的 lambda 表达式, 最终还是得被一个<strong>函数式接口</strong>所引用, 我们的表达式可能有<strong>参数列表</strong>, 可能有<strong>返回值</strong>, 也可能都没有. 那么我们省略类型的时候, 函数是怎么判断参数列表类型和返回值类型的呢? 我们来看看这个接口</p>
<pre><code class="hljs language-java"><span class="hljs-meta">@FunctionalInterface</span>
<span class="hljs-keyword">interface</span> <span class="hljs-title class_">MyFunction</span>&lt;T, R&gt; {
    <span class="hljs-comment">/**
     * 函数方法:
     *  处理两个T类型的对象, 返回R类型的结果
     */</span>
    R <span class="hljs-title function_">get</span><span class="hljs-params">(T t1, T t2)</span>;
}
</code></pre>
<p>很容易就看出, 我们是根据接口上的<strong>泛型</strong>去规定<strong>参数列表类型</strong>以及<strong>返回值类型</strong>的, 当我们省略类型的时候, 因为 lambda 是<strong>依靠泛型填充类型</strong>, 编译的时候, 代码就已经根据上下文自动填补类型了, 比如说这里的<code>get(T t1, T t2)</code>方法, 你<strong>传递什么参数</strong>, 参数类型就是什么, <strong>方法体中实现的</strong>的返回语句是什么类型的, 函数的返回值类型就是什么</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T, R&gt; R <span class="hljs-title function_">invokeGet</span><span class="hljs-params">(T t1, T t2, MyFunction&lt;T, R&gt; mf)</span> {
        <span class="hljs-keyword">return</span> mf.get(t1, t2);
    }
}
</code></pre>
<p>我们可以如下省略类型的调用:</p>
<pre><code class="hljs language-java">    <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-number">12</span>);
    <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;efg&quot;</span>, <span class="hljs-number">13</span>);
    <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span>
            Main.invokeGet(p1, p2, (ax, bx) -&gt; ax.getName().length() + bx.getName().length());
</code></pre>
<p>正常的做法是:</p>
<pre><code class="hljs language-java">    <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span>
            Main.&lt;Person, Integer&gt;invokeGet(p1, p2, (ax, bx) -&gt; ax.getName().length() + bx.getName().length());
</code></pre>
<p>那么这里为什么可以省略? 因为我<code>invokeGet</code>的时候, 传进去的<strong>t1, t2</strong>是<strong>p1, p2</strong>, 所以<strong>T 类型</strong>被补充为<strong>Person 类型</strong>, 而对于返回值类型, 因为我们这里的方法体实现就一句话, 所以**{}**省略了, <strong>return</strong> 也省略了, 返回值类型就是语句<code>ax.getName().length() + bx.getName().length()</code>所运算出的类型.</p>
<h4 id="代码示例">代码示例</h4>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span>{

    <span class="hljs-comment">/**
     * 语法格式一: 无参 无返回值
     * 常用场景: 替代匿名内部类;
     *  () -&gt; System.out.println(&quot;xixi&quot;);
     */</span>
    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test1</span><span class="hljs-params">()</span>{
        <span class="hljs-type">Runnable</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> () -&gt; System.out.println(<span class="hljs-string">&quot;xixi&quot;</span>);
        run.run();
    }

    <span class="hljs-comment">/**
     * 语法二: 一个参数 无返回值
     * Tips: 一个参数的话 小括号可以省略不写了 甚至可以配合方法引用(如代码中)
     *
     *         Consumer&lt;String&gt; consumer = x -&gt; System.out.println(x);
     *         Consumer&lt;String&gt; consumer = (x) -&gt; System.out.println(x);
     *
     * 常用场景: 和Consumer接口配合
     */</span>
    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test2</span><span class="hljs-params">()</span>{
        Consumer&lt;String&gt; consumer = System.out::println;
        consumer.accept(<span class="hljs-string">&quot;haha&quot;</span>);
    }

    <span class="hljs-comment">/**
     * 语法三: 两个参数, 有返回值
     * Tips1:
     *  返回值类型在接口方法上已经定义, 参数列表类型已经被泛型规定好了也可以省略,如:
     *          int compare(T o1, T o2);
     *
     * Tips2:
     *  如果实现的方法体中有一条语句, 那么return和大括号可以省略不写
     *
     * Tips3:
     *  如果实现的方法体中有多条语句, 那么必须要大括号和return
     *
     * Tips4:
     *  Comparator接口中已经写好了常用的自然顺序比较或者逆序比较的默认方法可以直接用默认方法引用
     */</span>
    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test3</span><span class="hljs-params">()</span>{
        <span class="hljs-comment">//Comparator&lt;Integer&gt; comparator = Comparator.reverseOrder();</span>
        Comparator&lt;Integer&gt; comparator = (x, y) -&gt; y.compareTo(x);

        Comparator&lt;Integer&gt; comparator1 = (x, y) -&gt; {
            System.out.println(x + y);
            <span class="hljs-keyword">return</span> y.compareTo(x);
        };
    }

    <span class="hljs-comment">/**
     * Lambda表达式的高级用法:
     *  (1) 连续泛型指定参数和返回值的类型
     *  (2) 静态方法指定泛型调用
     *  (3) 传递函数式接口
     */</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T, R&gt; R <span class="hljs-title function_">invokeGet</span><span class="hljs-params">(T t1, T t2, MyFunction&lt;T, R&gt; mf)</span> {
        <span class="hljs-keyword">return</span> mf.get(t1, t2);
    }

    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test4</span><span class="hljs-params">()</span>{
        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-number">12</span>);
        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;uiop&quot;</span>, <span class="hljs-number">13</span>);
        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span>
                Main.invokeGet(p1, p2, (ax, bx) -&gt; ax.getName().length() + bx.getName().length());
        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span>
                Main.invokeGet(p1, p2, (ax, bx) -&gt; ax.getAge() + <span class="hljs-string">&quot; : &quot;</span> + bx.getAge());

        System.out.println(integer);
        System.out.println(s);
    }
}
</code></pre>
<h3 id="五大核心函数式接口">五大核心函数式接口</h3>
<p>前面我们说了, lambda 依赖函数式接口, Java8 已经写好了很多函数式接口了, 而其中最常用的就是接下来要介绍的<strong>五大核心函数式接口</strong>, 这样的函数式接口在 Java8 中到处都是.</p>
<p>所以说了解这<strong>五大核心函数式接口</strong>到底能干什么, 这点是非常重要的.</p>
<p>首先看看我写的笔试题的未完整版是什么样子的:</p>
<pre><code class="hljs language-java">  <span class="hljs-type">Function</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>[] arr) -&gt; {
      String[] s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[arr.length];
      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length ; i++) {
          s[i] = arr[i] + <span class="hljs-string">&quot;&quot;</span>;
      }
      <span class="hljs-keyword">return</span> s;
  };
</code></pre>
<p>再来看看完整版:</p>
<pre><code class="hljs language-java">  <span class="hljs-type">int</span>[] si = {<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>};
  Function&lt;<span class="hljs-type">int</span>[], String[]&gt; f = (<span class="hljs-type">int</span>[] ar) -&gt; {
      String[] ss = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[ar.length];
      <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; ar.length ; i++) {
          ss[i] = ar[i] + <span class="hljs-string">&quot;&quot;</span>;
      }
      <span class="hljs-keyword">return</span> ss;
  };
  System.out.println(Arrays.toString(f.apply(si)));
</code></pre>
<p>这和完整版相比, 缺少的是<code>Function</code>类后面的泛型定义, 所以这段代码是过不了的, 了解一下<strong>五大核心函数式接口</strong>,</p>
<h4 id="consumer-消费型接口">Consumer 消费型接口
<h5 id="源码">源码</h5>
<pre><code class="hljs language-java"><span class="hljs-meta">@FunctionalInterface</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Consumer</span>&lt;T&gt; {

    <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(T t)</span>;

    <span class="hljs-keyword">default</span> Consumer&lt;T&gt; <span class="hljs-title function_">andThen</span><span class="hljs-params">(Consumer&lt;? <span class="hljs-built_in">super</span> T&gt; after)</span> {
        Objects.requireNonNull(after);
        <span class="hljs-keyword">return</span> (T t) -&gt; { accept(t); after.accept(t); };
    }
}
</code></pre>
<h5 id="函数方法">函数方法</h5>
<pre><code class="hljs language-java">    <span class="hljs-keyword">void</span> <span class="hljs-title function_">accept</span><span class="hljs-params">(T t)</span>;
</code></pre>
<p>消费型接口, 意思就是**&quot;只进不出&quot;<strong>的表现, 所以我们看到方法并没有</strong>返回值类型**</p>
<h5 id="默认方法">默认方法</h5>
<p>这个方法相当于将两个<code>Consumer</code>函数组合在了一起, 形成一个新的<code>Consumer</code>函数, after 函数在源函数之后执行, 相当于一个**&quot;后置函数&quot;**</p>
<h5 id="示例">示例</h5>
<pre><code class="hljs language-java">    <span class="hljs-meta">@Test</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testConsumer</span><span class="hljs-params">()</span>{
        <span class="hljs-type">Person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-number">12</span>);
        <span class="hljs-type">Person</span> <span class="hljs-variable">p2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;uiop&quot;</span>, <span class="hljs-number">13</span>);

        Consumer&lt;Person&gt; gn =
            (person) -&gt; System.out.println(<span class="hljs-string">&quot;Name is : &quot;</span> + person.getName());
        Consumer&lt;Person&gt; ga =
            (person) -&gt; System.out.println(<span class="hljs-string">&quot;Age is : &quot;</span> + person.getAge());
        Consumer&lt;Person&gt; gnAndga = gn.andThen(ga);

        gn.accept(p1);
        ga.accept(p2);
        gnAndga.accept(p1);
    }
</code></pre>
<pre><code class="hljs language-console">Name is : abc
Age is : 13
Name is : abc
Age is : 12
</code></pre>
Supplier 供给型接口
<h5 id="源码-1">源码</h5>
<pre><code class="hljs language-java"><span class="hljs-meta">@FunctionalInterface</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Supplier</span>&lt;T&gt; {
    T <span class="hljs-title function_">get</span><span class="hljs-params">()</span>;
}
</code></pre>
<h5 id="函数方法-1">函数方法</h5>
<pre><code class="hljs language-java">    T <span class="hljs-title function_">get</span><span class="hljs-params">()</span>;
</code></pre>
<p><strong>&quot;有出没进&quot;</strong>, 供给型的函数接口.</p>
<h5 id="示例-1">示例</h5>
<pre><code class="hljs language-java"><span class="hljs-meta">@Test</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSupplier</span><span class="hljs-params">()</span>{
    Supplier&lt;Person&gt; supplier = () -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();
    <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> supplier.get();
    System.out.println(person);
}
</code></pre>
<h4 id="functiont-r-函数型接口">Function&lt;T, R&gt; 函数型接口</h4>
<h5 id="源码-2">源码</h5>
<pre><code class="hljs language-java"><span class="hljs-meta">@FunctionalInterface</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Function</span>&lt;T, R&gt; {

    R <span class="hljs-title function_">apply</span><span class="hljs-params">(T t)</span>;

    <span class="hljs-keyword">default</span> &lt;V&gt; Function&lt;V, R&gt; <span class="hljs-title function_">compose</span><span class="hljs-params">(Function&lt;? <span class="hljs-built_in">super</span> V, ? extends T&gt; before)</span> {
        Objects.requireNonNull(before);
        <span class="hljs-keyword">return</span> (V v) -&gt; apply(before.apply(v));
    }

    <span class="hljs-keyword">default</span> &lt;V&gt; Function&lt;T, V&gt; <span class="hljs-title function_">andThen</span><span class="hljs-params">(Function&lt;? <span class="hljs-built_in">super</span> R, ? extends V&gt; after)</span> {
        Objects.requireNonNull(after);
        <span class="hljs-keyword">return</span> (T t) -&gt; after.apply(apply(t));
    }

    <span class="hljs-keyword">static</span> &lt;T&gt; Function&lt;T, T&gt; <span class="hljs-title function_">identity</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> t -&gt; t;
    }
}
</code></pre>
<h5 id="函数方法-2">函数方法</h5>
<pre><code class="hljs language-java">    R <span class="hljs-title function_">apply</span><span class="hljs-params">(T t)</span>;
</code></pre>
<p>就像一个函数, <strong>&quot;有进有出&quot;</strong></p>
<h5 id="默认方法-1">默认方法</h5>
<p><code>andThen</code>方法我们在消费型接口的时候已经介绍过了, 然后<code>compose</code>方法和这个方法差不多, 只不过这个方法是在源函数之前执行, 相当于是一个**&quot;前置函数&quot;**</p>
<h5 id="静态方法">静态方法</h5>
<p>这个方法暂时还没摸到有什么作用</p>
<h5 id="示例-2">示例</h5>
<pre><code class="hljs language-java"><span class="hljs-meta">@Test</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFunction</span><span class="hljs-params">()</span>{
    <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();
    Function&lt;Person, Person&gt; function = (ps) -&gt; {
        System.out.println(<span class="hljs-string">&quot;nothing change~&quot;</span>);
        <span class="hljs-keyword">return</span> ps;
    };
    function = function.compose((ps) -&gt; {
        System.out.println(<span class="hljs-string">&quot;before&quot;</span>);
        ps.setName(<span class="hljs-string">&quot;xixi&quot;</span>);
        <span class="hljs-keyword">return</span> ps;
    });
    function = function.andThen((ps) -&gt; {
        System.out.println(<span class="hljs-string">&quot;after&quot;</span>);
        ps.setAge(<span class="hljs-number">15</span>);
       <span class="hljs-keyword">return</span> ps;
    });
    System.out.println(function.apply(person));
}
</code></pre>
<pre><code class="hljs language-console">before
nothing change~
after
Person{name=&#x27;xixi&#x27;, age=15}
</code></pre>
Predicate 条件预测型接口
<h5 id="源码-3">源码</h5>
<pre><code class="hljs language-java"><span class="hljs-meta">@FunctionalInterface</span>
<span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Predicate</span>&lt;T&gt; {

    <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(T t)</span>;

    <span class="hljs-keyword">default</span> Predicate&lt;T&gt; <span class="hljs-title function_">and</span><span class="hljs-params">(Predicate&lt;? <span class="hljs-built_in">super</span> T&gt; other)</span> {
        Objects.requireNonNull(other);
        <span class="hljs-keyword">return</span> (t) -&gt; test(t) &amp;&amp; other.test(t);
    }

    <span class="hljs-keyword">default</span> Predicate&lt;T&gt; <span class="hljs-title function_">negate</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> (t) -&gt; !test(t);
    }

    <span class="hljs-keyword">default</span> Predicate&lt;T&gt; <span class="hljs-title function_">or</span><span class="hljs-params">(Predicate&lt;? <span class="hljs-built_in">super</span> T&gt; other)</span> {
        Objects.requireNonNull(other);
        <span class="hljs-keyword">return</span> (t) -&gt; test(t) || other.test(t);
    }

    <span class="hljs-keyword">static</span> &lt;T&gt; Predicate&lt;T&gt; <span class="hljs-title function_">isEqual</span><span class="hljs-params">(Object targetRef)</span> {
        <span class="hljs-keyword">return</span> (<span class="hljs-literal">null</span> == targetRef)
                ? Objects::isNull
                : object -&gt; targetRef.equals(object);
    }
}
</code></pre>
<h5 id="函数方法-3">函数方法</h5>
<pre><code class="hljs language-java">    <span class="hljs-type">boolean</span> <span class="hljs-title function_">test</span><span class="hljs-params">(T t)</span>;
</code></pre>
<p>给个 T, 返回个布尔值</p>
<h4 id="默认方法-2">默认方法</h4>
<p>经过前几个接口的默认方法, 我们现在应该很容易能理解默认方法的作用了, 特别是对于<strong>条件预测型接口</strong>的默认方法, <code>and</code> <code>or</code> <code>negate</code> 分别代表用<strong>和</strong>的方式连接两个条件, 用<strong>与</strong>的方式连接两个条件, 用<strong>非</strong>呈现这个条件.</p>
Comparator 比较器接口
<p>这个接口里的默认方法就更多, 牵扯到的使用情况就更复杂, 有待日后研究, 其实本来只是**&quot;四大核心函数式接口&quot;**的, 这个我放在第五个, 因为这个接口里的方法有很有价值.</p>
</h4>