<h3 id="前言">前言</h3>
<p>这回说说 Java 并发编程第四坎，最常用的<strong>volatile 和 synchronized 关键字</strong>，这两个关键字是理解 java 同步编程的第一步，特别是<strong>synchronized 关键字</strong></p>
<p>而在<em>《Java 多线程编程核心技术》</em>的第 2.1 节中，作者不经意的道出了<strong>线程同步的真谛之一：避免脏读</strong></p>
<ul>
<li><strong>关键字的解说</strong><ul>
<li><strong>volatile 的含义、底层实现和使用</strong></li>
<li><strong>synchronized 的含义、底层实现和使用</strong><ul>
<li>Java 中的几种锁</li>
<li>Java 中的锁到底是什么？</li>
</ul>
</li>
<li><strong>两个关键字的对比</strong></li>
</ul>
</li>
</ul>
<hr>
<h3 id="关键字的解说">关键字的解说</h3>
<p>关键字的解说分别从三个方面进行，首先解释关键字的基本含义，然后上一些基本使用的代码，最后结合两本书来说说关键字的底层实现。</p>
<p>以下两段摘自<em>《艺术》P96</em></p>
<blockquote>
<p><strong>关键字 volatile</strong>可以用来修饰字段（成员变量），就是告知程序任何对该变量的访问均需要从共享内存中获取，而对它的改变必须同步刷新回共享内存，它能保证所有线程对变量访问的<strong>可见性</strong>。</p>
</blockquote>
<blockquote>
<p><strong>关键字 synchronized</strong>可以修饰方法或者同步块，它主要保证多线程在同一时刻，只能有一个线程处于同步块或者同步方法中，它保证了线程对变量访问的<strong>可见性</strong>和<strong>排他性</strong>。</p>
</blockquote>
<h4 id="volatile-的含义、底层实现和使用">volatile 的含义、底层实现和使用</h4>
<h5 id="volatile-的含义">volatile 的含义</h5>
<blockquote>
<p>Java 语允许线程访问共享变量，为了确保共享变量可以被准确和一致地更新，线程应该确保通过<strong>排他锁</strong>单独获取这个变量。</p>
</blockquote>
<p>如果一个变量被声明为 volatile，Java 线程内存模型确保所有的线程看到这个变量的值是一致的。</p>
<p>关于 Java 内存模型我们放到以后再说，总的来说，使用<code>volatile</code>声明了的变量，可以说任何对该变量的读写都是上了锁的，这种锁只针对改变量，是一种轻量级的锁</p>
<p>共享变量是什么概念呢？我们知道，线程运行的时候，很多时候是使用自己创建的私有线程栈空间去操作数据的，那么每个线程都操作的自己的栈空间，导致同一个意义的值在不同的线程中可能有不同的值，所以 volatile 变量强制让线程只从共享内存的意义上去操作变量，保证了<strong>可见性</strong></p>
<p><img src="../../img/TIM%E5%9B%BE%E7%89%8720180717215051.png" alt=""></p>
<h5 id="底层实现">底层实现</h5>
<p>让我们来看看在对 volatile 变量进行写操作的时候，CPU 会干哪些事：</p>
<p>Java 代码：</p>
<pre><code class="hljs language-java">instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Singleton</span>()	<span class="hljs-comment">//instance是volatile变量</span>
</code></pre>
<p>转变为底层汇编代码：</p>
<pre><code class="hljs language-assembly">0x01a3deld: movb $0*0,0*1104800(%esi);
0x01a3de24: lock addl $0*0,(%esp);
</code></pre>
<p>需要注意的是第二行代码，有 volatile 修饰的变量进行写操作的时候会多出第二行汇编代码，关键是里面的<strong>lock</strong>前缀的指令，在多核处理器下会有：</p>
<ol>
<li>将当前处理器缓存行的数据写回到系统内存</li>
<li>这个写回内存的操作会使<strong>其他 CPU 里缓存了该内存地址的数据无效</strong></li>
</ol>
<p>因为要提高处理速度，处理器并不直接和内存通信，而是先把系统内存的数据读到内部缓存后再进行操作，但是操作完之后何时将数据写到内存是不确定的。</p>
<p>如果对生命了 volatile 的变量进行写操作，JVM 就会向处理器发出一条<strong>lock 前缀指令</strong>，将这个变量所在的缓存行写回到内存，但是就算写回内存，其他处理器的缓存行的值还是旧值，所以需要一种机制：</p>
<p><strong>缓存一致性协议：为了保证各个处理器的缓存是一致的，每个处理器通过嗅探在总线上传播的数据来检查自己的数据是否过期，如果过期则将自己缓存行中的值设置为无效，等待下次时机再去内存中取有效值。</strong></p>
<p>上面的两条规则也是实现 volatile 关键字的两条原则：</p>
<ol>
<li>Lock 前缀指令让处理器缓存写回内存</li>
<li>步骤 1 后，通过缓存一致性协议，让其他处理器的缓存行中的该值无效</li>
</ol>
<h5 id="使用">使用</h5>
<p>volatile 的使用非常简单，有 volatile 修饰的变量天然是一个<strong>“受保护”</strong>的临界资源，对于变量的赋值和访问天然上锁</p>
<pre><code class="hljs language-java">    <span class="hljs-keyword">private</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">int</span> <span class="hljs-variable">mutex</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMutex</span><span class="hljs-params">(<span class="hljs-type">int</span> mutex)</span>{
        <span class="hljs-built_in">this</span>.mutex = mutex;
    }
    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMutex</span><span class="hljs-params">()</span>{
        <span class="hljs-keyword">return</span> mutex;
    }
</code></pre>
<p>但是我们需要注意的是，<strong>volatile 关键字只能对一个原子操作保持同步！</strong></p>
<p>常见的陷阱是：</p>
<pre><code class="hljs language-java">    i++;	<span class="hljs-comment">// i是volatile变量</span>
</code></pre>
<p>这行代码是否线程安全，答案是否定的，i++这行代码是分两步进行的：</p>
<pre><code class="hljs language-java">    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>;
    i = temp;
</code></pre>
<p>这样的两步操作有可能会引发线程安全问题，有可能就在这两行代码中间有多个线程进行操作，i 可能变成了脏数据</p>
<h4 id="synchronized-的含义、底层实现和使用">synchronized 的含义、底层实现和使用</h4>
<p>对于这个关键字，在并发里也是非常重要了，在 Java SE1.6 之前，很多人把它称之为重量级锁，但是在 1.6 之后，很多情况下它变得不是那么重量了，为了减少获取锁和释放锁带来的性能消耗，Java SE1.6 引入了<strong>偏向锁</strong>和<strong>轻量级锁</strong>，在本节中间会讨论锁的存储和升级</p>
<h5 id="synchronized-的含义">synchronized 的含义</h5>
<blockquote>
<p>Java 中的每个对象都可以作为<strong>“锁”</strong>，使用 synchronized 关键字可以表现为：</p>
<ul>
<li>可以修饰在在方法上，则锁是当前调用方法的对象</li>
<li>可以在修饰在静态方法上，锁是当前类的 Class 对象</li>
<li>可以作为同步方法快，锁是括号里配置的对象</li>
</ul>
<p>当一个线程视图要访问同步代码的时候，它首先要获得锁，<strong>退出锁范围或者抛出异常的时候，必须要释放锁</strong></p>
</blockquote>
<h5 id="底层实现-1">底层实现</h5>
<p>JVM 规范中说明了 synchronized 的实现原理：JVM 基于进入和退出 Monitor 对象来实现方法同步和代码块同步，但是两者的实现细节不一样。</p>
<p>代码块同步是使用<code>monitor.enter</code>和<code>monitor.exit</code>指令实现的，而方法同步虽然实现不一样，但是也可以用这样的方法去实现。</p>
<p><code>monitor.enter</code>指令是在编译后插入到同步代码块的开始位置，而<code>monitor.exit</code>是插入到方法结束或者异常处，JVM 要保证每个<code>monitor.enter</code>都要有<code>monitor.exit</code>和之匹配，任何对象都有一个 monitor 与之关联，当一个 monitor 被线程持有之后，它就会锁定，其他不相干的线程无法一同持有该锁</p>
<h5 id="java-中的锁到底是什么">Java 中的锁到底是什么</h5>
<p>接下来这节是重点重点重点重点重点重点重点！！！</p>
<p>基于上面的机制，我们可以来说说 Java 中的锁到底是什么</p>
<p>以下摘自<em>《艺术》P96-98</em></p>
<blockquote>
<p>首先我们看一段代码：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Syn</span>{
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(Stirng[] args)</span>{
        <span class="hljs-comment">// syn代码块</span>
        <span class="hljs-keyword">synchronized</span>(Syn.class){}
        <span class="hljs-comment">// 静态同步方法</span>
        m();
    }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>{}
}
</code></pre>
<p>在 Syn.class 同级目录执行<code>javap-v Syn.class</code>，部分输入如下：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(java.lang.String[])</span>;
    Code:
        stack=<span class="hljs-number">2</span>, locals=<span class="hljs-number">1</span>, args_size=<span class="hljs-number">1</span>
        <span class="hljs-number">0</span>: ldc
        <span class="hljs-number">2</span>: dup
        <span class="hljs-number">3</span>: monitorenter	<span class="hljs-comment">// 这个地方监视器进入</span>
        <span class="hljs-number">4</span>: monitoreit	<span class="hljs-comment">// 监视器退出</span>
        <span class="hljs-number">5</span>: invokestatic <span class="hljs-comment">// m()</span>
        <span class="hljs-number">8</span>: <span class="hljs-keyword">return</span>

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">()</span>;
    flags: ACC_PUBLIC, ACC_STATIC, ACC_SYNCHRONIZED
        Code:
            stack=<span class="hljs-number">0</span>, locals=<span class="hljs-number">0</span>, args_size=<span class="hljs-number">0</span>
            <span class="hljs-number">0</span>: <span class="hljs-keyword">return</span>
</code></pre>
<p>上面的 class 信息中，同步块是使用使用<code>monitor.enter</code>和<code>monitor.exit</code>指令实现的</p>
<p>而同步方法则是使用<code>ACC_SYNCHRONIZED</code>修饰符完成的</p>
<p>无论是那种方法，本质都是对一个对象的监视器进行获取，这个获取的过程是<strong>排他的</strong></p>
</blockquote>
<p>之前反复强调<strong>“锁”、“监视器”</strong>，我们模糊地知道<strong>“锁”</strong>是干嘛的，但什么是<strong>“监视器”</strong>？<em>《艺术》</em>告诉你答案！</p>
<blockquote>
<p>任意一个对象都拥有自己的<u>监视器</u>，当这个对象由同步块或者这个对象的同步方法调用的时候，执行方法的线程必须先获取到对象的监视器才能够进入同步块或者同步方法中，而没有获取到监视器（执行该方法）的线程会被阻塞在同步块和同步方法的入口处，进入<strong>BLOCKED</strong>状态</p>
</blockquote>
<p>引用书上的图来说明：</p>
<p><img src="../../img/monitor.png" alt=""></p>
<p>如图所示，<strong>监视器负责坚定的维护一个同步队列，所有尝试获取监视器而失败的线程，都会在该监视器维护的同步队列后面排队，直到被唤醒或者出现意外情况</strong></p>
<p>所以从这个意义上来说，监视器可以说是一把钥匙，拿到钥匙（监视器）的人才可以进屋搞事情，没钥匙的人得先在门外（锁外）排队等，完事了的人（上一个拿到监视器的人退出锁区）出门走的时候，把钥匙交给当前正在排队的队伍最前面的人</p>
<p>所以优先级什么的，可以说是插队，意外情况比如抛异常可以说是中途离队</p>
<p>于是我们需要清楚的认识：<strong>门可以有多个，但是锁只有一把，一把锁一条队！要使用这把锁，上一个锁持有者没释放锁之前，你就去排队吧！</strong></p>
<h5 id="锁的升级和实现">锁的升级和实现</h5>
<p>Java SE1.6 以后，锁一共有四个状态，从低到高一共是：无锁状态、偏向锁状态、轻量级锁状态和重量级锁状态</p>
<p>这几个状态会根据竞争的激烈情况逐渐升级，但是要注意：<u>锁可以升级但是不能降级</u></p>
<h6 id="偏向锁">偏向锁</h6>
<p><strong>偏向锁的含义：</strong>如果总是同一线程某时段多次访问同步数据，则锁的意义不大。</p>
<p><strong>偏向锁的实现：</strong>当一个线程访问同步块并获取到锁的时候，会在对象头和栈帧中的锁记录里存储偏向锁的线程 ID，以后在没有争夺的时间段里，该线程获进入和退出同步块的时候不需要进行 CAS 操作来加锁和解锁</p>
<p><strong>偏向锁的撤销：</strong>偏向锁使用了一种<u>等到有竞争</u>的时候才解锁的机制</p>
<p>我将持有偏向锁的线程称为偏向线程，偏向锁的撤销机制指的是：当偏向线程执行过程中，有其他线程尝试竞争锁的时候，<u>偏向锁首先会暂停偏向线程，然后检查偏向线程是否存活，如果不存活，则对象头设置为无锁状态；如果存活，会执行偏向锁的栈，遍历偏向锁的竞争记录，最后偏向锁要么重新偏向于其他线程，要么恢复到无锁状态或者升级锁；这波操作做完之后，再唤醒原来的偏向线程</u></p>
<p>偏向锁要注意的事情：</p>
<ol>
<li>偏向锁机制的启动有延迟，一般是 Java 程序启动的几秒之后才启动这个机制，可以使用 JVM 参数来关闭延迟</li>
<li>还可以用 JVM 参数来关闭偏向锁，那么程序默认都会使用轻量级锁</li>
</ol>
<h6 id="轻量级锁">轻量级锁</h6>
<p><strong>轻量级锁的含义：</strong>出现竞争的时候，线程并不阻塞，而是企图使用自旋的方式来继续尝试获取锁</p>
<p><strong>轻量级锁的加锁：</strong></p>
<ol>
<li>线程在执行同步块的之前，JVM 首先在<u>当前线程的栈帧</u>中创建用于存储锁记录的空间，并把对象头中的 Mark Word 复制到锁记录中，这部操作官方叫<strong>Displaced Mark Word</strong></li>
<li>然后线程要获取锁的时候，会尝试使用 CAS 将对象头中的 Mark Word 替换为指向锁记录的指针，如果成功，则获取到锁，如果失败，则表示有其他线程在使用锁或者先你一步竞争锁，则当前线程尝试使用<strong>自旋（用一个合理的永真循环来不停的试着获取锁）</strong>来获取锁</li>
</ol>
<p><strong>轻量级锁的解锁：</strong>解锁的时候，会使用 CAS 操作将<strong>Displaced Mark Word</strong>替换回对象头，如果成功，则表示没有发生竞争，如果失败，表示当前锁存在竞争，<u>锁就会膨胀成重量级锁</u></p>
<p>书里有一张图描述了膨胀的过程，我简单总结一下：两个线程 AB 分别访问同步块，同时尝试<u><strong>分配栈空间、复制 Mark Word 到栈</strong></u>，加入线程 A 比 B 快，则线程 A 成功<u><strong>使用 CAS 操作将 Mark Word 替换为轻量级锁，并执行同步块；</strong></u>此时线程 B<u><strong>尝试自旋获取锁，一段时间后未果，将锁修改为重量级锁，线程 B 阻塞；</strong></u>再回去看线程 A，线程 A 执行完同步语句块之后，<u><strong>尝试 CAS 替换会 Mark Word，但是已经被线程 B 修改了，所以失败，线程 A 释放锁并唤醒线程 B</strong></u>；线程 B 重新竞争同步语句块；</p>
<p>在线程 B<strong>自旋失败，打算膨胀的那一刻起，锁就已经升级了！</strong></p>
<h5 id="锁的优缺点对比">锁的优缺点对比</h5>
<table>
<thead>
<tr>
<th align="center">锁</th>
<th align="center">优点</th>
<th align="center">缺点</th>
<th align="center">适用场景</th>
</tr>
</thead>
<tbody><tr>
<td align="center">偏向锁</td>
<td align="center">同线程的加锁解锁不需要消耗，和执行非同步方法相比速度相差纳秒级别</td>
<td align="center">如果线程存在竞争，会带来额外的锁撤销的消耗</td>
<td align="center">适用于只有一个线程访问同步块场景</td>
</tr>
<tr>
<td align="center">轻量级锁</td>
<td align="center">竞争线程不会阻塞，提高相应速度</td>
<td align="center">如果始终得不到锁，会消耗大量的 CPU 资源</td>
<td align="center">追求响应时间，同步块执行速度快</td>
</tr>
<tr>
<td align="center">重量级锁</td>
<td align="center">不用自旋，消耗少</td>
<td align="center">线程阻塞，响应慢</td>
<td align="center">追求吞吐量，同步块执行时间长</td>
</tr>
</tbody></table>
<h4 id="synchronized-关键字使用须知">Synchronized 关键字使用须知</h4>
<p>上面说了很多原理性的东西，现在.....我们还是来说原理，现在主要是说一些该关键字的使用的注意事项</p>
<h5 id="1-脏读的情况">1. 脏读的情况</h5>
<p>什么是脏读？脏读就是程序读到了不完整的数据，这是<strong>读取操作没有同步处理的原因</strong></p>
<p>什么又是不完整的数据？也就是在一次原子的更新过程中，程序在更新过程还没有完成的时候就读取了整个数据</p>
<p>比如我们的一个线程意图是将<strong>A（1，2，3）</strong>更新为<strong>A（4，5，6）</strong>的，虽然更新操作实现了同步，同一时刻只能保证一个程序对数据进行更新，但是读取操作没有进行同步，有可能有更新操作更新到一部分的时候<strong>A（4，5，3）</strong>，数据被错误地读取到了，这个脏读值是无效的</p>
<p>如何避免脏读？<strong>保证读取方法也被包含在同步块中或者方法本身就是同步方法，最重要的一点是，读取方法和更新方法所面向的监视器得的同一个监视器！不要排错队了！</strong></p>
<h5 id="2-锁重入">2. 锁重入</h5>
<p>锁重入的概念挺简单：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">synchronized</span>(obj a){
    <span class="hljs-comment">// some code before</span>
    <span class="hljs-keyword">synchronized</span>(the same obj a){
        <span class="hljs-comment">// another code in here</span>
    }
    <span class="hljs-comment">// blablabla</span>
}
</code></pre>
<p>当然上面的代码是一个错误的示范，重入不是这么重入的，这样的重入没有意义，但实际上，有意义的锁重入从方法栈的角度来说，确实就是这样的，比如：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">a</span><span class="hljs-params">()</span>{
    <span class="hljs-comment">// a code</span>
    b();
}

<span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">b</span><span class="hljs-params">()</span>{
    <span class="hljs-comment">// b code</span>
    c();
}

<span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">c</span><span class="hljs-params">()</span>{
    <span class="hljs-comment">// c code</span>
}
</code></pre>
<p>为什么可以说这种锁重入是有意义的呢？我觉得也没什么意义，一旦某个线程拿到 a 方法的执行权之后，该对象下所有的同步方法，是无法被其他线程调用的，这里的意义只是，abc 三个方法需求的是同一个锁，也就是三个门用的是同一把钥匙，你既然已经拿到钥匙了，那么三个门你想怎么开就怎么开</p>
<h5 id="3-有异常-则放锁">3. 有异常 则放锁</h5>
<p>基本的机制，贯彻整个同步知识，但是容易忽略掉</p>
<h5 id="4-代码块之间的同步性">4. 代码块之间的同步性</h5>
<p>在使用同步块的情况下，如果有多个同步块持有的是同一个锁，在其中一个同步块被访问的时候，该锁就被该线程持有了，那么该锁的同步块无法被其他线程锁访问，说白了：<strong>钥匙只有一把！谁拿到钥匙，谁开锁进门！</strong></p>
<h5 id="5-对象的同步方法之间的同步性">5. 对象的同步方法之间的同步性</h5>
<p>多个线程调用同一对象中不同的同步方法或者 synchronized(this)方法块的时候，多线程的调用效果是同步的，因为：<strong>拿的是一把锁，排的是一条队！</strong></p>
<h5 id="6-class-锁">6. Class 锁</h5>
<p>Class 锁可以对改类的所有对象实例起同步作用，基于上述反复强调的原理，<u>同步 synchronized（class）代码块的作用和 synchronized static 方法的作用是一样的</u></p>
<h5 id="7-常量池对象作为锁的注意事项">7. 常量池对象作为锁的注意事项</h5>
<p>String 因为有常量池去管理，所以有可能两个变量引用的是同一个 String 常量对象，尽量不要使用 String 直接量作为锁，宁可 new 一个作为锁</p>
<h4 id="volatile-和-synchronized-的对比">Volatile 和 Synchronized 的对比</h4>
<table>
<thead>
<tr>
<th align="center">关键字</th>
<th align="center">性能</th>
<th align="center">响应</th>
<th align="center">安全性</th>
<th align="center">场景</th>
</tr>
</thead>
<tbody><tr>
<td align="center">volatile</td>
<td align="center">快</td>
<td align="center">不会阻塞</td>
<td align="center">只能保证数据可见性，不能保证原子性</td>
<td align="center">解决变量在多个线程之间的可见性</td>
</tr>
<tr>
<td align="center">synchronized</td>
<td align="center">虽然没 volatile 快，但是速度还是可以接受的</td>
<td align="center">会阻塞</td>
<td align="center">可以保证操作的原子性，<strong>也可以间接保证数据可见性</strong></td>
<td align="center">解决多个线程之间访问资源的同步性</td>
</tr>
</tbody></table>
<p>然而对于 synchronizrd<strong>可以间接保证数据可见性</strong>，暂时需要找个合适的方法去验证</p>
<h3 id="-关于-synchronized-间接保证数据同步性的问题">* 关于 synchronized 间接保证数据同步性的问题</h3>
<p>首先我们准备一个类作为验证区：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BService</span> {
    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">continueRun</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runMethod</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">while</span>(continueRun == <span class="hljs-literal">true</span>) {
            <span class="hljs-keyword">try</span> {Thread.sleep(<span class="hljs-number">10</span>);
            } <span class="hljs-keyword">catch</span> (InterruptedException e) {e.printStackTrace();}
        }
        System.out.println(<span class="hljs-string">&quot;停下来了！&quot;</span>);
    }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> {continueRun = <span class="hljs-literal">false</span>;}
}
</code></pre>
<p>可以看到，该类有一个 run，一旦执行方法，只有等到<code>continueRun</code>被置否的时候，也就是说对象调用 stop 的时候，才会停下来，而我们在 run 方法里面，尝试睡眠 10ms</p>
<p>然后我们把这个类对象放到多线程场景当中去：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> {
    <span class="hljs-keyword">private</span> BService service;
    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadA</span><span class="hljs-params">(BService service)</span> {<span class="hljs-built_in">this</span>.service = service;}
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> {service.runMethod();}
}

<span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> {
    <span class="hljs-keyword">private</span> BService service;
    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadB</span><span class="hljs-params">(BService service)</span> {<span class="hljs-built_in">this</span>.service = service;}
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> {service.stop();}
}
</code></pre>
<p>线程 A 负责跑，线程 B 负责停，然后是我们的 main 方法：</p>
<pre><code class="hljs language-java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException {
        <span class="hljs-type">BService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BService</span>();
        <span class="hljs-type">ThreadA</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadA</span>(service);
        a.start();
        Thread.sleep(<span class="hljs-number">1000</span>);
        <span class="hljs-type">ThreadB</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadB</span>(service);
        b.start();
        System.out.println(<span class="hljs-string">&quot;已经发起停止命令了！&quot;</span>);
    }
</code></pre>
<p>需要注意的是，这里 AB 线程虽然用的是同一个对象，但是因为线程私有栈的原因，每个线程虽然用的是同一个对象去调用方法，但是对象中的值在各自线程中有自己的副本，所以 B 线程置否了<code>continueRun</code>变量，但是线程 A 并不知道这个情况，除非<strong>B 置否的变量被同步到共享内存，而线程 A 放弃自己的副本值，采用共享内存的值</strong></p>
<h4 id="空闲-cpu-同步内存？">空闲 CPU 同步内存？</h4>
<p>上面加粗的内容就是<strong>内存可见性</strong>的保证，在当前试验区类中，并没有做明显的保证线程安全的举措，但是当你运行程序你会发现，B 线程是可以停止 A 线程的，这是为什么？我在一篇博客中看到了一个有意思的想法：</p>
<blockquote>
<p>实际上，JVM 对于现代的机器做了最大程度的优化，也就是说，最大程度的保障了线程和主存之间的及时的同步，也就是相当于虚拟机尽可能的帮我们加了个 volatile，但是，当 CPU 被一直占用的时候，同步就会出现不及时，也就出现了后台线程一直不结束的情况。</p>
<p><em>参考：<a href="https://www.cnblogs.com/cookiezhi/p/5774583.html">https://www.cnblogs.com/cookiezhi/p/5774583.html</a></em></p>
</blockquote>
<p>所以，当我们的线程在沉睡了 10ms 的时候，CPU 就有空闲时间去进行内存同步了，于是就有了线程 A 看见了线程 B 置否了变量</p>
<h4 id="无意义的-synchronized-块保证同步内存？">无意义的 synchronized 块保证同步内存？</h4>
<p>来看看为什么我不认同<em>《技术》</em>一书上说的<strong>“syn 块具有同步功能”</strong>，首先上他所说的，没有内存可见的主体代码：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BThreadTest</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> InterruptedException {
        <span class="hljs-type">BService</span> <span class="hljs-variable">service</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BService</span>();
        <span class="hljs-type">ThreadA</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadA</span>(service);
        a.start();
        Thread.sleep(<span class="hljs-number">1000</span>);
        <span class="hljs-type">ThreadB</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ThreadB</span>(service);
        b.start();
    }
}

<span class="hljs-keyword">class</span> <span class="hljs-title class_">BService</span> {
    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">continueRun</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runMethod</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">while</span>(continueRun) {}
        System.out.println(<span class="hljs-string">&quot;停下来了！&quot;</span>);
    }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span> {continueRun = <span class="hljs-literal">false</span>;}
}

<span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> {
    <span class="hljs-keyword">private</span> BService service;
    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadA</span><span class="hljs-params">(BService service)</span> {<span class="hljs-built_in">this</span>.service = service;}
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> {service.runMethod();}
}

<span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> {
    <span class="hljs-keyword">private</span> BService service;
    <span class="hljs-keyword">public</span> <span class="hljs-title function_">ThreadB</span><span class="hljs-params">(BService service)</span> {<span class="hljs-built_in">this</span>.service = service}
    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> {service.stop();}
}
</code></pre>
<p>四个类大致和上面的例子差不多，这样的代码运行起来永远也不会停止，</p>
<p>而书上说，只需要将<code>runMethod</code>方法改为：</p>
<pre><code class="hljs language-java">    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">runMethod</span><span class="hljs-params">()</span> {
        <span class="hljs-type">String</span> <span class="hljs-variable">anyString</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>();
        <span class="hljs-keyword">while</span>(continueRun) {
            <span class="hljs-keyword">synchronized</span>(anyString) {}
        }
        System.out.println(<span class="hljs-string">&quot;停下来了！&quot;</span>);
    }
</code></pre>
<p>确实，这样做是可以停下来，但是书上的解释是：</p>
<blockquote>
<p>关键字 synchronized 可以保证在同一时刻，只有一个线程可以执行某一个方法或者某一个代码块。</p>
<p>它包含两个特征：互斥性和可见性。</p>
<p>同步 synchronized 不仅可以解决一个线程看到对象处于不一致的状态，还可以保证进入同步方法或者同步代码块的每个线程，都看到由同一个锁保护之前所有的修改效果。</p>
</blockquote>
<p>这句话，歧义扉多，而且和演示程序完全搭不上边，线程 A 的锁完全没有任何同步意义，线程 B 也完全不会和线程 A 进入同一个锁，甚至线程 B 根本就不会进入任何一个锁，在这样的意义下，无法验证 synchronized 影响到了两个线程的<code>continueRun</code>变量的同步</p>
<p>但事实上这个程序确实是可以停止的，至于为什么，我的猜测是：<strong>同步代码块虽然没有意义，但是它有一定的时长消耗性，在这样的情况下 CPU 出现了空闲，于是由上一个例子的结论可知，CPU 在空闲的时候对两个线程的本地变量进行了同步！！</strong></p>
<p>后面这节多是我自己的推断。</p>
