<p><div class="saying mb-4"><div class="saying-quote saying-left-quote">“</div><div class="saying-quote saying-right-quote">”</div></p>
<p>Filters：过滤你的日志信息</p>
<p></div></p>
<!-- more -->

<h3 id="重要概念">重要概念</h3>
<h4 id="枚举值">枚举值</h4>
<p>Filters 可以用来对日志事件进行过滤，过滤器会返回一个枚举类型的值，枚举值包含三个：ACCEPT、DENY 和 NEUTRAL。</p>
<ul>
<li><p>ACCEPT：时会跳过这一级别的其它过滤器,进入下个级别的过滤器；</p>
</li>
<li><p>DENY：时会直接终止事件的传递；</p>
</li>
<li><p>NEUTRAL：时会继续交给同级别的其它过滤器处理（若已经是同级别最后一个过滤器，那么将日志事件传递给下个级别）。</p>
</li>
</ul>
<h4 id="过滤位置">过滤位置</h4>
<p>可以在以下四个位置配置过滤器：</p>
<ul>
<li><p>上下文范围有效的过滤器直接在<Configuration>标签里配置，被这种过滤器拒绝的日志事件不再会向后传递。一旦日志事件被一个上下文范围有效的过滤器判定为 ACCEPT 时，其它上下文有效的过滤器将不会对日志事件进行过滤，日志事件将会继续呗 Logger 和 Appender 的过滤器过滤。</p>
</li>
<li><p>Logger 过滤器配置在一个特定的 Logger 上面。这些过滤器会在上下文范围有效的过滤器之后发挥作用，被这些过滤器拒绝的日志事件将会被丢弃，也不管 additivity 的配置如何，不会将日志传递给父亲 Logger。</p>
</li>
<li><p>Appender 过滤器用于决定一个指定的 Appender 是否应该处理和发布日志事件。</p>
</li>
<li><p>Appender 引用过滤器用于决定 Logger 是否应该将日志事件路由到一个 Appender。</p>
</li>
</ul>
<h3 id="我常用的过滤器">我常用的过滤器</h3>
<h4 id="compositefilter">CompositeFilter</h4>
<p>组合过滤器，使用一个<code>Filters</code>元素组合多个 Filter，这个元素没有其他参数。</p>
<pre><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">Filters</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">MarkerFilter</span> <span class="hljs-attr">marker</span>=<span class="hljs-string">&quot;EVENT&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;NEUTRAL&quot;</span>/&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">DynamicThresholdFilter</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;loginId&quot;</span> <span class="hljs-attr">defaultThreshold</span>=<span class="hljs-string">&quot;ERROR&quot;</span>
                          <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;NEUTRAL&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">KeyValuePair</span> <span class="hljs-attr">key</span>=<span class="hljs-string">&quot;User1&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;DEBUG&quot;</span>/&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">DynamicThresholdFilter</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">Filters</span>&gt;</span>
</code></pre>
<h4 id="thresholdfilter">ThresholdFilter</h4>
<p>根据输出的日志级别过滤日志</p>
<h5 id="level">Level</h5>
<pre><code class="hljs language-js"><span class="hljs-variable constant_">FATAL</span> &lt; <span class="hljs-variable constant_">ERROR</span> &lt; <span class="hljs-variable constant_">WARN</span> &lt; <span class="hljs-variable constant_">INFO</span> &lt; <span class="hljs-variable constant_">DEBUG</span> &lt; <span class="hljs-variable constant_">TRACE</span>;
</code></pre>
<h5 id="filter-rule">Filter Rule</h5>
<pre><code class="hljs language-js"><span class="hljs-keyword">if</span> (输出日志级别 &lt;= 过滤器配置级别) <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;onMatch&quot;</span>;
<span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;onMismatch&quot;</span>;
</code></pre>
<h5 id="parameter">Parameter</h5>
<ul>
<li>level：string：需要匹配的日志级别</li>
<li>onMatch：string：指定匹配到的 LogEvents 的过滤策略</li>
<li>onMismatch：string：指定不匹配的 LogEvents 的过滤策略</li>
</ul>
<p>比如，如果 ThresholdFilter 配置的级别为 ERROR，日志事件级别为 DEBUG，那么 onMismatch 值就会返回。只有 ERROR 或级别更低的 FATAL 级别到日志事件的到来，才会返回 onMatch。</p>
<pre><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">File</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;infoFile&quot;</span> <span class="hljs-attr">fileName</span>=<span class="hljs-string">&quot;logs/info/info.log&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">Filters</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;warn&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;DENY&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;NEUTRAL&quot;</span>/&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;DENY&quot;</span>/&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">Filters</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">Pattern</span>&gt;</span>%d %p %c{1.} [%t] %m%n<span class="hljs-tag">&lt;/<span class="hljs-name">Pattern</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">PatternLayout</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">File</span>&gt;</span>
</code></pre>
<p>上面这个例子就把仅为 INFO 级别的日志信息输出到特定的地方</p>
<p>我们看第一个过滤器：</p>
<pre><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;warn&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;DENY&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;NEUTRAL&quot;</span>/&gt;</span>
</code></pre>
<p>warn 即 warn 以下（fatal、error）的级别被拒绝了，warn 以上的级别被传递到下一个过滤器；</p>
<p>第二个过滤器：</p>
<pre><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">ThresholdFilter</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;info&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;DENY&quot;</span>/&gt;</span>
</code></pre>
<p>info 即 info 以下（warn、fatal、error）的级别被接受了，info 以上的级别被拒绝；</p>
<h4 id="regexfilter">RegexFilter</h4>
<p>根据日志内容来使用正则表达式去过滤日志信息</p>
<h5 id="parameter-1">Parameter</h5>
<ul>
<li>regex：stirng：正则表达式</li>
<li>onMatch：string：指定匹配到的 LogEvents 的过滤策略</li>
<li>onMismatch：string：指定不匹配的 LogEvents 的过滤策略</li>
</ul>
<pre><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">RegexFilter</span> <span class="hljs-attr">regex</span>=<span class="hljs-string">&quot;.* test .*&quot;</span> <span class="hljs-attr">onMatch</span>=<span class="hljs-string">&quot;ACCEPT&quot;</span> <span class="hljs-attr">onMismatch</span>=<span class="hljs-string">&quot;DENY&quot;</span>/&gt;</span>
</code></pre>
<p>上面这个例子只使出含有 test 字样的日志。</p>
