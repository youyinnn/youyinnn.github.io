<p></p><div class="saying mb-4"><div class="saying-quote saying-left-quote">“</div><div class="saying-quote saying-right-quote">”</div>
<p>Lo4j2 是啥就不解释了，之前无论是使用 log4j 还是 log4j2，同样只是简单的各种百度然后复制粘贴没有系统的总结一下，今天把一个小小的 Ajax 的测试程序放服务器上面都不知道怎么查错，然后想写一下 log 来看看哪错了吧，发现还是不会独立配置 log4j，于是想总结一波。基本的思路是总结官方文档和官方推荐的中文文档，尽量简洁表达出原理以及应用。</p>
<p></p></div>


<hr>
<h3 id="准备工作">准备工作</h3>
<h4 id="maven-依赖">Maven 依赖</h4>
<pre><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
  <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.9.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>
  <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span>
</code></pre>
<p>认准这俩依赖</p>
<h4 id="默认配置文件如果配置文件缺省的情况下，也会是这样的配置">默认配置文件(如果配置文件缺省的情况下，也会是这样的配置)</h4>
<p>配置文件需要放在 classpath 的根目录下（一般的项目是 src，maven web 项目则是推荐在 resource 下），以 log4j2.xml 命名，配置文件还有其他的配置形式如 json 和 yaml，我习惯使用 xml。</p>
<pre><code class="hljs language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&quot;OFF&quot;</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">appenders</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">Console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Console&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;SYSTEM_OUT&quot;</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n&quot;</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">Console</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">appenders</span>&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">loggers</span>&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">loggers</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>
</code></pre>
<h4 id="helloword">HelloWord</h4>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> {
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger(LogManager.ROOT_LOGGER_NAME);
        logger.trace(<span class="hljs-string">&quot;trace level&quot;</span>);
        logger.debug(<span class="hljs-string">&quot;debug level&quot;</span>);
        logger.info(<span class="hljs-string">&quot;info level&quot;</span>);
        logger.warn(<span class="hljs-string">&quot;warn level&quot;</span>);
        logger.error(<span class="hljs-string">&quot;error level&quot;</span>);
        logger.fatal(<span class="hljs-string">&quot;fatal level&quot;</span>);
    }
}
</code></pre>
<hr>
<h3 id="运行-helloworld">运行 HelloWorld</h3>
<p>运行上面的代码之后会出现如下的 log</p>
<pre><code class="hljs language-cmd"><span class="hljs-number">13</span>:<span class="hljs-number">34</span>:<span class="hljs-number">41</span>.<span class="hljs-number">070</span> [main] ERROR mylog - error level
<span class="hljs-number">13</span>:<span class="hljs-number">34</span>:<span class="hljs-number">41</span>.<span class="hljs-number">072</span> [main] FATAL mylog - fatal level
</code></pre>
<p>你会很奇怪，为什么我们写了这么多 log，却只出现两行 log 信息，我们去看看我们的配置文件：</p>
<pre><code class="hljs language-xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">configuration</span> <span class="hljs-attr">status</span>=<span class="hljs-string">&quot;OFF&quot;</span>&gt;</span>
  <span class="hljs-comment">&lt;!-- 这里定义了一个appenders --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">appenders</span>&gt;</span>
      <span class="hljs-comment">&lt;!-- appenders里面配置了一个Console --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">Console</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;Console&quot;</span> <span class="hljs-attr">target</span>=<span class="hljs-string">&quot;SYSTEM_OUT&quot;</span>&gt;</span>
          <span class="hljs-comment">&lt;!-- 这是输出格式 --&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">PatternLayout</span> <span class="hljs-attr">pattern</span>=<span class="hljs-string">&quot;%d{HH:mm:ss.SSS} [%t] %-5level %logger{36} - %msg%n&quot;</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">Console</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">appenders</span>&gt;</span>

    <span class="hljs-comment">&lt;!-- 然后就是定义loggers --&gt;</span>
    <span class="hljs-tag">&lt;<span class="hljs-name">loggers</span>&gt;</span>
      <span class="hljs-comment">&lt;!-- 这是根logger 是所有自定义logger的父logger --&gt;</span>
        <span class="hljs-tag">&lt;<span class="hljs-name">root</span> <span class="hljs-attr">level</span>=<span class="hljs-string">&quot;error&quot;</span>&gt;</span>
            <span class="hljs-tag">&lt;<span class="hljs-name">appender-ref</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">&quot;Console&quot;</span>/&gt;</span>
        <span class="hljs-tag">&lt;/<span class="hljs-name">root</span>&gt;</span>
    <span class="hljs-tag">&lt;/<span class="hljs-name">loggers</span>&gt;</span>
<span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span>
</code></pre>
<p>首先看我们的 Java 代码：</p>
<pre><code class="hljs language-java"><span class="hljs-type">Logger</span> <span class="hljs-variable">logger</span> <span class="hljs-operator">=</span> LogManager.getLogger(LogManager.ROOT_LOGGER_NAME);
</code></pre>
<p>这一行是获取我们在配置文件中配置好的 root logger，然后使用这个 logger 去打印了 6 条日志。</p>
<p>然后解释一下单词含义（my style~）：</p>
<blockquote>
<p>Appender：
<em>n.</em> 附着器,输出目的地,输出源；</p>
</blockquote>
<p>它的子元素 Console，代表的是控制台，所以很明显就是，我们配置了一个以控制台作为输出源的输出源；并将这个输出源命名为<code>Console</code>，然后配置了这个控制台输出源的输出 Pattern。</p>
<p>然后我们在<code>loggers</code>里面配置了一个 logger：<code>root</code>，这个节点代表所有 logger 的根 logger，然后 log 级别定为<code>error</code>，意思是<strong>只输出 error 级别以下包括 error 的日志信息</strong>，之后这个根 log 的输出源引用的是<code>name</code>值为<code>Console</code>的 Appender，也即我们配置的唯一一个 Appender。</p>
<p>那么 error 以下是哪些信息？</p>
<blockquote>
<hr>
<p>log4j 规定了默认的几个级别：<code>trace &lt; debug &lt; info &lt; warn &lt; error &lt; fatal</code>等。这里要说明一下：</p>
<ol>
<li><p>级别之间是包含的关系，意思是如果你设置日志级别是 trace，则大于等于这个级别的日志都会输出。</p>
</li>
<li><p>基本上默认的级别没多大区别，就是一个默认的设定。你可以通过它的 API 自己定义级别。你也可以随意调用这些方法，不过你要在配置文件里面好好处理了，否则就起不到日志的作用了，而且也不易读，相当于一个规范，你要完全定义一套也可以，不用没多大必要。</p>
</li>
</ol>
<hr>
<ul>
<li><p>trace： 是追踪，就是程序推进以下，你就可以写个 trace 输出，所以 trace 应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出。</p>
</li>
<li><p>debug： 调试么，我一般就只用这个作为最低级别，trace 压根不用。是在没办法就用 eclipse 或者 idea 的 debug 功能就好了么。</p>
</li>
<li><p>info： 输出一下你感兴趣的或者重要的信息，这个用的最多了。</p>
</li>
<li><p>warn： 有些信息不是错误信息，但是也要给程序员的一些提示，类似于 eclipse 中代码的验证不是有 error 和 warn。</p>
</li>
<li><p>error： 错误信息。用的也比较多。</p>
</li>
<li><p>fatal： 级别比较高了。重大错误，这种级别你可以直接停止程序了，是不应该出现的错误么！不用那么紧张，其实就是一个程度的问题。</p>
</li>
</ul>
<hr>
</blockquote>
<p>到这里我们就知道，为什么会只打印两条 log 了，打印的两条 log 分别是：error 级别以及 fatal 级别的 log。</p>
<hr>
<p><em>参考：<a href="http://www.cnblogs.com/leo-lsw/p/log4j2tutorial.html">http://www.cnblogs.com/leo-lsw/p/log4j2tutorial.html</a></em></p>
<p><em>参考：<a href="https://my.oschina.net/xianggao/blog/523401">https://my.oschina.net/xianggao/blog/523401</a></em></p>
