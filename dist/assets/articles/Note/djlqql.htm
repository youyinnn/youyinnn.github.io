<h3 id="introduction">Introduction</h3>
<p>就 A 了签到题，我觉得这次笔试很简单了，可是后面 3 题没过一个 case，题目不难，各种各样的失误 8，说到底菜才是原罪，还是得多刷题</p>
<p>和 leecode 不一样的是：</p>
<ul>
<li><strong>阅读理解</strong>很重要，这次读题特别耽误；</li>
<li>多条件真的不要怕，一步一步地<strong>组合条件</strong>；</li>
</ul>
<h3 id="q1-z-国硬币找零">Q1 Z 国硬币找零</h3>
<blockquote>
<p>z 国 4 种硬币，面值 1、16、64、1024，小明用 1024 买东西，求找出的最小硬币数。</p>
<p>如买 200，找 824，可找 12 枚 64、3 枚 16、2 枚 4
输入 200，输出 17</p>
</blockquote>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
    <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);
    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> in.nextInt();
    <span class="hljs-type">int</span> <span class="hljs-variable">need</span> <span class="hljs-operator">=</span> <span class="hljs-number">1024</span> - n;
    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
    <span class="hljs-keyword">while</span> (need != <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">if</span> (need &gt;= <span class="hljs-number">64</span>) {
            count += (need / <span class="hljs-number">64</span>);
            need %= <span class="hljs-number">64</span>;
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (need &gt;= <span class="hljs-number">16</span>) {
            count += (need / <span class="hljs-number">16</span>);
            need %= <span class="hljs-number">16</span>;
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (need &gt;= <span class="hljs-number">4</span>) {
            count += (need / <span class="hljs-number">4</span>);
            need %= <span class="hljs-number">4</span>;
        } <span class="hljs-keyword">else</span> {
            count += (need);
            need %= <span class="hljs-number">1</span>;
        }
    }
    System.out.println(count);
}
</code></pre>
<h3 id="q2-字符串去重">Q2 字符串去重</h3>
<blockquote>
<p>字符串去重
条件：
1）如果三个一样的字符，去掉一个：helllo -&gt;hello
2）AABB 型，去掉最后一个：AABB -&gt; AAB
3）从左到右优先考虑上面两个条件，比如 AABBCC，虽然 AABB、BBCC 都需要考虑，但是 AABB 删除完之后变成 AABCC 了，CC 可以不用处理了：AABBCC -&gt; AABCC</p>
<p>输入
2
helllo
wooooooow</p>
<p>输出
hello
woow</p>
</blockquote>
<p>这题关键：</p>
<ul>
<li>用一个新的地方去存储<strong>已记录的合法字符串</strong>，记为<code>newS</code>，然后在这个已记录的字符串上继续考虑去重；</li>
<li>设两个 flag，一个记录前两位是否是 AA，记为<code>aa</code>，一个记录前三位是否是 AAB，记为<code>aab</code>；这两个 flag 都在<strong>已记录的合法字符串</strong>中打；每次通过这两个 flag 去删选字符；</li>
</ul>
<p>步骤：</p>
<ol>
<li>遍历源串：<ol>
<li>如果<code>aa</code>满足，且当前字符，和<code>newS</code>的末尾字符一样，说明三个一样，于是这个字符跳过；</li>
<li>如果<code>aab</code>满足，且当前字符，和<code>newS</code>的末尾字符一样，说明是 AABB，于是这个字符跳过；</li>
<li>否则：重新打<code>aa</code>和<code>aab</code>flag；当前字符记到<code>newS</code></li>
</ol>
</li>
<li>打印<code>newS</code></li>
</ol>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
    <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);
    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> in.nextInt();
    String[] s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[n];
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) {
        s[i] = in.next();
    }
    <span class="hljs-keyword">for</span> (String s1 : s) {
        System.out.println(remove(s1));
    }
}

<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">remove</span><span class="hljs-params">(String origin)</span> {
    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(origin.charAt(<span class="hljs-number">0</span>) + <span class="hljs-string">&quot;&quot;</span>);
    <span class="hljs-type">char</span>[] chars = origin.toCharArray();
    <span class="hljs-type">boolean</span> <span class="hljs-variable">aa</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;
    <span class="hljs-type">boolean</span> <span class="hljs-variable">aab</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;
    <span class="hljs-type">int</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; chars.length; i++) {
        <span class="hljs-type">boolean</span> <span class="hljs-variable">triple</span> <span class="hljs-operator">=</span> aa &amp;&amp; sb.charAt(last) == chars[i];
        <span class="hljs-type">boolean</span> <span class="hljs-variable">aabb</span> <span class="hljs-operator">=</span> aab &amp;&amp; sb.charAt(last) == chars[i];
        <span class="hljs-keyword">if</span> (!triple &amp;&amp; !aabb) {
            aa = chars[i] == sb.charAt(last);
            <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">1</span>) {
                aab = sb.charAt(last - <span class="hljs-number">1</span>) == sb.charAt(last) &amp;&amp; sb.charAt(last) != chars[i];
            }
            sb.append(chars[i]);
            last++;
        }
    }
    <span class="hljs-keyword">return</span> sb.toString();
}
</code></pre>
<h3 id="q3-发礼品">Q3 发礼品</h3>
<blockquote>
<p>n 个人比赛得分，围成圈领奖品，条件如下
1）如果分数比左右两边的人高，那么奖品也比左右两边的人多
2）每人至少一份
求最少奖品数</p>
<p>输入：第一行为比赛轮次，接下来每 2 行分别代表比赛人数和每个人的分数
2
2
1 2
4
1 2 3 3</p>
<p>输出
3
8</p>
<p>解释：</p>
<ul>
<li>第一轮 2 个人比赛，第一个人 1 分，最少一个奖品，第二个人 2 分，比左边的人高，所以奖品也要多，最少可以拿 2 个；
所以礼物序列为：1 2 所以总最少 3 份</li>
<li>第二轮 4 个人比赛，第一个人 1 分，最少一个奖品，第二个人 2 分，比左边的人高，所以奖品也要多，最少可以拿 2 个，第三个人比第二个人高分，也多一份，第四个人和三个一样，但是比第一个人高，所以最少要比第一个人多拿一份礼物；
所以礼物序列为：1 2 3 2 总最少 8 份</li>
</ul>
</blockquote>
<p>这题特别耽误，因为开始的时候，并没有解释的，做到一半的时候，系统发了公告解释为什么得 8，估计是问考官要解释的人太多了- -，我也是看了评论区才知道，考试的时候居然可以问考官的操</p>
<p>这题吧，关键就是条件比较 tricky：</p>
<ol>
<li>人是围成圈站的，所以数组最后一个人和第一个人是相邻的，而且奖品数量的计算也不是从第一个人开始计算；</li>
<li>如果比左右两边高礼品才高，三者比较这只是其中一种 case，剩下还有相等的，左高右低左低右高的几种 case；</li>
<li>最少一个礼物，求最少的礼物；这两句话的意思是，能少尽量少；</li>
</ol>
<p>思路：</p>
<ol>
<li>对于每一个人，我们可以标出左右两边人得分<code>leftScore</code>和<code>rightScore</code>，以及左右两边礼品数量<code>leftP</code>和<code>rightP</code></li>
<li>顺序记录得分，同时记录它们分布的下标，可以用一个<code>TreeMap&lt;Integer, LinkedList&lt;Integer&gt;&gt;</code>来记录；</li>
<li>按照得分升序，依次进行如下逻辑：<ol>
<li>如果当前人的分数比左右两边都高，那么当前人获得比更多那一边的人的礼品数多一；</li>
<li>如果仅比一遍高，那么当前人至少也要比这一边多一个礼品；</li>
<li>其他情况就都是分配最小礼物 1 个；</li>
</ol>
</li>
<li>记录每次当前人的礼品数，加到 sum 中，得解；</li>
</ol>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
    <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);
    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> in.nextInt();
    <span class="hljs-type">int</span>[] rs = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) {
        <span class="hljs-type">int</span> <span class="hljs-variable">number</span> <span class="hljs-operator">=</span> in.nextInt();
        <span class="hljs-type">int</span>[] scores = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[number];
        TreeMap&lt;Integer, LinkedList&lt;Integer&gt;&gt; indexMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>&lt;&gt;();
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; number; j++) {
            scores[j] = in.nextInt();
            indexMap.computeIfAbsent(scores[j], k -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;());
            indexMap.get(scores[j]).add(j);
        }
        <span class="hljs-type">int</span>[] p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[number];
        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
        <span class="hljs-keyword">for</span> (Map.Entry&lt;Integer, LinkedList&lt;Integer&gt;&gt; entry : indexMap.entrySet()) {
            <span class="hljs-type">Integer</span> <span class="hljs-variable">nowS</span> <span class="hljs-operator">=</span> entry.getKey();
            LinkedList&lt;Integer&gt; scoreIndex = entry.getValue();
            <span class="hljs-keyword">for</span> (Integer index : scoreIndex) {
                <span class="hljs-type">int</span> <span class="hljs-variable">leftS</span> <span class="hljs-operator">=</span> getLeft(scores, index);
                <span class="hljs-type">int</span> <span class="hljs-variable">rightS</span> <span class="hljs-operator">=</span> getRight(scores, index);
                <span class="hljs-type">int</span> <span class="hljs-variable">leftP</span> <span class="hljs-operator">=</span> getLeft(p, index);
                <span class="hljs-type">int</span> <span class="hljs-variable">rightP</span> <span class="hljs-operator">=</span> getRight(p, index);

                <span class="hljs-keyword">if</span> (nowS &gt; leftS &amp;&amp; nowS &gt; rightS) {
                    p[index] = Math.max(leftP, rightP) + <span class="hljs-number">1</span>;
                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nowS &gt; leftS) {
                    p[index] = leftP + <span class="hljs-number">1</span>;
                } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nowS &gt; rightS) {
                    p[index] = rightP + <span class="hljs-number">1</span>;
                } <span class="hljs-keyword">else</span> {
                    p[index] = <span class="hljs-number">1</span>;
                }
                sum += p[index];
            }
        }
        System.out.println(Arrays.toString(p));
        rs[i] = sum;
    }
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> r : rs) {
        System.out.println(r);
    }
}

<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getLeft</span><span class="hljs-params">(<span class="hljs-type">int</span>[] scores, <span class="hljs-type">int</span> nowIndex)</span> {
    <span class="hljs-keyword">if</span> (nowIndex == <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">return</span> scores[scores.length - <span class="hljs-number">1</span>];
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">return</span> scores[nowIndex - <span class="hljs-number">1</span>];
    }
}

<span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getRight</span><span class="hljs-params">(<span class="hljs-type">int</span>[] scores, <span class="hljs-type">int</span> nowIndex)</span> {
    <span class="hljs-keyword">if</span> (nowIndex == scores.length - <span class="hljs-number">1</span>) {
        <span class="hljs-keyword">return</span> scores[<span class="hljs-number">0</span>];
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">return</span> scores[nowIndex + <span class="hljs-number">1</span>];
    }
}
</code></pre>
<h3 id="q4-n-绳子剪-m-等长">Q4 N 绳子剪 M 等长</h3>
<blockquote>
<p>n 根绳子，剪成 m 段等长绳子，不可拼接，求等多长，结果保留 2 位小数</p>
<p>输入
第一行 2 个数，n 和 m
第二行 n 个数，原始的绳子长度</p>
<p>3 4
3 4 5</p>
<p>输出
2.50
5 可剪成两条 2.5 和 2.5，3 和 4 分别可以剪出一个 2.5，总共 4 个 2.5</p>
</blockquote>
<p>这题说实话，经验提，我看几篇题解都是这样的做法- -</p>
<p>二分法在<strong>0-最长绳子里进行中位选择</strong>，每次选择的中位如果用每条绳子去剪，直到能剪出符合要求的</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
    <span class="hljs-type">Scanner</span> <span class="hljs-variable">in</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);
    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> in.nextInt();
    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> in.nextInt();
    <span class="hljs-type">double</span>[] ns = <span class="hljs-keyword">new</span> <span class="hljs-title class_">double</span>[n];
    <span class="hljs-type">double</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, high = Double.MIN_VALUE;
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) {
        ns[i] = in.nextDouble();
        high = Math.max(ns[i], high);
    }

    <span class="hljs-type">double</span> <span class="hljs-variable">exp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0.001</span>;
    <span class="hljs-type">double</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> low;
    <span class="hljs-keyword">while</span> (high - low &gt;= exp) {
        mid = (low + high) / <span class="hljs-number">2</span>;
        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
        <span class="hljs-keyword">for</span> (<span class="hljs-type">double</span> v : ns) {
            count += ((<span class="hljs-type">int</span>) (v) / mid);
        }
        <span class="hljs-keyword">if</span> (m &gt; count) {
            high = mid;
        } <span class="hljs-keyword">else</span> {
            low = mid;
        }
    }

    System.out.println(String.format(<span class="hljs-string">&quot;%.2f&quot;</span>, mid));
}
</code></pre>
