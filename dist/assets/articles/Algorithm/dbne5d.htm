<h3 id="31-next-permutationmedium">31. Next Permutation(Medium)</h3>
<p>Implement <strong>next permutation</strong>, which rearranges numbers into the lexicographically next greater permutation of numbers.</p>
<p>If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).</p>
<p>The replacement must be <strong>in-place</strong> and use only constant extra memory.</p>
<p>Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.</p>
<pre><code>1,2,3` → `1,3,2`
`3,2,1` → `1,2,3`
`1,1,5` → `1,5,1
</code></pre>
<h4 id="from-back7ms">From Back(7ms)</h4>
<p>不难，找规律找出来就好了，首先弄清楚字典顺序是怎么回事，比如序列 1 2 3 4，往后的序列是</p>
<pre><code>1 2 3 4  ┌→ 2 1 3 4  ┌→ 3 1 2 4  ┌→ 4 1 2 3
1 2 4 3  |  2 1 4 3  |  3 1 4 2  |  4 1 3 2
1 3 2 4  |  2 3 1 4  |  3 2 1 4  |  4 2 1 3
1 3 4 2  |  2 3 4 1  |  3 2 4 1  |  4 2 3 1
1 4 2 3  |  2 4 1 3  |  3 4 1 2  |  4 3 1 2
1 4 3 2 -┘  2 4 3 1 -┘  3 4 2 1 -┘  4 3 2 1
</code></pre>
<p>多看几组我们可以发现，如果我们从后往前找到<strong>顺序</strong>的一对，比如 4 1 3 2 中，1 和 3 是顺序的，那么如果将 1 和<strong>它的下一个自然数交换位置</strong>，然后<strong>将该位置往后的序列自然排序</strong>，就可以得到下一组自然序列，比如 1 在当前序列中的下一个自然数是 2，于是交换得到 4 2 3 1，然后再对 2 后面的序列进行排序，如此得到 4 2 1 3</p>
<p>于是代码为：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">nextPermutation</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> {
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> nums.length - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) {
        <span class="hljs-type">int</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> nums[i];
        <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) {
            Arrays.sort(nums, i, nums.length);
            <span class="hljs-keyword">break</span>;
        }
        <span class="hljs-type">int</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> nums[i - <span class="hljs-number">1</span>];
        <span class="hljs-keyword">if</span> (a &lt; b) {
            <span class="hljs-type">int</span> <span class="hljs-variable">theBiggerOneIndex</span> <span class="hljs-operator">=</span> findTheBiggerOne(nums, i - <span class="hljs-number">1</span>, nums.length - <span class="hljs-number">1</span>, a);
            swap(nums, i - <span class="hljs-number">1</span>, theBiggerOneIndex);
            Arrays.sort(nums, i, nums.length);
            <span class="hljs-keyword">break</span>;
        }
    }
}

<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> {
    <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> nums[a];
    nums[a] = nums[b];
    nums[b] = tmp;
}

<span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findTheBiggerOne</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> start, <span class="hljs-type">int</span> end, <span class="hljs-type">int</span> target)</span> {
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> end; i &gt;= start; i--) {
        <span class="hljs-keyword">if</span> (nums[i] &gt; target) {
            <span class="hljs-keyword">return</span> i;
        }
    }
    <span class="hljs-keyword">return</span> start;
}
</code></pre>
<h3 id="32-longest-valid-parentheseshard">32. Longest Valid Parentheses(Hard)</h3>
<p>Given a string containing just the characters <code>&#39;(&#39;</code> and <code>&#39;)&#39;</code>, find the length of the longest valid (well-formed) parentheses substring.</p>
<p><strong>Example 1:</strong></p>
<pre><code>Input: &quot;(()&quot;
Output: 2
Explanation: The longest valid parentheses substring is &quot;()&quot;
</code></pre>
<p><strong>Example 2:</strong></p>
<pre><code>Input: &quot;)()())&quot;
Output: 4
Explanation: The longest valid parentheses substring is &quot;()()&quot;
</code></pre>
<p>这题，本来还想用找<strong>Q5 最长回文数</strong>的套路去做的，不行，而且这题有更简单的方法</p>
<h4 id="dp">DP</h4>
<p>想不到吧？这题居然可以 dp，牛皮吧？根据官方给的 solution，我优化了代码，以一种更简单的方式去用 dp 解这道题，我们先看几个例子：</p>
<pre><code class="hljs language-java"><span class="hljs-number">1.</span>假如我们有：
                ( ) ( )
    -------------------
                <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span>
    -------------------
match:            <span class="hljs-number">2</span>   <span class="hljs-number">2</span>
                  +   +
before match:     ?   <span class="hljs-number">2</span>

对于最后一个<span class="hljs-number">4</span>，我们可以做这样的解释：
<span class="hljs-number">1</span>）因为它和前一个字符match了，所以算<span class="hljs-number">2</span>个长度；
<span class="hljs-number">2</span>）因为在这<span class="hljs-number">2</span>个长度之前，紧前面也有一个长度为<span class="hljs-number">2</span>的合法子串，所以这两紧挨着的串长度可以加在一起；

<span class="hljs-number">2.</span>为了方便处理before match，我们在每个处理串前加上一个+号，于是：
               + ( ) ( )
    --------------------
               <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">0</span> <span class="hljs-number">4</span>
    --------------------
match:             <span class="hljs-number">2</span>   <span class="hljs-number">2</span>
                   +   +
before match:      <span class="hljs-number">0</span>   <span class="hljs-number">2</span>

<span class="hljs-number">3.</span>再看另外一个例子：
              + ( ( ) ) ( ( ) )
    ---------------------------
              <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">2</span> <span class="hljs-number">8</span>
    ---------------------------
match:              <span class="hljs-number">2</span> <span class="hljs-number">2</span>     <span class="hljs-number">2</span> <span class="hljs-number">2</span>
                    + +     + +
inside:             <span class="hljs-number">0</span> <span class="hljs-number">2</span>     <span class="hljs-number">0</span> <span class="hljs-number">2</span>
                    + +     + +
before match:       <span class="hljs-number">0</span> <span class="hljs-number">0</span>     <span class="hljs-number">0</span> <span class="hljs-number">4</span>

对于第一个<span class="hljs-number">4</span>：
它前面一个符号是闭口，且这个闭口符号有效值为<span class="hljs-number">2</span>，于是当前闭口要考虑的有效开口，
应该往前数<span class="hljs-number">2</span>+<span class="hljs-number">1</span>位，也就是下标为<span class="hljs-number">1</span>的位置，如果这个位置是开口，那么证明match，
且before match的有效值为<span class="hljs-number">0</span>，于是它的有效值就是<span class="hljs-number">2</span>+<span class="hljs-number">2</span>+<span class="hljs-number">0</span>

同理<span class="hljs-number">8</span>：
它前面一个符号是闭口，且这个闭口符号有效值是<span class="hljs-number">2</span>，于是当前闭口要考虑的有效开口，
应该往前数<span class="hljs-number">2</span>+<span class="hljs-number">1</span>位，也就是下标为<span class="hljs-number">5</span>的位置，如果这个位置是开口，那么证明match，
且before match的有效值为<span class="hljs-number">4</span>，于是它的有效值就是<span class="hljs-number">2</span>+<span class="hljs-number">2</span>+<span class="hljs-number">4</span>
</code></pre>
<p>于是我们可以看出规律：</p>
<ul>
<li>开口有效值都是 0</li>
<li>闭口：<ul>
<li>如果前一位是开口，那么直接 match 到 2 个长度，然后再连上这对开闭口<strong>紧前的符号</strong>的有效值；</li>
<li>如果前以为是闭口，那么说明有可能是大包小的情况，所以<strong>以前一位闭口的有效值为参考</strong>，在这个有效值<strong>再前一位（这里记为 far match）</strong>与当前闭口做 match：<ul>
<li>如果不 match，那么当前闭口有效值为 0；</li>
<li>否则 match 值 2 加上前一位闭口有效值再加上<strong>far match 的紧前的符号</strong>的有效值，就是当前闭口的有效值；</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>于是代码：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">longestValidParentheses</span><span class="hljs-params">(String s)</span> {
    <span class="hljs-type">int</span> <span class="hljs-variable">maxMatch</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
    s = <span class="hljs-string">&quot;+&quot;</span> + s;
    <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[s.length()];
    <span class="hljs-type">char</span>[] chars = s.toCharArray();
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span>; i &lt; chars.length; i++) {
        <span class="hljs-type">char</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> chars[i];
        <span class="hljs-keyword">if</span> (now == <span class="hljs-string">&#x27;)&#x27;</span>) {
            <span class="hljs-type">char</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> chars[i - <span class="hljs-number">1</span>];
            <span class="hljs-keyword">if</span> (pre == <span class="hljs-string">&#x27;(&#x27;</span>) {
                dp[i] = <span class="hljs-number">2</span> + dp[i - <span class="hljs-number">2</span>];
            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (chars[i - dp[i - <span class="hljs-number">1</span>] - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;(&#x27;</span>){
                dp[i] = <span class="hljs-number">2</span> + dp[i - <span class="hljs-number">1</span>] + dp[i - dp[i - <span class="hljs-number">1</span>] - <span class="hljs-number">2</span>];
            }
        }
        maxMatch = Math.max(dp[i], maxMatch);
    }
    <span class="hljs-keyword">return</span> maxMatch;
}
</code></pre>
<h3 id="33-search-in-rotated-sorted-array-medium">33. Search in Rotated sorted Array (Medium)</h3>
<p>Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.</p>
<p>(i.e., <code>[0,1,2,4,5,6,7]</code> might become <code>[4,5,6,7,0,1,2]</code>).</p>
<p>You are given a target value to search. If found in the array return its index, otherwise return <code>-1</code>.</p>
<p>You may assume no duplicate exists in the array.</p>
<p>Your algorithm&#39;s runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p>
<p><strong>Example 1:</strong></p>
<pre><code>Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
</code></pre>
<p><strong>Example 2:</strong></p>
<pre><code>Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1
</code></pre>
<h4 id="find-the-rotate-pivot-with-binary--ologn">Find The Rotate Pivot With Binary- O(logn)</h4>
<p>这题唯一的技巧就是，如何找到被轴转过的有序数组的轴，找到轴就能对轴两边进行二分法了</p>
<h5 id="find-pivot">Find Pivot</h5>
<p>精髓，真的很直白的技巧，这也可以作为<strong>“找到被轴转过的有序数组的轴”</strong>的题解</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findPivot</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> {
    <span class="hljs-type">int</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, high = nums.length - <span class="hljs-number">1</span>, mid;
    <span class="hljs-keyword">while</span> (low &lt; high) {
        mid = (high + low) / <span class="hljs-number">2</span>;
        <span class="hljs-keyword">if</span> (nums[mid] &gt; nums[high]) {
            low = mid + <span class="hljs-number">1</span>;
        } <span class="hljs-keyword">else</span> {
            high = mid;
        }
    }
    <span class="hljs-keyword">return</span> low;
}
</code></pre>
<h5 id="with-pivot">With Pivot</h5>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> {
    <span class="hljs-keyword">if</span> (nums.length == <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;
    }
    <span class="hljs-type">int</span> rs;
    <span class="hljs-keyword">if</span> (nums[<span class="hljs-number">0</span>] &lt;= nums[nums.length - <span class="hljs-number">1</span>]) {
        rs = Arrays.binarySearch(nums, target);
        <span class="hljs-keyword">return</span> rs &lt; <span class="hljs-number">0</span> ? -<span class="hljs-number">1</span> : rs;
    }
    <span class="hljs-type">int</span> <span class="hljs-variable">pivot</span> <span class="hljs-operator">=</span> findPivot(nums);

    <span class="hljs-keyword">if</span> (nums[pivot] &lt;= target &amp;&amp; nums[nums.length - <span class="hljs-number">1</span>] &gt;= target) {
        rs = Arrays.binarySearch(nums, pivot, nums.length, target);
    } <span class="hljs-keyword">else</span> {
        rs = Arrays.binarySearch(nums, <span class="hljs-number">0</span>, pivot, target);
    }
    <span class="hljs-keyword">return</span> rs &lt; <span class="hljs-number">0</span> ? -<span class="hljs-number">1</span> : rs;
}
</code></pre>
<h3 id="34-find-first-and-last-position-of-element-in-sorted-array">34. Find First And Last Position Of Element In Sorted Array</h3>
<p>Given an array of integers <code>nums</code> sorted in ascending order, find the starting and ending position of a given <code>target</code> value.</p>
<p>Your algorithm&#39;s runtime complexity must be in the order of <em>O</em>(log <em>n</em>).</p>
<p>If the target is not found in the array, return <code>[-1, -1]</code>.</p>
<p><strong>Example 1:</strong></p>
<pre><code>Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
</code></pre>
<p><strong>Example 2:</strong></p>
<pre><code>Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
</code></pre>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] searchRange(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target) {
   <span class="hljs-type">int</span> <span class="hljs-variable">search</span> <span class="hljs-operator">=</span> Arrays.binarySearch(nums, target);
    <span class="hljs-keyword">if</span> (search &lt; <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]{-<span class="hljs-number">1</span>, -<span class="hljs-number">1</span>};
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-type">int</span> <span class="hljs-variable">first</span> <span class="hljs-operator">=</span> search, tmpFirst = search;
        <span class="hljs-keyword">while</span> (tmpFirst &gt;= <span class="hljs-number">0</span>) {
            tmpFirst = Arrays.binarySearch(nums, <span class="hljs-number">0</span>, tmpFirst, target);
            <span class="hljs-keyword">if</span> (tmpFirst &gt;= <span class="hljs-number">0</span>) {
                first = tmpFirst;
            }
        }
        <span class="hljs-type">int</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> search, tmpLast = search;
        <span class="hljs-keyword">while</span> (tmpLast &gt;= <span class="hljs-number">0</span> &amp;&amp; tmpLast &lt; nums.length) {
            tmpLast = Arrays.binarySearch(nums, tmpLast + <span class="hljs-number">1</span>, nums.length, target);
            <span class="hljs-keyword">if</span> (tmpLast &gt;= <span class="hljs-number">0</span>) {
                last = tmpLast;
            }
        }
        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]{first, last};
    }
}
</code></pre>
<p>不多说</p>
<h3 id="35-search-insert-positioneasy">35. Search Insert Position(Easy)</h3>
<p>Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p>
<p>You may assume no duplicates in the array.</p>
<p><strong>Example 1:</strong></p>
<pre><code>Input: [1,3,5,6], 5
Output: 2
</code></pre>
<p><strong>Example 2:</strong></p>
<pre><code>Input: [1,3,5,6], 2
Output: 1
</code></pre>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">searchInsert</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span> target)</span> {
    <span class="hljs-type">int</span> <span class="hljs-variable">low</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, high = nums.length - <span class="hljs-number">1</span>, mid = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">while</span> (low &lt;= high) {
        mid = (high + low) / <span class="hljs-number">2</span>;
        <span class="hljs-keyword">if</span> (nums[mid] == target) {
            <span class="hljs-keyword">return</span> mid;
        } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (nums[mid] &gt; target) {
            high = mid - <span class="hljs-number">1</span>;
        } <span class="hljs-keyword">else</span> {
            low = mid + <span class="hljs-number">1</span>;
        }
    }
    <span class="hljs-keyword">return</span> low;
}
</code></pre>
<p>关键：</p>
<ul>
<li>low &lt;= high</li>
<li>返回 low</li>
</ul>
