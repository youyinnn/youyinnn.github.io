<h3 id="46-permutationmedium">46. Permutation(Medium)</h3>
<p>Given a collection of <strong>distinct</strong> integers, return all possible permutations.</p>
<p><strong>Example:</strong></p>
<pre><code>Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
</code></pre>
<h4 id="backtracking">Backtracking</h4>
<p>回溯之前已经分析过了，关键是用 contains 或者一个 flag 数组去避免重复</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">permute</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> {
    List&lt;List&lt;Integer&gt;&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();
    backtracking(ans, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(), nums);
    <span class="hljs-keyword">return</span> ans;
}

<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtracking</span><span class="hljs-params">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; tmp, <span class="hljs-type">int</span>[] nums)</span> {
    <span class="hljs-keyword">if</span> (tmp.size() == nums.length) {
        ans.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(tmp));
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) {
            <span class="hljs-keyword">if</span> (!tmp.contains(nums[i])) {
                tmp.add(nums[i]);
                backtracking(ans, tmp, nums);
                tmp.remove(tmp.size() - <span class="hljs-number">1</span>);
            }
        }
    }
}
</code></pre>
<h3 id="47-permutation-iimedium">47. Permutation II(Medium)</h3>
<p>Given a collection of numbers that might contain duplicates, return all possible unique permutations.</p>
<p><strong>Example:</strong></p>
<pre><code>Input: [1,1,2]
Output:
[
  [1,1,2],
  [1,2,1],
  [2,1,1]
]
</code></pre>
<h4 id="backtracking-1">Backtracking</h4>
<p>关键是用一个 flags 数组和预先排序操作去避免重复</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="hljs-title function_">permuteUnique</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> {
    List&lt;List&lt;Integer&gt;&gt; ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();
    <span class="hljs-type">int</span>[] flags = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];
    Arrays.sort(nums);
    backtracking(ans, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(), nums, flags);
    <span class="hljs-keyword">return</span> ans;
}

<span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">backtracking</span><span class="hljs-params">(List&lt;List&lt;Integer&gt;&gt; ans, List&lt;Integer&gt; tmp, <span class="hljs-type">int</span>[] nums, <span class="hljs-type">int</span>[] flags)</span> {
    <span class="hljs-keyword">if</span> (tmp.size() == nums.length) {
        ans.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(tmp));
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) {
            <span class="hljs-keyword">if</span> (flags[i] == <span class="hljs-number">0</span>) {
                <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; nums[i] == nums[i - <span class="hljs-number">1</span>] &amp;&amp; flags[i - <span class="hljs-number">1</span>] == <span class="hljs-number">0</span>) {
                    <span class="hljs-keyword">continue</span>;
                }
                tmp.add(nums[i]);
                flags[i] = <span class="hljs-number">1</span>;
                backtracking(ans, tmp, nums, flags);
                flags[i] = <span class="hljs-number">0</span>;
                tmp.remove(tmp.size() - <span class="hljs-number">1</span>);
            }
        }
    }
}
</code></pre>
<h3 id="48-rotate-imagemedium">48. Rotate Image(Medium)</h3>
<p>You are given an <em>n</em> x <em>n</em> 2D matrix representing an image.</p>
<p>Rotate the image by 90 degrees (clockwise).</p>
<p><strong>Note:</strong></p>
<p>You have to rotate the image <a href="https://en.wikipedia.org/wiki/In-place_algorithm"><strong>in-place</strong></a>, which means you have to modify the input 2D matrix directly. <strong>DO NOT</strong> allocate another 2D matrix and do the rotation.</p>
<p><strong>Example 1:</strong></p>
<pre><code>Given input matrix =
[
  [1,2,3],
  [4,5,6],
  [7,8,9]
],

rotate the input matrix in-place such that it becomes:
[
  [7,4,1],
  [8,5,2],
  [9,6,3]
]
</code></pre>
<p><strong>Example 2:</strong></p>
<pre><code>Given input matrix =
[
  [ 5, 1, 9,11],
  [ 2, 4, 8,10],
  [13, 3, 6, 7],
  [15,14,12,16]
],

rotate the input matrix in-place such that it becomes:
[
  [15,13, 2, 5],
  [14, 3, 4, 1],
  [12, 6, 8, 9],
  [16, 7,10,11]
]
</code></pre>
<h4 id="think-in-the-smart-way">Think In The Smart Way</h4>
<p>挺简单的，就看你想不想地到而已- -，刚开始我真的一个数字一个数字地去转，从最外面一圈转到最里面，结果就傻逼了，需要处理很多拐弯的 case</p>
<p>如果我们将右旋 90° 这个事情简单地看成：</p>
<pre><code>0. original matrix:
                    [1,2,3]
                    [4,5,6]
                    [7,8,9]

1. swap side base on diagonal:

                    [@,2,3]            [@,4,7]           [1,4,7]
                    [4,@,6]     --&gt;    [2,@,8]    --&gt;    [2,5,8]
                    [7,8,@]            [3,6,@]           [3,6,9]

2. swap side base on row&#x27;s half:

                    [1,@,7]            [7,@,1]           [7,4,1]
                    [2,@,8]     --&gt;    [8,@,2]    --&gt;    [8,5,2]
                    [3,@,9]            [9,@,3]           [9,6,3]
</code></pre>
<p>其他旋也是一样的</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">rotate</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] matrix)</span> {
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; matrix.length; i++) {
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i + <span class="hljs-number">1</span>; j &lt; matrix.length; j++) {
            <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> matrix[j][i];
            matrix[j][i] = matrix[i][j];
            matrix[i][j] = tmp;
        }
    }

    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span>[] rows : matrix) {
        <span class="hljs-type">int</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, r = rows.length - <span class="hljs-number">1</span>;
        <span class="hljs-type">int</span> tmp;
        <span class="hljs-keyword">while</span> (l &lt; r) {
            tmp = rows[r];
            rows[r] = rows[l];
            rows[l] = tmp;
            l++;
            r--;
        }
    }
}
</code></pre>
<h3 id="49-group-anagramsmedium">49. Group Anagrams(Medium)</h3>
<p>Given an array of strings, group anagrams together.</p>
<p><strong>Example:</strong></p>
<pre><code>Input: [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;],
Output:
[
  [&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;],
  [&quot;nat&quot;,&quot;tan&quot;],
  [&quot;bat&quot;]
]
</code></pre>
<h4 id="hashing">Hashing</h4>
<p>先每个字符串用排序得出对应的字谜的解，然后这个解作为 key 放在 HashMap 中，后续相同字谜解的，一起加在同一个 key 下</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">groupAnagrams</span><span class="hljs-params">(String[] strs)</span> {
    HashMap&lt;String, List&lt;String&gt;&gt; ansMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();
    <span class="hljs-keyword">for</span> (String str : strs) {
        <span class="hljs-type">char</span>[] chars = str.toCharArray();
        Arrays.sort(chars);
        <span class="hljs-type">String</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> String.valueOf(chars);
        <span class="hljs-keyword">if</span> (!ansMap.containsKey(key)) {
            ansMap.put(key, <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;());
        }
        ansMap.get(key).add(str);
    }
    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;(ansMap.values());
}
</code></pre>
<p>这里有 2 个优化的地方：</p>
<ul>
<li>因为都是在屁股加解，所以用<code>LinkedList</code>会好点；</li>
<li><code>String.valueOf(chars)</code>会比<code>Arrays.toString(chars)</code>要来得干脆；</li>
</ul>
<h3 id="50-powx-n-medium">50. Pow(x, n) (Medium)</h3>
<p>Implement <a href="http://www.cplusplus.com/reference/valarray/pow/">pow(<em>x</em>, <em>n</em>)</a>, which calculates <em>x</em> raised to the power <em>n</em> (xn).</p>
<p><strong>Example 1:</strong></p>
<pre><code>Input: 2.00000, 10
Output: 1024.00000
</code></pre>
<p><strong>Example 2:</strong></p>
<pre><code>Input: 2.10000, 3
Output: 9.26100
</code></pre>
<p><strong>Example 3:</strong></p>
<pre><code>Input: 2.00000, -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25
</code></pre>
<p><strong>Note:</strong></p>
<ul>
<li>-100.0 &lt; <em>x</em> &lt; 100.0</li>
<li><em>n</em> is a 32-bit signed integer, within the range [−231, 231 − 1]</li>
</ul>
<h4 id="recursion">Recursion</h4>
<p>这题首先暴力解可以，但是时间会爆，比较如果 n 为<code>Integer.MAX_VALUE</code>的话，那就得有 20 亿次的循环计算，但是呢，这 20 亿次计算，有一半可以砍掉的，我们拿<code>pow(2, 20)</code>来举例，2 的 20 次方，等于 2 的 10 次方的平方，于是我们只需要算出 2 的 10 次方，那么就可以得出 2 的 20 次方了：<code>pow(2, 20) = pow(2, 10) * pow(2, 10)</code>，而<code>pow(2, 10) = pow(2, 5) * pow(2, 5)</code>，而<code>pow(2, 5) = pow(2, 4) * 2</code>，而<code>pow(2, 4) = pow(2, 2) * pow(2, 2)</code>，而<code>pow(2, 2) = 2 * 2</code>；</p>
<p>于是我们把 20 次计算减少为 5 次计算，同理我们如果 20 亿次计算可以减少为 31 次计算，不要问为什么</p>
<p>然后我们再覆盖一些边角 case~</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">myPow</span><span class="hljs-params">(<span class="hljs-type">double</span> x, <span class="hljs-type">int</span> n)</span> {
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span> || x == <span class="hljs-number">1</span>) {
        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;
    }
    <span class="hljs-keyword">if</span> (n == Integer.MIN_VALUE) {
        <span class="hljs-type">double</span> <span class="hljs-variable">sub</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> / x;
        <span class="hljs-keyword">return</span> myPow(sub, Integer.MAX_VALUE) * sub;
    }
    <span class="hljs-keyword">if</span> (n &lt; <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">return</span> myPow(<span class="hljs-number">1</span> / x, -n);
    }
    <span class="hljs-keyword">if</span> (n == <span class="hljs-number">2</span>) {
        <span class="hljs-keyword">return</span> x * x;
    } <span class="hljs-keyword">else</span> {
        <span class="hljs-keyword">if</span> (n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) {
            <span class="hljs-type">int</span> <span class="hljs-variable">sub</span> <span class="hljs-operator">=</span> n / <span class="hljs-number">2</span>;
            <span class="hljs-type">double</span> <span class="hljs-variable">subPow</span> <span class="hljs-operator">=</span> myPow(x, sub);
            <span class="hljs-keyword">if</span> (subPow == <span class="hljs-number">0.0</span>) {
                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
            } <span class="hljs-keyword">else</span> {
                <span class="hljs-keyword">return</span> subPow * subPow;
            }
        } <span class="hljs-keyword">else</span> {
            <span class="hljs-keyword">return</span> myPow(x, n - <span class="hljs-number">1</span>) * x;
        }
    }
}
</code></pre>
