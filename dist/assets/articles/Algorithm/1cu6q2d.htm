<h3 id="61rotate-listmedium">61.Rotate List(Medium)</h3>
<p>Given a linked list, rotate the list to the right by <em>k</em> places, where <em>k</em> is non-negative.</p>
<p><strong>Example 1:</strong></p>
<pre><code>Input: 1-&gt;2-&gt;3-&gt;4-&gt;5-&gt;NULL, k = 2
Output: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL
Explanation:
rotate 1 steps to the right: 5-&gt;1-&gt;2-&gt;3-&gt;4-&gt;NULL
rotate 2 steps to the right: 4-&gt;5-&gt;1-&gt;2-&gt;3-&gt;NULL
</code></pre>
<p><strong>Example 2:</strong></p>
<pre><code>Input: 0-&gt;1-&gt;2-&gt;NULL, k = 4
Output: 2-&gt;0-&gt;1-&gt;NULL
Explanation:
rotate 1 steps to the right: 2-&gt;0-&gt;1-&gt;NULL
rotate 2 steps to the right: 1-&gt;2-&gt;0-&gt;NULL
rotate 3 steps to the right: 0-&gt;1-&gt;2-&gt;NULL
rotate 4 steps to the right: 2-&gt;0-&gt;1-&gt;NULL
</code></pre>
<h4 id="solution">Solution</h4>
<p>追踪指针，简单直接</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title function_">rotateRight</span><span class="hljs-params">(ListNode head, <span class="hljs-type">int</span> k)</span> {
    <span class="hljs-keyword">if</span> (head == <span class="hljs-literal">null</span>) {
        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;
    }
    ListNode newHead, tail = <span class="hljs-literal">null</span>;
    <span class="hljs-type">int</span> <span class="hljs-variable">length</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
    <span class="hljs-type">ListNode</span> <span class="hljs-variable">now</span> <span class="hljs-operator">=</span> head;
    <span class="hljs-comment">// 遍历一般计算长度 标志尾巴</span>
    <span class="hljs-keyword">while</span> (now != <span class="hljs-literal">null</span>) {
        <span class="hljs-keyword">if</span> (now.next == <span class="hljs-literal">null</span>) {
            tail = now;
        }
        now = now.next;
        length++;
    }

    <span class="hljs-comment">// 处理k</span>
    k %= length;
    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">return</span> head;
    }
    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
    <span class="hljs-type">ListNode</span> <span class="hljs-variable">pre</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ListNode</span>(<span class="hljs-number">0</span>);
    now = head;
    pre.next = head;
    <span class="hljs-comment">// 遍历到转轴点</span>
    <span class="hljs-keyword">while</span> (count &lt; length - k) {
        pre = pre.next;
        now = now.next;
        count++;
    }
    <span class="hljs-comment">// 断开转轴点</span>
    pre.next = <span class="hljs-literal">null</span>;
    <span class="hljs-comment">// 转轴点为新的头部</span>
    newHead = now;
    <span class="hljs-comment">// 尾部接上旧头部</span>
    tail.next = head;
    <span class="hljs-keyword">return</span> newHead;
}
</code></pre>
<h3 id="62unique-pathsmedium">62.Unique Paths(Medium)</h3>
<p>A robot is located at the top-left corner of a <em>m</em> x <em>n</em> grid (marked &#39;Start&#39; in the diagram below).</p>
<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &#39;Finish&#39; in the diagram below).</p>
<p>How many possible unique paths are there?</p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/22/robot_maze.webp" alt="img">
Above is a 7 x 3 grid. How many possible unique paths are there?</p>
<p><strong>Note:</strong> <em>m</em> and <em>n</em> will be at most 100.</p>
<p><strong>Example 1:</strong></p>
<pre><code>Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -&gt; Right -&gt; Down
2. Right -&gt; Down -&gt; Right
3. Down -&gt; Right -&gt; Right
</code></pre>
<p><strong>Example 2:</strong></p>
<pre><code>Input: m = 7, n = 3
Output: 28
</code></pre>
<h4 id="dp">DP</h4>
<p>机器人走方格，有多少种走法题目，在<a href="./188zp6j.html?hash=c401ac5d">地痞</a>解过的，这遍解不同的是，我简化了之前的思路，并不需要预置好 pre 数组的结果</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">uniquePaths</span><span class="hljs-params">(<span class="hljs-type">int</span> m, <span class="hljs-type">int</span> n)</span> {
    <span class="hljs-type">int</span>[] pre = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];
    <span class="hljs-type">int</span>[] now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) {
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) {
            now[j] = j &gt; <span class="hljs-number">0</span> ? (now[j - <span class="hljs-number">1</span>] + pre[j]) : <span class="hljs-number">1</span>;
        }
        pre = Arrays.copyOf(now, now.length);
    }
    <span class="hljs-keyword">return</span> now[n - <span class="hljs-number">1</span>];
}
</code></pre>
<h3 id="63unique-paths-ii-medium">63.Unique Paths II (Medium)</h3>
<p>A robot is located at the top-left corner of a <em>m</em> x <em>n</em> grid (marked &#39;Start&#39; in the diagram below).</p>
<p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked &#39;Finish&#39; in the diagram below).</p>
<p>Now consider if some obstacles are added to the grids. How many unique paths would there be?</p>
<p><img src="https://assets.leetcode.com/uploads/2018/10/22/robot_maze.webp" alt="img"></p>
<p>An obstacle and empty space is marked as <code>1</code> and <code>0</code> respectively in the grid.</p>
<p><strong>Note:</strong> <em>m</em> and <em>n</em> will be at most 100.</p>
<p><strong>Example 1:</strong></p>
<pre><code>Input:
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]
Output: 2
Explanation:
There is one obstacle in the middle of the 3x3 grid above.
There are two ways to reach the bottom-right corner:
1. Right -&gt; Right -&gt; Down -&gt; Down
2. Down -&gt; Down -&gt; Right -&gt; Right
</code></pre>
<h4 id="dp-1">DP</h4>
<p>稍微变种一下，因为有障碍物，所以我们处理第一行 now 的时候，还是预处理一下 pre 比较好</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">uniquePathsWithObstacles</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] obstacleGrid)</span> {
    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> obstacleGrid.length;
    <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> obstacleGrid[<span class="hljs-number">0</span>].length;
    <span class="hljs-type">int</span>[] pre = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];
    <span class="hljs-comment">// 如果起点没有障碍物</span>
    <span class="hljs-keyword">if</span> (obstacleGrid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] != <span class="hljs-number">1</span>) {
        pre[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; pre.length; i++) {
            <span class="hljs-keyword">if</span> (obstacleGrid[<span class="hljs-number">0</span>][i] != <span class="hljs-number">0</span>) {
                pre[i] = <span class="hljs-number">1</span>;
            } <span class="hljs-keyword">else</span> {
                <span class="hljs-comment">// 一旦碰到障碍物 后面的路就断了</span>
                <span class="hljs-keyword">break</span>;
            }
        }
    }
    <span class="hljs-type">int</span>[] now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; m; i++) {
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; n; j++) {
            <span class="hljs-keyword">if</span> (obstacleGrid[i][j] == <span class="hljs-number">1</span>) {
                now[j] = <span class="hljs-number">0</span>;
            } <span class="hljs-keyword">else</span> {
                now[j] = j &gt; <span class="hljs-number">0</span> ? (now[j - <span class="hljs-number">1</span>] + pre[j]) : pre[j];
            }
        }
        pre = Arrays.copyOf(now, now.length);
    }
    <span class="hljs-keyword">return</span> now[n - <span class="hljs-number">1</span>];
}
</code></pre>
<h3 id="64minimun-path-summedium">64.Minimun Path Sum(Medium)</h3>
<p>Given a <em>m</em> x <em>n</em> grid filled with non-negative numbers, find a path from top left to bottom right which <em>minimizes</em> the sum of all numbers along its path.</p>
<p><strong>Note:</strong> You can only move either down or right at any point in time.</p>
<p><strong>Example:</strong></p>
<pre><code>Input:
[
  [1,3,1],
  [1,5,1],
  [4,2,1]
]
Output: 7
Explanation: Because the path 1→3→1→1→1 minimizes the sum.
</code></pre>
<h4 id="dp-2">DP</h4>
<p>曾经有一道题，<a href="./188zp6j.html?hash=d2258ac5">硬币收集问题</a>，这个就相当于收集到的最小币值</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minPathSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[][] grid)</span> {
    <span class="hljs-keyword">if</span> (grid.length == <span class="hljs-number">0</span> || grid[<span class="hljs-number">0</span>].length == <span class="hljs-number">0</span>) {
        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;
    }
    <span class="hljs-type">int</span>[] pre = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[grid[<span class="hljs-number">0</span>].length];
    <span class="hljs-type">int</span>[] now = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[grid[<span class="hljs-number">0</span>].length];
    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; grid.length; i++) {
        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; grid[<span class="hljs-number">0</span>].length; j++) {
            <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span> &amp;&amp; j == <span class="hljs-number">0</span>) {
                now[<span class="hljs-number">0</span>] = grid[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];
            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i == <span class="hljs-number">0</span>) {
                now[j] = grid[<span class="hljs-number">0</span>][j] + now[j - <span class="hljs-number">1</span>];
            } <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (j == <span class="hljs-number">0</span>) {
                now[j] = grid[i][<span class="hljs-number">0</span>] + pre[j];
            } <span class="hljs-keyword">else</span> {
                now[j] = grid[i][j] + Math.min(now[j - <span class="hljs-number">1</span>], pre[j]);
            }
        }
        pre = Arrays.copyOf(now, now.length);
    }
    <span class="hljs-keyword">return</span> now[now.length - <span class="hljs-number">1</span>];
}
</code></pre>
<h3 id="65valid-numberhard">65.Valid Number(Hard)</h3>
<p>不做，傻逼题</p>
