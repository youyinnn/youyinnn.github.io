<h3 id="概述">概述</h3>
<p>本篇主要介绍 InnoDB 中的锁，以及它与隔离级别之间的关系。从锁的算法、锁的等级、锁解决的问题来为 MySQL 的 InnoDB 锁做一个概述</p>
<p>我们能够轻易地想到，对数据库的数据进行操作的时候，为了保证数据一致性和持久性，我们会对这些操作上锁，但数据库中并不只有这些情况会上锁，其他地方也会有锁，比如缓冲池中页的增删改查的时候</p>
<p>而不同引擎、不同数据库对锁的实现和支持都是不一样的，比如 MyISAM 只支持表锁，在并发情况下的随机写操作性能就会差点，除非是插入到数据页的底部，那稍微并发性能高点</p>
<p>而 InnoDB 的并发效率会好很多，它提供了非锁定读，行锁等锁粒度细的支持</p>
<h3 id="innodb-中的锁">InnoDB 中的锁</h3>
<h4 id="表锁与行锁">表锁与行锁</h4>
<p>InnoDB 支持行级的读写锁：</p>
<ul>
<li>共享锁（S Lock）：允许事务读取一行数据；</li>
<li>排他锁（X Lock）：允许事务删除或更新一行数据；</li>
</ul>
<p>而 InnoDB 是支持<strong>多粒度锁定</strong>的，即这种机制允许事务同时持有行锁和表锁，为了实现这个机制，引擎提供了一种叫意向锁的锁，我们把库、表、页、行想象成一棵自顶向下的树，我们若要对某行上<strong>写锁 X Lock</strong>，那我们就得先对其所属的库、表、页处也上<strong>写意向锁 IX Lock</strong>，最后再对该行上<strong>X Lock</strong></p>
<p>在有意向锁的行为下，加入一个事务要对行上<strong>写锁 X Lock</strong>，但这时候该行所属的表上有<strong>读意向锁 IS Lock</strong>，那么事务需要等待表上的读意向锁释放之后，才能再加上读意向锁</p>
<p>于是我们发现，意向锁就是 InnoDB 的<strong>表级锁</strong>，也是读写锁的形式：</p>
<ul>
<li>意向共享锁（IS Lock）：事务要获取一张表中某几行的共享锁；</li>
<li>意向排他锁（IX Lock）：事务要获取一张表中某几行的排他锁；</li>
</ul>
<p>行锁表锁之间的兼容性：</p>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">IS</th>
<th align="center">IX</th>
<th align="center">S</th>
<th align="center">X</th>
</tr>
</thead>
<tbody><tr>
<td align="center">IS</td>
<td align="center">✔️</td>
<td align="center">✔️</td>
<td align="center">✔️</td>
<td align="center">✖️</td>
</tr>
<tr>
<td align="center">IX</td>
<td align="center">✔️</td>
<td align="center">✔️</td>
<td align="center">​✖️​</td>
<td align="center">​✖️​</td>
</tr>
<tr>
<td align="center">S</td>
<td align="center">✔️</td>
<td align="center">​✖️​</td>
<td align="center">✔️</td>
<td align="center">​✖️​</td>
</tr>
<tr>
<td align="center">X</td>
<td align="center">​✖️​</td>
<td align="center">​✖️​</td>
<td align="center">​✖️​</td>
<td align="center">​✖️​</td>
</tr>
</tbody></table>
<h4 id="一致性非锁定读">一致性非锁定读</h4>
<p>在理论模型中，读锁会在写锁被持有的时候阻塞而写锁会在读锁被持有的时候阻塞，但是为了提高并发效率，InnoDB 还是实现了<strong>MVCC</strong>的机制来规避读写互斥带来的的并发性能下将：<strong>通过恒读取数据之前的版本来避免阻塞</strong></p>
<p>在上篇<a href="./tx6g0p.html">《MySQL InnoDB 事务概述》</a>里说到，事务过程中的 undo 会提供**<em>MVCC</em>**支持，而且在默认的隔离级别下也会有这个特性，在读取数据的时候会读取快照而不会因为写锁被占用而阻塞</p>
<h4 id="一致性锁定读">一致性锁定读</h4>
<p>虽然有了 MVCC 让我们在读取上不会阻塞，但我们有时候还是想强制使用理论模型的标准来强制读写互斥，这时候可以<strong>显式地（强制地）</strong>对读取操作加锁而保证逻辑一致性</p>
<p>InnoDB 支持以下两种加锁：</p>
<ul>
<li><p><code>select ... for update</code></p>
<p>对读取的行记录加一个 X 锁，其他事务不能对该行上任何锁；</p>
</li>
<li><p><code>select ... lock in share mode</code></p>
<p>对读取的行记录加一个 S 锁，而其他读事务可以执行，其他写事务阻塞；</p>
</li>
</ul>
<h3 id="innodb-行锁算法">InnoDB 行锁算法</h3>
<p>InnoDB 有 3 种行锁算法：</p>
<ul>
<li><strong>Record Lock</strong>：锁单行；</li>
<li><strong>Gap Lock</strong>：间隙锁，锁一个范围，但是不包括记录本身；</li>
<li><strong>Next-Key Lock</strong>：Gap Lock + Record Lock，锁记录本身的同时还锁一个范围；而且这个锁是根据索引记录来执行的，如果表没有设置任何的索引，那么引擎会使用隐式的主键来进行锁定；</li>
</ul>
<p>在隔离级别为<strong>READ COMMITTED</strong>下，仅采用**<em>Record Lock</em>**算法；</p>
<p>而在隔离级别为<strong>REPEATABLE READ</strong>下，InnoDB 对于行的查询都使用的是**<em>Next-Key Lock</em><strong>算法，假如一个索引有 10，11，13，20 四个值，那么 Next-Key Lock 可能会锁住：<code>(-∞, 10]</code>，<code>(10, 11]</code>，<code>(11, 13]</code>，<code>(13, 20]</code>，<code>(20, +∞)</code>等区间；这种技术被称为</strong>Next-Key Locking**，</p>
<p>对应的，还会有<strong>Previous-Key Locking</strong>，其对应会锁住的区间为<code>(-∞, 10)</code>，<code>[10, 11)</code>，<code>[11, 13)</code>，<code>[13, 20)</code>，<code>[20, +∞)</code></p>
<h4 id="锁降级">锁降级</h4>
<p>虽然对于所有查询，使用的都是范围锁，但当查询索引含有<strong>唯一索引</strong>的时候，范围锁会<strong>降级</strong>为 Record Lock，只锁住单行，比如有数据：</p>
<pre><code class="hljs language-sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t ( a <span class="hljs-type">int</span> <span class="hljs-keyword">primary</span> key );
<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>;
<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">select</span> <span class="hljs-number">2</span>;
<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">select</span> <span class="hljs-number">5</span>;
</code></pre>
<p>再执行：</p>
<table>
<thead>
<tr>
<th align="center">时间</th>
<th align="center">会话 A</th>
<th align="center">会话 B</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">begin;</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">select * from t where a = 5 for update;</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">3</td>
<td align="center"></td>
<td align="center">begin;</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center"></td>
<td align="center">insert into t select 4;</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center"></td>
<td align="center">commit; #直接成功而不需要等待</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">commit;</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>我们看到，虽然再会话 A 我们请求了一个 X 锁，但是索引是等等值的 5，于是它锁<strong>降级</strong>，它只会锁住这一行记录，所以会话 B 的插入等值 4 这一操作不会被阻塞；</p>
<p>但是，如果是非唯一索引，比如辅助索引，那么就不会发生降级，比如有</p>
<pre><code class="hljs language-sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> t ( a <span class="hljs-type">int</span> , b <span class="hljs-type">int</span>, <span class="hljs-keyword">primary</span> key(a), key(b) );
<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">1</span>;
<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">select</span> <span class="hljs-number">3</span>,<span class="hljs-number">1</span>;
<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">select</span> <span class="hljs-number">5</span>,<span class="hljs-number">3</span>;
<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">select</span> <span class="hljs-number">7</span>,<span class="hljs-number">6</span>;
<span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t <span class="hljs-keyword">select</span> <span class="hljs-number">10</span>,<span class="hljs-number">8</span>;
</code></pre>
<p>对于查询：</p>
<pre><code class="hljs language-sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> b <span class="hljs-operator">=</span> <span class="hljs-number">3</span> <span class="hljs-keyword">for</span> <span class="hljs-keyword">update</span>;
</code></pre>
<p>上述要使用列 b 进行索引，但因为有两个索引，索引需要分别进行锁定；</p>
<ul>
<li>对于聚集索引，仅对于列<code>a=5</code>的索引加上 Record Lock，锁降级；</li>
<li>对于辅助索引，应用的是 Next-Key Lock，锁住键值区间<code>(1, 3)</code>和<code>(3, 6)</code>；</li>
</ul>
<h4 id="锁升级">锁升级</h4>
<p>锁升级是指将<strong>当前锁的粒度降低</strong>，比如可以把一个表的 1000 个行锁升级为一个页锁，或者页锁升级为表锁，这在各个数据库或者引擎里都有实现</p>
<p>但是<strong>InnoDB 并不实现这一特性</strong>，因为它不是通过记录本身去产生行锁的，而是采用<strong>位图</strong>的方式，对<strong>每个事务</strong>访问的<strong>每个页</strong>进行锁管理，因此：一个事务不管是锁住页中的<strong>一个记录</strong>还是<strong>多个记录</strong>，其开销通常都是<strong>一样的</strong>；</p>
<h4 id="行锁的细节">行锁的细节</h4>
<p>留心以下就能发现，其实 InnoDB 的行锁是完全依赖域索引的，所以 InnoDB 的这一行锁特点意味着：<strong>只有通过&quot;索引条件&quot;去检索数据，InnoDB 才使用行级锁，否则引擎会使用表锁！</strong></p>
<p>这一特点可以回答<em>“InnoDB 什么时候用表锁什么时候用行锁呢？”</em>这个问题</p>
<h3 id="锁相关问题与解决">锁相关问题与解决</h3>
<h4 id="phantom-problem（幻读问题）">Phantom Problem（幻读问题）</h4>
<p>在默认隔离级别下，InnoDB 使用 Next-Key Locking 机制来避免幻读，之前提到过很多幻读这一词，幻读的真正定义如下：</p>
<blockquote>
<p><strong>Phantom Problem 是指在同一事务下，连续执行两次同样的 SQL 可能会导致不同的结果，第二次的 SQL 可能会返回之前不存在的行。</strong></p>
</blockquote>
<h4 id="dirty-read（脏读问题）">Dirty Read（脏读问题）</h4>
<p>脏数据是指事物对缓冲页的数据进行修改，但是还没有被提交，所以我们并不希望脏数据能够被读取到</p>
<p>脏读一般已经很少发生了，除非你非要把隔离级别设置为<strong>READ UNCOMMITTED</strong></p>
<h4 id="nonrepeatable-read（不可重复读）">Nonrepeatable Read（不可重复读）</h4>
<p>指一个事务内多次读取同一数据集合，在事务还没有结束的时候，另一个事务对该数据集合进行了更新，因此在第一个事务执行过程中的两次读取之间造成数据差异</p>
<p>该问题和脏读的区别是，脏读是读到了未提交的数据，不可重复度是读到了已提交的数据，都违反了数据库事务的<strong>一致性</strong>要求</p>
<p>某种程度上说，<strong>不可重复读也是幻读问题</strong>，这在 MySQL 官方文档中明确了这一点，它也能够通过**<em>Next-Key Lock</em>**算法来避免这一问题</p>
<blockquote>
<p>上篇里有提到过，MVCC 也是用来解决不可重复读和幻读问题，而这里的**<em>Next-Key Lock</em>**算法也是用来解决这个的，到底是谁来解决问题的呢？答案其实很简单，就是看你语句本身请不请求锁的问题：</p>
<ul>
<li>在查询<strong>加</strong><code>for update</code>时，会用**<em>Next-Key Lock</em>**解决幻读问题，新的 insert 和 update 会阻塞；</li>
<li>在查询<strong>不加</strong><code>for update</code>时，会用**<em>MVCC</em>**解决幻读问题，新的 insert 和 update 不会阻塞；</li>
</ul>
</blockquote>
<h4 id="dead-lock（死锁）">Dead Lock（死锁）</h4>
<p>事务在等待锁的时候会造成阻塞，如果出现了循环阻塞，那么就会造成死锁，而死锁有两种解决方式</p>
<p>一般的做法是超时，但是对于长事务的作业如果应用超时后再回滚，那么会浪费掉很多性能以及时间，甚至是 undo log；</p>
<p>所以当前数据库包括 InnoDB 引擎采用的普遍的做法是**<em>wait-for graph</em><strong>，这是一种主动的死锁检测机制：</strong>通过将事务构造成节点，然后多个事务根据等待关系链成链表，然后检测是否有回路的这么一种方式来检测是否出现死锁；**</p>
<p>如果出现回路，<strong>通常来说</strong>引擎会回滚 undo 量小的事务，也会有回滚 undo 量大的事务的情况；</p>
<h3 id="锁的设计：乐观锁与悲观锁">锁的设计：乐观锁与悲观锁</h3>
<p>摘自：<a href="https://www.hollischuang.com/archives/934">https://www.hollischuang.com/archives/934</a></p>
<h4 id="悲观地想">悲观地想</h4>
<p>在对任意记录进行修改前，先尝试为该记录加上排他锁</p>
<p>如果加锁失败，说明该记录正在被修改，那么当前查询可能要等待或者抛出异常。 具体响应方式由开发者根据实际需要决定</p>
<p>如果成功加锁，那么就可以对记录做修改，事务完成后就会解锁了</p>
<p>其间如果有其他对该记录做修改或加排他锁的操作，都会等待我们解锁或直接抛出异常</p>
<p>在 MySQL 的 InnoDB 引擎中我们需要：</p>
<ol>
<li>开启手动提交；</li>
<li>用<code>select ... for update</code>加排他锁；</li>
<li>修改记录；</li>
<li>提交；</li>
</ol>
<h4 id="乐观地想">乐观地想</h4>
<p>乐观锁（ Optimistic Locking ） 相对悲观锁而言，乐观锁假设认为数据一般情况下不会造成冲突，所以在数据进行提交更新的时候，才会正式对数据的冲突与否进行检测，如果发现冲突了，则让返回用户错误的信息，让用户决定如何去做。</p>
<p>相对于悲观锁，在对数据库进行处理的时候，乐观锁并不会使用数据库提供的锁机制。一般的实现乐观锁的方式就是记录数据版本。</p>
<blockquote>
<p>数据版本,为数据增加的一个版本标识。当读取数据时，将版本标识的值一同读出，数据每更新一次，同时对版本标识进行更新。当我们提交更新的时候，判断数据库表对应记录的当前版本信息与第一次取出来的版本标识进行比对，如果数据库表当前版本号与第一次取出来的版本标识值相等，则予以更新，否则认为是过期数据。</p>
</blockquote>
<p>实现数据版本有两种方式，第一种是使用版本号，第二种是使用时间戳。</p>
