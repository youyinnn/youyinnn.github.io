<h3 id="introduction">Introduction</h3>
<blockquote>
<p><strong>Volumes are the preferred mechanism for persisting data generated by and used by Docker containers.</strong> While <a href="https://docs.docker.com/storage/bind-mounts/">bind mounts</a> are dependent on the directory structure of the host machine, <strong>volumes are completely managed by Docker</strong>. Volumes have several advantages over bind mounts:</p>
<ul>
<li>Volumes are easier to back up or migrate than bind mounts.</li>
<li>You can manage volumes using Docker CLI commands or the Docker API.</li>
<li>Volumes work on both Linux and Windows containers.</li>
<li>Volumes can be more safely shared among multiple containers.</li>
<li>Volume drivers let you store volumes on remote hosts or cloud providers, to encrypt the contents of volumes, or to add other functionality.</li>
<li>New volumes can have their content pre-populated by a container.</li>
</ul>
<p>In addition, volumes are often a better choice than persisting data in a container’s writable layer, because a volume does not increase the size of the containers using it, and the volume’s contents exist outside the lifecycle of a given container.</p>
<p><img src="https://docs.docker.com/storage/images/types-of-mounts-volume.webp" alt="volumes on the Docker host"></p>
<p>If your container generates non-persistent state data, consider using a <a href="https://docs.docker.com/storage/tmpfs/">tmpfs mount</a> to avoid storing the data anywhere permanently, and to increase the container’s performance by avoiding writing into the container’s writable layer.</p>
<p>Volumes use <code>rprivate</code> bind propagation, and bind propagation is not configurable for volumes.</p>
</blockquote>
<h3 id="use-volumes-with--v-and---mount-flag">Use volumes with <code>-v</code> and <code>--mount</code> flag</h3>
<p>There is two ways we could use volume on our target, with <code>-v</code> or <code>--volum</code> flag, or with <code>--mount</code> flag.</p>
<p>In general, <code>--mount</code> is more explicit and verbose, but it was available for standalone containers since Docker 17.06, before that it only use on swarm services. And the <code>-v</code> flag only support for container, not for services.</p>
<p>The biggest difference is that the <code>-v</code> or <code>--volume</code> syntax combines all the options together <strong>in one field</strong>, while the <code>--mount</code> syntax separates them.</p>
<p>If you need to specify volume driver options, you must use <code>--mount</code>.</p>
<ul>
<li><p><code>-v</code> or <code>--volume</code> : Consists of three fields, separated by colon characters (<code>:</code>). The fields must be in the correct order, and the meaning of each field is not immediately obvious.</p>
<ul>
<li>In the case of named volumes, the first field is the name of the volume, and is unique on a given host machine. For anonymous volumes, the first field is omitted.</li>
<li>The second field is the path where the file or directory are mounted in the container.</li>
<li>The third field is optional, and is a comma-separated list of options, such as <code>ro</code>. These options are discussed below.</li>
</ul>
</li>
<li><p><code>--mount</code> : Consists of multiple key-value pairs, separated by commas and each consisting of a <code>&lt;key&gt;=&lt;value&gt;</code>tuple. The<code>--mount</code>syntax is more verbose than<code>-v</code> or <code>--volume</code>, but the order of the keys is not significant, and the value of the flag is easier to understand.</p>
<ul>
<li>The <code>type</code> of the mount, which can be <a href="https://docs.docker.com/storage/bind-mounts/"><code>bind</code></a>, <code>volume</code>, or <a href="https://docs.docker.com/storage/tmpfs/"><code>tmpfs</code></a>. This topic discusses volumes, so the type is always<code>volume</code>.</li>
<li>The <code>source</code> of the mount. For named volumes, this is the name of the volume. For anonymous volumes, this field is omitted. May be specified as <code>source</code> or <code>src</code>.</li>
<li>The <code>destination</code> takes as its value the path where the file or directory is mounted in the container. May be specified as <code>destination</code>, <code>dst</code>, or <code>target</code>.</li>
<li>The <code>readonly</code> option, if present, causes the bind mount to be <a href="https://docs.docker.com/storage/volumes/#use-a-read-only-volume">mounted into the container as read-only</a>.</li>
<li>The <code>volume-opt</code> option, which can be specified more than once, takes a key-value pair consisting of the option name and its value.</li>
</ul>
</li>
</ul>
<blockquote>
<p>At this article, I just show the <code>--mount</code> flag.</p>
</blockquote>
<h3 id="create-and-manage-volumes">Create and manage volumes</h3>
<ul>
<li><p>create</p>
<pre><code class="hljs language-bash">$ docker volume create my-vol
</code></pre>
</li>
<li><p>list volumes</p>
<pre><code class="hljs language-bash">$ docker volume <span class="hljs-built_in">ls</span>
</code></pre>
</li>
<li><p>inspect volume</p>
<pre><code class="hljs language-bash">$ docker volume inspect my-vol
[
    {
        <span class="hljs-string">&quot;Driver&quot;</span>: <span class="hljs-string">&quot;local&quot;</span>,
        <span class="hljs-string">&quot;Labels&quot;</span>: {},
        <span class="hljs-string">&quot;Mountpoint&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/volumes/my-vol/_data&quot;</span>,
        <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;my-vol&quot;</span>,
        <span class="hljs-string">&quot;Options&quot;</span>: {},
        <span class="hljs-string">&quot;Scope&quot;</span>: <span class="hljs-string">&quot;local&quot;</span>
    }
]
</code></pre>
</li>
<li><p>remove volume</p>
<pre><code class="hljs language-bash">$ docker volume <span class="hljs-built_in">rm</span> my-vol
</code></pre>
</li>
</ul>
<h3 id="use-case">Use case</h3>
<p>If you start a container with a volume that does not yet exist, Docker creates the volume for you. The following example mounts the volume <code>myvol2</code> into <code>/app/</code> in the container.</p>
<p>The <code>-v</code> and <code>--mount</code> examples below produce the same result. You can’t run them both unless you remove the <code>devtest</code> container and the <code>myvol2</code> volume after running the first one.</p>
<h4 id="start-with-container">Start with container</h4>
<pre><code class="hljs language-bash">$ docker run -d \
  --name devtest \
  --mount <span class="hljs-built_in">source</span>=myvol2,target=/app \
  nginx:latest
</code></pre>
<p>Use <code>docker inspect devtest</code> to verify that the volume was created and mounted correctly. Look for the <code>Mounts</code> section:</p>
<pre><code class="hljs language-bash"><span class="hljs-string">&quot;Mounts&quot;</span>: [
    {
        <span class="hljs-string">&quot;Type&quot;</span>: <span class="hljs-string">&quot;volume&quot;</span>,
        <span class="hljs-string">&quot;Name&quot;</span>: <span class="hljs-string">&quot;myvol2&quot;</span>,
        <span class="hljs-string">&quot;Source&quot;</span>: <span class="hljs-string">&quot;/var/lib/docker/volumes/myvol2/_data&quot;</span>,
        <span class="hljs-string">&quot;Destination&quot;</span>: <span class="hljs-string">&quot;/app&quot;</span>,
        <span class="hljs-string">&quot;Driver&quot;</span>: <span class="hljs-string">&quot;local&quot;</span>,
        <span class="hljs-string">&quot;Mode&quot;</span>: <span class="hljs-string">&quot;&quot;</span>,
        <span class="hljs-string">&quot;RW&quot;</span>: <span class="hljs-literal">true</span>,
        <span class="hljs-string">&quot;Propagation&quot;</span>: <span class="hljs-string">&quot;&quot;</span>
    }
],
</code></pre>
<p>This shows that the mount is a volume, it shows the correct source and destination, and that the mount is read-write.</p>
<p>Stop the container and remove the volume. Note volume removal is a separate step.</p>
<pre><code class="hljs language-bash">$ docker container stop devtest

$ docker container <span class="hljs-built_in">rm</span> devtest

$ docker volume <span class="hljs-built_in">rm</span> myvol2
</code></pre>
<h4 id="start-with-service">Start with service</h4>
<p>When you start a service and define a volume, each service container uses its own local volume. None of the containers can share this data if you use the <code>local</code> volume driver, but some volume drivers do support shared storage. Docker for AWS and Docker for Azure both support persistent storage using the Cloudstor plugin.</p>
<p>The following example starts a <code>nginx</code> service with four replicas, each of which uses a local volume called <code>myvol2</code>.</p>
<pre><code class="hljs language-bash">$ docker service create -d \
  --replicas=4 \
  --name devtest-service \
  --mount <span class="hljs-built_in">source</span>=myvol2,target=/app \
  nginx:latest
</code></pre>
<p>Use <code>docker service ps devtest-service</code> to verify that the service is running:</p>
<pre><code class="hljs language-bash">$ docker service ps devtest-service

ID                  NAME                IMAGE               NODE                DESIRED STATE       CURRENT STATE            ERROR               PORTS
4d7oz1j85wwn        devtest-service.1   nginx:latest        moby                Running             Running 14 seconds ago
</code></pre>
<p>Remove the service, which stops all its tasks:</p>
<pre><code class="hljs language-bash">$ docker service <span class="hljs-built_in">rm</span> devtest-service
</code></pre>
<p>Removing the service does not remove any volumes created by the service. Volume removal is a separate step.</p>
<h4 id="populate-a-volume-using-a-container">Populate a volume using a container</h4>
<p>If you start a container which creates a new volume, as above, and the container has files or directories in the directory to be mounted (such as <code>/app/</code> above), the directory’s contents are copied into the volume. The container then mounts and uses the volume, and other containers which use the volume also have access to the pre-populated content.</p>
<p>To illustrate this, this example starts an <code>nginx</code> container and populates the new volume <code>nginx-vol</code> with the contents of the container’s <code>/usr/share/nginx/html</code> directory, which is where Nginx stores its default HTML content.</p>
<p>The <code>--mount</code> and <code>-v</code> examples have the same end result.</p>
<pre><code class="hljs language-bash">$ docker run -d \
  --name=nginxtest \
  --mount <span class="hljs-built_in">source</span>=nginx-vol,destination=/usr/share/nginx/html \
  nginx:latest
</code></pre>
<p>After running either of these examples, run the following commands to clean up the containers and volumes. Note volume removal is a separate step.</p>
<pre><code class="hljs language-bash">$ docker container stop nginxtest

$ docker container <span class="hljs-built_in">rm</span> nginxtest

$ docker volume <span class="hljs-built_in">rm</span> nginx-vol
</code></pre>
<h4 id="read-only">Read-only</h4>
<p>Because the volume could be mount at multiple containers, so there might containers only needs read access to the data.</p>
<pre><code class="hljs language-bash">$ docker run -d \
  --name=nginxtest \
  --mount <span class="hljs-built_in">source</span>=nginx-vol,destination=/usr/share/nginx/html,<span class="hljs-built_in">readonly</span> \
  nginx:latest
</code></pre>
<h3 id="other-case">Other case</h3>
<p>There are other use case on official doc like: <strong>Share data among machines</strong>, <strong>Back up, restore, migrate data volumes</strong> and so on.</p>
<p>You can check more information by refer to: <a href="https://docs.docker.com/storage/volumes">https://docs.docker.com/storage/volumes</a></p>
