<h3 id="前言">前言</h3>
<p>不知不觉写到第六坎了，前面刀剑磨刀石内功心法都有了，感觉自己应该很厉害了，其实不是，这一个月因为考试末尾和实习，断断续续的看，反反复复的看，越看越精神，越看越心虚。</p>
<p>无论怎么说，短板还是得慢慢补上来，保持谦逊，虚心学习。</p>
<p>回到整体，前面由内到外说了 Java 并发中很基本的几件事：</p>
<ul>
<li>基本的线程 API 和使用</li>
<li>基本的并发概念</li>
<li>volatile 和 synchronized 和锁概念</li>
</ul>
<p>我觉得是时候得停一下，综合一下这些东西，真刀真枪干几次，所以这篇算是我们并发游戏世界中，主人翁的<strong>“初出茅庐”</strong>篇，又可以叫做小试牛刀，在这篇我尝试例出并发编程中最基本的场景如：</p>
<ul>
<li><strong>死锁</strong></li>
<li><strong>“等待-通知”</strong></li>
<li><strong>有超时的“等待-通知”</strong></li>
<li><strong>“生产者-消费者”模式</strong></li>
<li><strong>双重检查锁延迟初始化的错误与正确示范</strong></li>
</ul>
<hr>
<h3 id="死锁">死锁</h3>
<p>死锁是多个以上的 process 互相等待对方释放资源而进入永久等待的一种情况，要产生死锁，就必须同时满足一下四个条件：</p>
<ul>
<li><p><strong>互斥条件</strong></p>
<p>​ 即某个资源在一段时间内只能由一个进程占有，不能同时被两个或两个以上的进程占有。这种独占资源如 CD-ROM 驱动器，打印机等等，必须在占有该资源的进程主动释放它之后，其它进程才能占有该资源。这是由资源本身的属性所决定的。如独木桥就是一种独占资源，两方的人不能同时过桥。</p>
</li>
<li><p><strong>不可抢占条件</strong></p>
<p>​ 进程所获得的资源在未使用完毕之前，资源申请者不能强行地从资源占有者手中夺取资源，而只能由该资源的占有者进程自行释放。如过独木桥的人不能强迫对方后退，也不能非法地将对方推下桥，必须是桥上的人自己过桥后空出桥面（即主动释放占有资源），对方的人才能过桥。</p>
</li>
<li><p><strong>占有且申请条件</strong></p>
<p>​ 进程至少已经占有一个资源，但又申请新的资源；由于该资源已被另外进程占有，此时该进程阻塞；但是，它在等待新资源之时，仍继续占用已占有的资源。还以过独木桥为例，甲乙两人在桥上相遇。甲走过一段桥面（即占有了一些资源），还需要走其余的桥面（申请新的资源），但那部分桥面被乙占有（乙走过一段桥面）。甲过不去，前进不能，又不后退；乙也处于同样的状况。</p>
</li>
<li><p><strong>循环等待条件</strong></p>
<p>​ 存在一个进程等待序列{P1，P2，...，Pn}，其中 P1 等待 P2 所占有的某一资源，P2 等待 P3 所占有的某一源，......，而 Pn 等待 P1 所占有的的某一资源，形成一个进程循环等待环。就像前面的过独木桥问题，甲等待乙占有的桥面，而乙又等待甲占有的桥面，从而彼此循环等待。</p>
</li>
</ul>
<p>死锁的处理可以分为：预防，避免，检测和解除</p>
<h4 id="死锁预防">死锁预防</h4>
<p>这是一种较为简单、直观的事先预防方法，方法是破坏产生死锁的 4 个条件，就算破坏一个，死锁也不会产生。这是一种静态方法。</p>
<h4 id="死锁避免">死锁避免</h4>
<p>系统在运行时分配资源的时候，能够对资源分配情况进行动态检查，如果结果良好，则允许分配，如果结果显示分配后会出现死锁，则不予分配。这是一种动态方法。</p>
<h4 id="检测和解除">检测和解除</h4>
<ul>
<li><p>检测</p>
<p>​ 不事先采取限制措施，也不检测系统是否进入安全区，运行系统在运行时发生死锁，但是会通过系统设置的检查机制，检测出死锁发生的地方。</p>
</li>
<li><p>解除</p>
<p>​ 检测到死锁地点之后，解除死锁状态</p>
</li>
</ul>
<p>例：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DeadLock</span> {
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; {
            <span class="hljs-keyword">synchronized</span> (a){
                <span class="hljs-keyword">try</span> {
                    Thread.sleep(<span class="hljs-number">10</span>);
                } <span class="hljs-keyword">catch</span> (InterruptedException e) {
                    e.printStackTrace();
                }
                <span class="hljs-keyword">synchronized</span> (b){}
            }
        }).start();
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; {
            <span class="hljs-keyword">synchronized</span> (b){
              <span class="hljs-keyword">synchronized</span> (a){}
            }
        }).start();
    }
}
</code></pre>
<h3 id="等待-通知">“等待-通知”</h3>
<blockquote>
<p>在就餐的时候，厨师和服务员之间的交互就是一种等待通知模式：</p>
<ol>
<li>厨师需要一定的时间去做菜</li>
<li>厨师没做好菜的时候，服务员就没活干了，所以服务员就有（wait）的状态</li>
<li>服务员取菜的时机是取决于厨师的，只有当厨师将菜放到“台面”上，并“通知（notify）”服务员，服务员菜开始干活</li>
</ol>
</blockquote>
<h4 id="范式">范式</h4>
<pre><code class="hljs language-java"><span class="hljs-keyword">synchronized</span>(对象) {
    <span class="hljs-keyword">while</span>(退出等待的条件不满足){
        对象.wait();
    }
    <span class="hljs-comment">// 等待完后的工作</span>
}
</code></pre>
<pre><code class="hljs language-java"><span class="hljs-keyword">synchronized</span>(对象){
    <span class="hljs-comment">// 改变退出等待的条件</span>
    对象.notifyAll()；
}
</code></pre>
<h4 id="实现">实现</h4>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WaitNotifyParadigm</span> {

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock&quot;</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">wait</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; {
            <span class="hljs-keyword">synchronized</span> (lock) {
                System.out.println(<span class="hljs-string">&quot;T1 started to wait...&quot;</span>);
                <span class="hljs-keyword">while</span> (wait) {
                    <span class="hljs-keyword">try</span> {
                        lock.wait(<span class="hljs-number">1000</span>);
                    } <span class="hljs-keyword">catch</span> (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                System.out.println(<span class="hljs-string">&quot;T1 stop waitting !&quot;</span>);
            }
        }).start();
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; {
            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) {
                System.out.println(<span class="hljs-string">&quot;T2 processing: &quot;</span> + (i + <span class="hljs-number">1</span>));
                <span class="hljs-keyword">try</span> {
                    Thread.sleep(<span class="hljs-number">1000</span>);
                } <span class="hljs-keyword">catch</span> (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            <span class="hljs-keyword">synchronized</span> (lock) {
                System.out.println(<span class="hljs-string">&quot;T2 done process, notifyAll...&quot;</span>);
                wait = <span class="hljs-literal">false</span>;
                lock.notifyAll();
            }
        }).start();
    }
}
</code></pre>
<p>结果：</p>
<pre><code class="hljs language-console">T1 started to wait...
T2 processing: 1
T2 processing: 2
T2 processing: 3
T2 done process, notifyAll...
T1 stop waitting !
</code></pre>
<h4 id="有超时的等待-通知">有超时的“等待-通知”</h4>
<p>要搭配<code>wait()</code>的超时机制的话，就得在条件中也考虑超时，我们可以加两个变量来完成超时：</p>
<ul>
<li>left：表示剩余多少时间就超时</li>
<li>end：表示超时时间的完整毫秒数</li>
</ul>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WaitNotifyParadigmWithTimeout</span> {

    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;lock&quot;</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">wait</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">timeout</span> <span class="hljs-operator">=</span> <span class="hljs-number">5000</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; {
            <span class="hljs-keyword">synchronized</span> (lock) {
                System.out.println(<span class="hljs-string">&quot;T1 started to wait...&quot;</span>);
                <span class="hljs-type">long</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> timeout;
                <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis() + timeout;
                <span class="hljs-keyword">while</span> (wait &amp;&amp; left &gt; <span class="hljs-number">0</span>) {
                    <span class="hljs-keyword">try</span> {
                        lock.wait(left);
                    } <span class="hljs-keyword">catch</span> (InterruptedException e) {
                        e.printStackTrace();
                    }
                    left = end - System.currentTimeMillis();
                }
                System.out.println(<span class="hljs-string">&quot;T1 stop waitting !&quot;</span>);
            }
        }).start();
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; {
            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) {
                System.out.println(<span class="hljs-string">&quot;T2 processing: &quot;</span> + (i + <span class="hljs-number">1</span>));
                <span class="hljs-keyword">try</span> {
                    Thread.sleep(<span class="hljs-number">1000</span>);
                } <span class="hljs-keyword">catch</span> (InterruptedException e) {
                    e.printStackTrace();
                }
            }
            <span class="hljs-keyword">synchronized</span> (lock) {
                System.out.println(<span class="hljs-string">&quot;T2 done process, notifyAll...&quot;</span>);
                wait = <span class="hljs-literal">false</span>;
                lock.notifyAll();
            }
        }).start();
    }
}
</code></pre>
<h3 id="生产者消费者">“生产者/消费者”</h3>
<p>利用 wait/notify 机制，先上一段多消费者/多生产者的示例</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestProducerConsumer2</span> {

    <span class="hljs-keyword">static</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">limit</span> <span class="hljs-operator">=</span> <span class="hljs-number">50</span>;
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> <span class="hljs-type">Integer</span> <span class="hljs-variable">stock</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">P_LOCK</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;p&quot;</span>;
    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">C_LOCK</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;c&quot;</span>;

    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> {
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Producer2</span>(<span class="hljs-string">&quot;P-1&quot;</span>)).start();
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer2</span>(<span class="hljs-string">&quot;C-1&quot;</span>)).start();
        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Consumer2</span>(<span class="hljs-string">&quot;C-2&quot;</span>)).start();
    }
}

<span class="hljs-keyword">class</span> <span class="hljs-title class_">Producer2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> {

    <span class="hljs-keyword">private</span> String name;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Producer2</span><span class="hljs-params">(String name)</span> {
        <span class="hljs-built_in">this</span>.name = name;
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {
            <span class="hljs-keyword">if</span> (TestProducerConsumer2.stock &lt; TestProducerConsumer2.limit) {
                System.out.println(<span class="hljs-string">&quot;Producing&quot;</span>);
                <span class="hljs-keyword">while</span> (TestProducerConsumer2.stock &lt; TestProducerConsumer2.limit) {
                    <span class="hljs-keyword">synchronized</span> (TestProducerConsumer2.P_LOCK) {
                        <span class="hljs-keyword">try</span> {
                            Thread.sleep(<span class="hljs-number">10</span>);
                        } <span class="hljs-keyword">catch</span> (InterruptedException e) {
                            e.printStackTrace();
                        }
                        TestProducerConsumer2.stock++;
                        System.out.println(<span class="hljs-string">&quot;Produced the &quot;</span> + TestProducerConsumer2.stock + <span class="hljs-string">&quot; stock&quot;</span>);
                    }
                }
                System.out.println(<span class="hljs-string">&quot;Produce process done&quot;</span>);
                <span class="hljs-keyword">synchronized</span> (TestProducerConsumer2.C_LOCK) {
                    TestProducerConsumer2.C_LOCK.notifyAll();
                }
            }
            <span class="hljs-keyword">synchronized</span> (TestProducerConsumer2.P_LOCK) {
                <span class="hljs-keyword">try</span> {
                    TestProducerConsumer2.P_LOCK.wait();
                } <span class="hljs-keyword">catch</span> (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}

<span class="hljs-keyword">class</span> <span class="hljs-title class_">Consumer2</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> {

    <span class="hljs-keyword">private</span> String name;

    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Consumer2</span><span class="hljs-params">(String name)</span> {
        <span class="hljs-built_in">this</span>.name = name;
    }

    <span class="hljs-meta">@Override</span>
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) {
            <span class="hljs-keyword">if</span> (TestProducerConsumer2.stock &gt;= TestProducerConsumer2.limit) {
                System.out.println(name + <span class="hljs-string">&quot; consuming&quot;</span>);
                <span class="hljs-keyword">while</span> (TestProducerConsumer2.stock &gt; <span class="hljs-number">0</span>) {
                    <span class="hljs-keyword">synchronized</span> (TestProducerConsumer2.C_LOCK) {
                        System.out.println(name + <span class="hljs-string">&quot; consumed the &quot;</span> + TestProducerConsumer2.stock + <span class="hljs-string">&quot; stock&quot;</span>);
                        TestProducerConsumer2.stock--;
                    }
                }
                System.out.println(name + <span class="hljs-string">&quot;consume process done&quot;</span>);
                <span class="hljs-keyword">synchronized</span> (TestProducerConsumer2.P_LOCK) {
                    TestProducerConsumer2.P_LOCK.notifyAll();
                }
            }
            <span class="hljs-keyword">synchronized</span> (TestProducerConsumer2.C_LOCK) {
                <span class="hljs-keyword">try</span> {
                    TestProducerConsumer2.C_LOCK.wait();
                } <span class="hljs-keyword">catch</span> (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
</code></pre>
<p>目标 item 是 stock，我们用<code>volatile</code>来保证其在 P/C 之间的可见性</p>
<p>P/C 之间各通过对方的 LOCK 来唤醒对方</p>
<p>生产/消费到达 limit 之后，各在自己的 LOCK 上等待</p>
<p>消费者之间通过消费者 LOCK 保证消费同步，生产者之间通过生产者 LOCK 保证生产同步</p>
<h3 id="双重检查锁延迟初始化的错误与正确示范">双重检查锁延迟初始化的错误与正确示范</h3>
<p>关于双重检查锁的由来就不再多说，我们看看双重检查的错误示范：</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DoubleCheckLocking</span> {
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Instance instance;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Instance <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) {							<span class="hljs-comment">// 第一次检查</span>
            <span class="hljs-keyword">synchronized</span>(DoubleCheckLocking.class) {	<span class="hljs-comment">// 加锁</span>
                <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) {					<span class="hljs-comment">// 第二次检查</span>
                    instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Instance</span>();			<span class="hljs-comment">// 初始化：这里有坑</span>
                }
            }
        }
        <span class="hljs-keyword">return</span> instance;
    }
}
</code></pre>
<blockquote>
<p>双重检查锁看起来很完美，但是这是一个没有考虑完整的优化！</p>
<p>在线程执行到 line4 的时候，代码读取到 instance 不为空，但是 instance 所引用的对象可能还没有完成对象初始化</p>
<p>即现在不为空的对象其实并不具备工作能力</p>
</blockquote>
<h4 id="探究">探究</h4>
<p>代码的第七行（<code>instance = new Instance();</code>）问题就出在这里，我们可以把这句话分解为以下三行：</p>
<ol>
<li>memory = allocate(); // 1 分配对象的内存空间</li>
<li>ctorInstance(memory); // 2 初始化对象</li>
<li>instance = memory; // 3 设置 instance 指向刚分配的内存地址</li>
<li>// 后续对 instance 对象的访问</li>
</ol>
<p>上面的 2、3 行代码，在某些编译器中可能会被重排序，可能是 3 先 2 后，这就是所谓的，对象不为空，但是对象并不具备工作的可能，为什么 JMM 会允许这样的重排序？说白了，JMM 重排序，允许这样的重排序因为在单线程情况下这样的重排序并不影响程序结果，1234 无论怎样，只要保证 2 在 4 之前就好了</p>
<p>这样的重排序在<code>单线程</code>的情况下是能安全地起到优化作用的，但是在多线程的情况下就会出问题了，我们看一个表：</p>
<table>
<thead>
<tr>
<th align="center">时间</th>
<th align="center">线程 A</th>
<th align="center">线程 B</th>
</tr>
</thead>
<tbody><tr>
<td align="center">t1</td>
<td align="center">A1：分配对象的内存空间</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">t2</td>
<td align="center">A3：设置 instance 指向内存空间</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">t3</td>
<td align="center"></td>
<td align="center">B1：判断 instance 是否为空</td>
</tr>
<tr>
<td align="center">t4</td>
<td align="center"></td>
<td align="center">B2：不为空，访问 instance 引用的对象</td>
</tr>
<tr>
<td align="center">t5</td>
<td align="center">A2：初始化对象</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">t6</td>
<td align="center">A4：访问 instance 引用的对象</td>
<td align="center"></td>
</tr>
</tbody></table>
<p>在 t4 时刻，线程 B 访问到的对象是不具备工作能力的对象，这样的对象没有意义。</p>
<p>我们要修正这个错误，有两种办法：</p>
<ul>
<li>禁止 2 和 3 的重排序</li>
<li>允许重排序，但是禁止其他线程感知到这个重排序</li>
</ul>
<h4 id="基于-volatile-的解决方法">基于 volatile 的解决方法</h4>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SafeDoubleCheckLocking</span> {
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Instance instance;
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Instance <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) {
            <span class="hljs-keyword">synchronized</span>(SafeDoubleCheckLocking.class) {
                <span class="hljs-keyword">if</span> (instance == <span class="hljs-literal">null</span>) {
                    instance = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Instance</span>();
                }
            }
        }
        <span class="hljs-keyword">return</span> instance;
    }
}
</code></pre>
<p>将 instance 声明为 volatile 变量，这样做可以<strong>禁止 2 和 3 的重排序</strong></p>
<h4 id="基于内部类和类初始化的解决方案">基于内部类和类初始化的解决方案</h4>
<p>在 JVM 初始化类的时候，JVM 首先会获取一个锁，保证多个线程同时初始化这个类的同步性，而类的加载和初始化工作，会准备好类中所有的静态变量</p>
<p>基于这个特性，我们可以有另外一种线程安全的延迟初始化方案——<code>Initialization On Demand Holder idiom</code></p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InstanceFactory</span> {
    <span class="hljs-keyword">private</span> statci <span class="hljs-keyword">class</span> <span class="hljs-title class_">InstanceHolder</span> {
        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Instance</span> <span class="hljs-variable">instance</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Instance</span>();
    }
    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Instance <span class="hljs-title function_">getInstance</span><span class="hljs-params">()</span> {
        <span class="hljs-keyword">return</span> InstanceHolder.instance;	<span class="hljs-comment">// 如果是第一次引用，那么在这个地方就会加载上面那个内部类</span>
    }
}
</code></pre>
<p>这个方案的本质是：让其他线程看不到初始化类线程的内部重排序，只能感知到结果</p>
<p>等于说，我们做线程安全单例，其实只需要一个<strong>“一次性锁”</strong>，而类初始化的这个特性恰好就是一个<strong>“一次性锁”</strong></p>
<p>这个锁称之为——<strong>初始化锁（LC）</strong>，我们来看看书里是怎么介绍的：</p>
<blockquote>
<p>Java 语言规范规定，对于每一个类或接口 C，都有一个唯一的初始化锁（LC）与之对应。从 C 到 LC 的映射，由 JVM 自由实现。JVM 在类初始化期间会获取这个初始化锁，并且每个线程至少要获取一次锁来确保这个类已经被初始化过了。</p>
</blockquote>
