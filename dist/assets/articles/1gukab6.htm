<h3 id="tess-login-on-jenkins">Tess login on Jenkins</h3>
<h4 id="use-tess-with-rheos-tess-base-agent">Use tess with Rheos tess-base agent</h4>
<p>Assume that you are at &quot;Job Configure&quot; panel now.</p>
<h5 id="configure-agent">Configure Agent</h5>
<p>In order to use tess <strong>effectively and legally</strong>, we should check <strong>&quot;Restrict where this project can be run&quot;</strong> on <strong>&quot;Job Notifications&quot;</strong> and select <code>tess-builder-numsg</code>, this is a image for tess-user that build from <strong><em>Rheos team</em></strong>, it prepared every thing we need for tess.</p>
<p>The configuration of this agent is at Jenkins: <strong>[Manage Jenkins(系统管理)] -&gt; [Configure System(系统设置)]-&gt;[Cloud(云)]-&gt;[Kubernetes]-&gt;[images]</strong> , named <strong>&quot;tess-builder-numsg&quot;</strong></p>
<h5 id="configure-parameterized-build参数化构建过程">Configure &quot;Parameterized Build(参数化构建过程)&quot;</h5>
<h6 id="for-production-cluster-login">For production cluster login</h6>
<p>We will need four parameters: <code>tess_username</code>,<code> tess_cluster</code>, <code>tess_pin</code>, <code>tess_yubikey_token_twice</code></p>
<blockquote>
<p><strong>Notice:</strong></p>
<ol>
<li>If your want to use two <strong>YubiKey Token</strong>, you have to configure a <strong>Multi-line String Parameter</strong>, to catch two <strong>YubiKey Token</strong> on a <strong>single parameter(<code>tess_yubikey_token_twice</code>)</strong>. It will prevent <strong>&quot;auto enter&quot;</strong> to trigger the build action while we use YubiKey to input access token.</li>
<li>From the usage above, the Jenkins parameter <code>tess_yubikey_token_twice</code> will separated to two parameters by line-separator.</li>
</ol>
</blockquote>
<h6 id="for-non-production-cluster-login">For non-production cluster login</h6>
<p>We can use <code>--password</code> option of tess to login tess to non-production cluster, so we just need three parameters: <code>tess_username</code>,<code> tess_cluster</code>, <code>corp_passord</code></p>
<h5 id="configure-build-execute-shell">Configure Build Execute Shell</h5>
<h6 id="for-production-cluster">For production cluster</h6>
<pre><code class="hljs language-shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> to the diractory <span class="hljs-built_in">where</span> tess login script is</span>
./tess-login.sh ${tess_username}  ${tess_cluster}  ${tess_pin} ${tess_yubikey_token_twice}
<span class="hljs-meta prompt_"># </span><span class="language-bash">your work with tess</span>
</code></pre>
<h6 id="for-non-production-cluster">For non-production cluster</h6>
<pre><code class="hljs language-shell"><span class="hljs-meta prompt_"># </span><span class="language-bash"><span class="hljs-built_in">cd</span> to the diractory <span class="hljs-built_in">where</span> tess login script is</span>
./tess-login.sh ${tess_username} ${corp_password} ${tess_cluster}
<span class="hljs-meta prompt_"># </span><span class="language-bash">your work with tess</span>
</code></pre>
<h5 id="for-production-cluster-1">For production cluster</h5>
<h6 id="tess-loginsh">tess-login.sh</h6>
<p>Reference: <a href="https://github.corp.ebay.com/jiaweizhang/NuMessage/blob/promethuesAndGrafanaConfig/numsg-deploy/metrics-deploy/spec/prod/tess-login.sh">tess-login.sh</a></p>
<pre><code class="hljs language-shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span>
<span class="hljs-meta prompt_">
# </span><span class="language-bash"><span class="hljs-built_in">exit</span> when error &amp; trace</span>
set -e
set -x

tess_username=$1
tess_cluster=$2
tess_pin=$3
<span class="hljs-meta prompt_">
# </span><span class="language-bash"><span class="hljs-variable">${tess_yubikey_token_twice}</span> will separated to <span class="hljs-variable">$4</span> and <span class="hljs-variable">$5</span> by line-separator</span>
tess_yubikey_token_1=$4
tess_yubikey_token_2=$5

echo &quot;token 1: $tess_yubikey_token_1&quot;
echo &quot;token 2: $tess_yubikey_token_2&quot;
<span class="hljs-meta prompt_">
# </span><span class="language-bash">combine <span class="hljs-variable">$tess_pin</span> and <span class="hljs-variable">$tess_yubikey_token_1</span></span>
expect tess-login-by-expect.sh $tess_username $tess_cluster $tess_pin$tess_yubikey_token_1 $tess_yubikey_token_2
</code></pre>
<h6 id="tess-login-by-expectsh">tess-login-by-expect.sh</h6>
<p>Reference: <a href="https://github.corp.ebay.com/jiaweizhang/NuMessage/blob/promethuesAndGrafanaConfig/numsg-deploy/metrics-deploy/spec/prod/tess-login-by-expect.sh">tess-login-by-expect.sh</a></p>
<p>You can also find it <a href="2.-Prepare-expect-on-your-image">below</a>.</p>
<h5 id="for-non-production-cluster-1">For non-production cluster</h5>
<h6 id="tess-loginsh-1">tess-login.sh</h6>
<p>Reference: <a href="https://github.corp.ebay.com/jiaweizhang/NuMessage/blob/promethuesAndGrafanaConfig/numsg-deploy/metrics-deploy/spec/qa/tess-login.sh">tess-login.sh</a></p>
<pre><code class="hljs language-shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span>

username=$1
corp_password=$2
server=$3

expect tess-login-by-expect.sh $server $username $corp_password
</code></pre>
<h6 id="tess-login-by-expectsh-1">tess-login-by-expect.sh</h6>
<p>Reference: <a href="https://github.corp.ebay.com/jiaweizhang/NuMessage/blob/promethuesAndGrafanaConfig/numsg-deploy/metrics-deploy/spec/qa/tess-login-by-expect.sh">tess-login-by-expect.sh</a></p>
<h4 id="if-you-want-to-build-our-own-agent-for-tess">If you want to build our own agent for tess</h4>
<p>Please make sure the agent environment contains the following two requirements for using tess <strong>effectively and legally</strong>.</p>
<h5 id="1-prepare-the-appropriate-version-of-tess-client-on-your-image">1. Prepare the appropriate version of Tess client on your image</h5>
<p>To log in to the tess, you should at least use the version <code>release-0.29.x</code>, and I <strong>strongly recommend</strong> you should always use the <strong>latest release version of tess</strong>. From now it&#39;s <code>release-0.33.5</code>.</p>
<p>here are the details:</p>
<blockquote>
<p><strong>Logging in to Production cluster is not the same as logging in to Non-Production Cluster</strong></p>
<p>If we want to log in the production cluster like <strong>21/22/23</strong>, there are two verification:</p>
<ol>
<li><strong>eBay Account verification:</strong> check that you have a valid account.</li>
<li><strong>Production Cluster Access permission verification:</strong> check that you have the permission to access the production cluster</li>
</ol>
<p>each verification require an <strong>YubiKey Token</strong>, though it&#39;s the way they did after version <code>release-0.29.x</code>, before this version, the old version of tess client use just one <strong>YubiKey Token</strong>, so it&#39;s invalid for access the production cluster at present.</p>
</blockquote>
<h6 id="how-to-upgrade-tess-client">How to upgrade tess client</h6>
<p>Perhaps we can&#39;t download the latest version of tess client on the <a href="http://tess.io">http://tess.io</a>, we can still upgrade the latest version by tess client itself !</p>
<pre><code class="hljs language-bash">$ tess version list
</code></pre>
<p>then you can get the latest version&#39;s number, and <strong>don&#39;t use <code>crul</code>or<code>wget</code>to download the tess client, the url that provide is unreachable on linux system.</strong></p>
<pre><code class="hljs language-bash">$ tess install release-0.33.5
</code></pre>
<p>and your should add tess to <code>$PATH </code> for good.</p>
<h5 id="2-prepare-expect-on-your-image">2. Prepare <code>expect</code> on your image</h5>
<p>We are trying to use shell script to handle all of our work on Jenkins. Perhaps there are some <strong>interactive</strong> client and they might blocked our building process and waiting user to input some command, such as tess login process:</p>
<pre><code class="hljs language-bash">$ tess login -c 21 --username=numessage
Username: numessage
****** Current Cluster Context 21 ******
Cluster Name: 21
Cluster URL: https://api.system.svc.21.tess.io
** You can use <span class="hljs-string">&#x27;--cluster&#x27;</span> switch to a different cluster
** You can use <span class="hljs-string">&#x27;tess clusters&#x27;</span> to list all available Tess clusters.
** You can use <span class="hljs-string">&#x27;tess version list&#x27;</span> to list all available tess client versions.
Pin + YubiKeyToken:
</code></pre>
<p>there is not options on tess client to let us passing the parameter of <code>Pin + YubiKeyToken</code> ask interaction, besides, it require the second <code>YubiKey Token</code>.</p>
<p>To handle this situation, we can use <code>expect</code> to passing the parameter by just wrapping the interactive shell on a script named <code>tess-login-by-expect.sh</code>:</p>
<pre><code class="hljs language-bash"><span class="hljs-meta">#!/usr/bin/expect</span>

<span class="hljs-built_in">set</span> username [lindex <span class="hljs-variable">$argv</span> 0]
<span class="hljs-built_in">set</span> cluster [lindex <span class="hljs-variable">$argv</span> 1]
<span class="hljs-built_in">set</span> pin_token1 [lindex <span class="hljs-variable">$argv</span> 2]
<span class="hljs-built_in">set</span> token2 [lindex <span class="hljs-variable">$argv</span> 3]

spawn tess login -c <span class="hljs-variable">$cluster</span> --username=<span class="hljs-variable">$username</span>

expect {
   <span class="hljs-string">&quot;Pin + YubiKeyToken:&quot;</span> {
       send <span class="hljs-string">&quot;<span class="hljs-variable">$pin_token1</span>\n&quot;</span>
       exp_continue
   }
   <span class="hljs-string">&quot;YubiKeyToken:&quot;</span> {
       send <span class="hljs-string">&quot;<span class="hljs-variable">$token2</span>\n&quot;</span>
       exp_continue
   }
   <span class="hljs-string">&quot;successfully authenticated&quot;</span> {
       send eof
   }
}
expect eof
</code></pre>
<p>it will expect two interaction then send our token automatically and expect tess client return &quot;successfully authenticated&quot;.</p>
<p>Then you could run it on your shell script:</p>
<pre><code class="hljs language-bash">expect tess-login-by-expect.sh <span class="hljs-variable">$tess_username</span> <span class="hljs-variable">$tess_cluster</span> $tess_pin<span class="hljs-variable">$tess_yubikey_token_1</span> <span class="hljs-variable">$tess_yubikey_token_2</span>
</code></pre>
<h4 id="installation">Installation</h4>
<p>Need install <code>tcl</code> and <code>expect</code></p>
<p>e.g on CentOS:</p>
<pre><code class="hljs language-bash">$ sudo yum install -y tcl expect
</code></pre>
